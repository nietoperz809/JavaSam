/* This file was generated from sam by Mips2Java on Fri Oct 09 17:26:17 CEST 2020 */

package samtool;

import java.io.PrintStream;

public class SamClass extends org.ibex.nestedvm.Runtime
{
    /* program counter */
    private int pc = 0;

    /* General Purpose registers */
    private final static int r0 = 0;
    private int      r1,  r2,  r3,  r4,  r5,  r6,  r7,
                r8,  r9,  r10, r11, r12, r13, r14, r15,
                r16, r17, r18, r19, r20, r21, r22, r23,
                r24, r25, r26, r27, r28, r29, r30, r31,
                hi = 0, lo = 0;
    /* FP registers */
    private int f0,  f1,  f2,  f3,  f4,  f5,  f6,  f7,
                f8,  f9,  f10, f11, f12, f13, f14, f15,
                f16, f17, f18, f19, f20, f21, f22, f23,
                f24, f25, f26, f27, f28, f29, f30, f31;
    /* FP Control Register */
    private int fcsr = 0;

    private final void run_10000() throws ExecutionException { /* 0x10000 - 0x10200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10000:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r0 >= 0) {
                        /* Next insn is delay slot */ 
                        r31=0x10010;
                        pc=0x10010;
                        continue;
                    }
                case 0x10010:
                    /* Next insn is delay slot */ 
                    r31=0x10018;
                    pc=0x101ac;
                    continue;
                case 0x10018:
                    if(r0 >= 0) {
                        /* Next insn is delay slot */ 
                        r31=0x10020;
                        pc=0x10020;
                        continue;
                    }
                case 0x10020:
                    /* Next insn is delay slot */ 
                    r31=0x10028;
                    pc=0x10208;
                    run_10200(); return;
                case 0x10028:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10038:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r0 >= 0) {
                        /* Next insn is delay slot */ 
                        r31=0x10048;
                        pc=0x10048;
                        continue;
                    }
                case 0x10048:
                    /* Next insn is delay slot */ 
                    r31=0x10050;
                    pc=0x100e4;
                    continue;
                case 0x10050:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10060:
                    r4 = 3 << 16;
                    r2 = 3 << 16;
                    r4 = r4 + -11328;
                    r2 = r2 + -11325;
                    r2 = r2 - r4;
                    r2 = (r2&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r25 = 0 << 16;
                        pc=0x10088;
                        continue;
                    }
                    r25 = 0 << 16;
                case 0x10080:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10088:
                    r25 = r25 + 0;
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10080;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r25;
                    return;
                case 0x1009c:
                    r4 = 3 << 16;
                    r2 = 3 << 16;
                    r4 = r4 + -11328;
                    r2 = r2 + -11328;
                    r2 = r2 - r4;
                    r2 = r2 >> 2;
                    r3 = r2 >>> 31;
                    r2 = r3 + r2;
                    r5 = r2 >> 1;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        r25 = 0 << 16;
                        pc=0x100d0;
                        continue;
                    }
                    r25 = 0 << 16;
                case 0x100c8:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x100d0:
                    r25 = r25 + 0;
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x100c8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r25;
                    return;
                case 0x100e4:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = 3 << 16;
                    addr=r19+-11120;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                        pc=0x10190;
                        continue;
                    }
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r18 = 3 << 16;
                    r17 = 3 << 16;
                    r18 = r18 + -26104;
                    r17 = r17 + -26100;
                    r16 = 3 << 16;
                    r17 = r17 - r18;
                    r2 = readPages[(r16+-11116)>>>12][((r16+-11116)>>>2)&0x3ff];
                    r17 = r17 >> 2;
                    r17 = r17 + -1;
                    r3 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r2 + 1;
                        pc=0x10164;
                        continue;
                    }
                    r2 = r2 + 1;
                case 0x10138:
                    r3 = r2 << 2;
                    r3 = r18 + r3;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r16+-11116)>>>12][((r16+-11116)>>>2)&0x3ff] = r2;
                    pc=r3;
                    r31=0x10150;
                    return;
                case 0x10150:
                    r2 = readPages[(r16+-11116)>>>12][((r16+-11116)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r2 + 1;
                        pc=0x10138;
                        continue;
                    }
                    r2 = r2 + 1;
                case 0x10164:
                    /* Next insn is delay slot */ 
                    r31=0x1016c;
                    pc=0x10060;
                    continue;
                case 0x1016c:
                    r2 = 0 << 16;
                    r2 = r2 + 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + 1;
                        pc=0x1018c;
                        continue;
                    }
                    r2 = r0 + 1;
                    r4 = 3 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -13864;
                    r31=0x10188;
                    pc=0x0;
                    throw new ExecutionException("Branch to addr 0x0");
                case 0x10188:
                    r2 = r0 + 1;
                case 0x1018c:
                    addr=r19+-11120;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x10190:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x101ac:
                    r2 = 0 << 16;
                    r29 = r29 + -24;
                    r2 = r2 + 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                        pc=0x101d4;
                        continue;
                    }
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r4 = 3 << 16;
                    r5 = 3 << 16;
                    r4 = r4 + -13864;
                    /* Next insn is delay slot */ 
                    r5 = r5 + -11112;
                    r31=0x101d4;
                    pc=0x0;
                    throw new ExecutionException("Branch to addr 0x0");
                case 0x101d4:
                    r4 = 3 << 16;
                    r2 = readPages[(r4+-13860)>>>12][((r4+-13860)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = 0 << 16;
                        pc=0x101fc;
                        continue;
                    }
                    r2 = 0 << 16;
                    r2 = r2 + 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x101fc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r4 = r4 + -13860;
                    pc=r2;
                    r31=0x101fc;
                    return;
                case 0x101fc:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                case 0x10200:
                    pc=0x10200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10200() throws ExecutionException { /* 0x10200 - 0x10400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10200:
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=0x1009c;
                    run_10000(); return;
                case 0x10208:
                    r2 = 3 << 16;
                    r2 = readPages[(r2+-26112)>>>12][((r2+-26112)>>>2)&0x3ff];
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x10260;
                        continue;
                    }
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 3 << 16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r16 + -26116;
                    r17 = r0 + -1;
                case 0x10238:
                    /* Next insn is delay slot */ 
                    r16 = r16 + -4;
                    pc=r2;
                    r31=0x10240;
                    return;
                case 0x10240:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    if(r2 != r17) {
                        /* Next insn is delay slot */ 
                        pc=0x10238;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                case 0x10260:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10268:
                    r2 = r4 + 1;
                case 0x1026c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + 1;
                        pc=0x1026c;
                        continue;
                    }
                    r4 = r4 + 1;
                    /* Next insn is delay slot */ 
                    r2 = r4 - r2;
                    pc=r31;
                    return;
                case 0x10284:
                    r29 = r29 + -32;
                    r2 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = r16 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x102ac;
                    return;
                case 0x102ac:
                    r3 = r2 + r0;
                    r2 = r0 + 2;
                    pc = 0x102b4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x102b8;
                        return;
                    }
                case 0x102b8:
                    r2 = r0 + 1;
                    r3 = r0 + 1;
                    pc = 0x102c0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x102c4;
                        return;
                    }
                case 0x102c4:
                case 0x10400:
                    pc=0x10400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10400() throws ExecutionException { /* 0x10400 - 0x10600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10400:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r28 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1047c;
                        continue;
                    }
                case 0x10418:
                    writePages[(r28+-32724)>>>12][((r28+-32724)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x10424;
                    pc=0x10000;
                    run_10000(); return;
                case 0x10424:
                    r4 = 1 << 16;
                    r4 = r4 + 56;
                    /* Next insn is delay slot */ 
                    r31=0x10434;
                    pc=0x19000;
                    run_19000(); return;
                case 0x10434:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1048c;
                        continue;
                    }
                    r2 = r16 + 4;
                    r4 = r0 + r0;
                case 0x1044c:
                    r2 = r2 + 4;
                    r6 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1044c;
                        continue;
                    }
                case 0x10460:
                    r6 = readPages[(r28+-32724)>>>12][((r28+-32724)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x10470;
                    pc=0x18400;
                    run_18400(); return;
                case 0x10470:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1047c;
                    pc=0x19400;
                    run_19400(); return;
                case 0x1047c:
                    r2 = 3 << 16;
                    r28 = r2 + 21440;
                    /* Next insn is delay slot */ 
                    pc=0x10418;
                    continue;
                case 0x1048c:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x10460;
                    continue;
                case 0x10600:
                    pc=0x10600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10600() throws ExecutionException { /* 0x10600 - 0x10800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10600:
                    r4 = r4 & 65535;
                    r2 = r0 | 37541;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r5 = r5 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10634;
                        continue;
                    }
                    r2 = 3 << 16;
                    r2 = r2 + -24072;
                    r4 = r4 + r2;
                    r5 = r4 + r5;
                    addr=r5+-32000;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10634:
                    r2 = 3 << 16;
                    r2 = r2 + -24520;
                    r4 = r4 + r2;
                    r5 = r4 + r5;
                    r4 = 65535 << 16;
                    r5 = r4 + r5;
                    addr=r5+27995;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10800:
                    pc=0x10800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10800() throws ExecutionException { /* 0x10800 - 0x10a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10800:
                    r3 = 3 << 16;
                    r2 = r0 + 32;
                    r29 = r29 + -88;
                    addr=r3+-11088;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r22;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r31;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r30;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r23;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r21;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r20;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r19;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r4;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    r22 = r3 + -11088;
                    /* Next insn is delay slot */ 
                    pc=0x10888;
                    continue;
                case 0x10858:
                    r3 = r5 & 95;
                    r6 = r22 + r2;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r2 + 1;
                    r3 = r3 & 255;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r4 + 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x108d8;
                        continue;
                    }
                case 0x10884:
                    r2 = r3 + r0;
                case 0x10888:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r3 = r5 & 127;
                    r6 = (r3&0xffffffffL) < (112&0xffffffffL) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10858;
                        continue;
                    }
                    r6 = (r3&0xffffffffL) < (96&0xffffffffL) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x108b0;
                        continue;
                    }
                    r3 = r5 & 79;
                case 0x108b0:
                    r6 = r22 + r2;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r2 + 1;
                    r3 = r3 & 255;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r4 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10884;
                        continue;
                    }
                case 0x108d8:
                    r2 = r0 + 27;
                    addr=r22+255;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 255;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = 3 << 16;
                    r19 = r0 + 255;
                    r18 = r2 + -24072;
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = 3 << 16;
                    r21 = r2 + -24520;
                    r25 = r19 + r0;
                case 0x10904:
                    r2 = r3 + 1;
                    r2 = r2 & 255;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r22 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r2 = r0 + 91;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x10cb0;
                        run_10c00(); return;
                    }
                case 0x10928:
                    r2 = r0 + 46;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x11450;
                        run_11400(); return;
                    }
                    r3 = 3 << 16;
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r3 + -19996;
                case 0x10940:
                    r2 = r4 + r5;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r2 & 2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1138c;
                        run_11200(); return;
                    }
                    r16 = r0 | 37541;
                case 0x1095c:
                    r8 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r9 = r0 | 37541;
                    r8 = r22 + r8;
                    r7 = 65535 << 16;
                    r12 = r4 + r0;
                    r6 = r0 + -128;
                    r11 = r0 + 32;
                    r14 = r0 + 35;
                    r15 = r0 + 46;
                    r20 = r0 + 38;
                    r24 = r0 + 64;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r8;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r8;
                case 0x10990:
                    r16 = r16 + 1;
                    r16 = r16 & 65535;
                    r2 = ((r16 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10d60;
                        run_10c00(); return;
                    }
                case 0x109a4:
                    r2 = r21 + r16;
                    r2 = r7 + r2;
                    addr=r2+27995;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                case 0x109b4:
                    r2 = r2 << 24;
                    r2 = r2 >> 24;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x10990;
                        continue;
                    }
                    r2 = ((r16 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    r30 = r0 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10f28;
                        run_10e00(); return;
                    }
                    r3 = r16 + -32000;
                    r13 = r0 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x109e8;
                    continue;
                case 0x109e4:
                    r30 = r10 + r0;
                case 0x109e8:
                    r8 = r3 + r30;
                    r8 = r18 + r8;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r2 = r30 + 1;
                    r10 = r2 & 255;
                    if(r8 != r13) {
                        /* Next insn is delay slot */ 
                        pc=0x109e4;
                        continue;
                    }
                case 0x10a00:
                    pc=0x10a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10a00() throws ExecutionException { /* 0x10a00 - 0x10c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10a00:
                    r13 = r30 + r0;
                    r10 = r0 + 41;
                    /* Next insn is delay slot */ 
                    pc=0x10a18;
                    continue;
                case 0x10a14:
                    r13 = r23 + r0;
                case 0x10a18:
                    r23 = r13 + 1;
                    r23 = r23 & 255;
                    r8 = r18 + r23;
                    r8 = r8 + r16;
                    addr=r8+-32000;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    if(r8 != r10) {
                        /* Next insn is delay slot */ 
                        pc=0x10a14;
                        continue;
                    }
                    r13 = r13 + 2;
                    r13 = r13 & 255;
                    r17 = r0 + 61;
                    /* Next insn is delay slot */ 
                    pc=0x10a50;
                    continue;
                case 0x10a4c:
                    r13 = r10 + r0;
                case 0x10a50:
                    r8 = r3 + r13;
                    r8 = r18 + r8;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r10 = r13 + 1;
                    r8 = r8 & 127;
                    r10 = r10 & 255;
                    if(r8 != r17) {
                        /* Next insn is delay slot */ 
                        pc=0x10a4c;
                        continue;
                    }
                    r19 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 & 255;
                    r10 = r19 - r30;
                    r8 = r5 + r0;
                    r17 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r10 = r10 & 255;
                    /* Next insn is delay slot */ 
                    pc=0x10aa0;
                    continue;
                case 0x10a90:
                    r17 = r10 + r2;
                    r17 = r17 & 255;
                    r8 = r22 + r17;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                case 0x10aa0:
                    r19 = r3 + r2;
                    r19 = r18 + r19;
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r19 = tmp;
                    if(r19 != r8) {
                        /* Next insn is delay slot */ 
                        pc=0x10990;
                        run_10800(); return;
                    }
                    r2 = r2 + 1;
                    r2 = r2 & 255;
                    if(r2 != r23) {
                        /* Next insn is delay slot */ 
                        pc=0x10a90;
                        continue;
                    }
                case 0x10ac8:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = r17 + r0;
                    r10 = ((r16 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    r19 = r0 + 43;
                case 0x10ad8:
                    r30 = r30 + -1;
                    r30 = r30 & 255;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10b54;
                        continue;
                    }
                case 0x10ae8:
                    r2 = r21 + r30;
                    r2 = r2 + r16;
                    r2 = r7 + r2;
                    addr=r2+27995;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r5 = r2 << 24;
                    r5 = r5 >> 24;
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x10b74;
                        continue;
                    }
                case 0x10b0c:
                    r5 = r4 + r2;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r5 = r6 & r5;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10d70;
                        run_10c00(); return;
                    }
                    r3 = r3 + -1;
                    r3 = r3 & 255;
                    r5 = r22 + r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    if(r5 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x10d44;
                        run_10c00(); return;
                    }
                case 0x10b40:
                    r8 = r3 + r0;
                case 0x10b44:
                    r30 = r30 + -1;
                    r30 = r30 & 255;
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10ae8;
                        continue;
                    }
                case 0x10b54:
                    r2 = r18 + r30;
                    r2 = r2 + r16;
                    addr=r2+-32000;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r5 = r2 << 24;
                    r5 = r5 >> 24;
                    if(r5 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x10b0c;
                        continue;
                    }
                case 0x10b74:
                    r10 = r17 + r0;
                    r2 = r17 + r0;
                    r3 = ((r16 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    r5 = r0 + 43;
                    r30 = r0 + 69;
                case 0x10b88:
                    r23 = r23 + 1;
                    r23 = r23 & 255;
                    if(r13 == r23) {
                        /* Next insn is delay slot */ 
                        pc=0x10bfc;
                        continue;
                    }
                case 0x10b98:
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x111ac;
                        run_11000(); return;
                    }
                    r8 = r21 + r23;
                    r8 = r8 + r16;
                    r8 = r7 + r8;
                    addr=r8+27995;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                case 0x10bb4:
                    r8 = r4 + r10;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r8 = r6 & r8;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1109c;
                        run_11000(); return;
                    }
                    r2 = r2 + 1;
                    r2 = r2 & 255;
                    r8 = r22 + r2;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    if(r8 != r10) {
                        /* Next insn is delay slot */ 
                        pc=0x10d44;
                        run_10c00(); return;
                    }
                case 0x10be8:
                    r8 = r2 + r0;
                case 0x10bec:
                    r23 = r23 + 1;
                    r23 = r23 & 255;
                    if(r13 != r23) {
                        /* Next insn is delay slot */ 
                        pc=0x10b98;
                        continue;
                    }
                case 0x10bfc:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                case 0x10c00:
                    pc=0x10c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10c00() throws ExecutionException { /* 0x10c00 - 0x10e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10c00:
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r8&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r13&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x115d0;
                        run_11400(); return;
                    }
                case 0x10c14:
                    r2 = r0 | 37541;
                    r2 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x113d8;
                        run_11200(); return;
                    }
                    r5 = r0 + 61;
                    r6 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x10c48;
                    continue;
                case 0x10c34:
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r13 = tmp;
                    r13 = r13 + 1;
                    r13 = r13 & 255;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r13&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x10c48:
                    r2 = r18 + r13;
                    r2 = r2 + r16;
                    addr=r2+-32000;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r2 & 127;
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x10c74;
                        continue;
                    }
                    r25 = r25 + 1;
                    r25 = r25 & 255;
                    r4 = r6 + r25;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x10c74:
                    r2 = r2 << 24;
                    r2 = r2 >> 24;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x10c34;
                        continue;
                    }
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r3 = r17 + r0;
                case 0x10c8c:
                    r2 = r3 + 1;
                    r2 = r2 & 255;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r22 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r2 = r0 + 91;
                    if(r5 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x10928;
                        run_10800(); return;
                    }
                case 0x10cb0:
                    r3 = r25 + 1;
                    r5 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r3 = r3 & 255;
                    r2 = r0 + -101;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r5 + r3;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x11624;
                    run_11600(); return;
                case 0x10cdc:
                    r19 = r2 + 1;
                    r19 = r19 & 255;
                    r8 = r22 + r19;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r10 = r8 + r12;
                    addr=r10+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    r10 = r10 & 16;
                    r10 = r10 & 255;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11338;
                        run_11200(); return;
                    }
                    r10 = r0 + 72;
                    if(r8 != r10) {
                        /* Next insn is delay slot */ 
                        pc=0x10e64;
                        run_10e00(); return;
                    }
                    r2 = r2 + 2;
                    r10 = 3 << 16;
                    r10 = r10 + -11088;
                    r2 = r2 & 255;
                    r8 = r2 + r10;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    r19 = r0 + -17;
                    r8 = r10 & r19;
                    r19 = r0 + 67;
                    if(r8 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x10be8;
                        run_10a00(); return;
                    }
                case 0x10d44:
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    r16 = r16 & 65535;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r2 = ((r16 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x109a4;
                        run_10800(); return;
                    }
                case 0x10d60:
                    r2 = r18 + r16;
                    addr=r2+-32000;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x109b4;
                    run_10800(); return;
                case 0x10d70:
                    if(r2 == r11) {
                        /* Next insn is delay slot */ 
                        pc=0x10df8;
                        continue;
                    }
                    if(r2 == r14) {
                        /* Next insn is delay slot */ 
                        pc=0x10e38;
                        run_10e00(); return;
                    }
                    if(r2 == r15) {
                        /* Next insn is delay slot */ 
                        pc=0x10e78;
                        run_10e00(); return;
                    }
                    if(r2 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x10eb0;
                        run_10e00(); return;
                    }
                    if(r2 == r24) {
                        /* Next insn is delay slot */ 
                        pc=0x1101c;
                        run_11000(); return;
                    }
                    r5 = r0 + 94;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x11054;
                        run_11000(); return;
                    }
                    if(r2 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x11274;
                        run_11200(); return;
                    }
                    r8 = r0 + 58;
                    if(r2 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x10dc4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x11614;
                    run_11600(); return;
                case 0x10dc0:
                    r3 = r8 + r0;
                case 0x10dc4:
                    r8 = r3 + -1;
                    r8 = r8 & 255;
                    r2 = r22 + r8;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r4 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 32;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10dc0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x10ad8;
                    run_10a00(); return;
                case 0x10df8:
                    r3 = r3 + -1;
                    r3 = r3 & 255;
                case 0x10e00:
                    pc=0x10e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10e00() throws ExecutionException { /* 0x10e00 - 0x11000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10e00:
                    r2 = r22 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 + r12;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r6 & r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10b40;
                        run_10a00(); return;
                    }
                case 0x10e24:
                    r10 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    addr=r10+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x10990;
                    run_10800(); return;
                case 0x10e38:
                    r3 = r3 + -1;
                    r3 = r3 & 255;
                    r2 = r22 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 + r12;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10b40;
                        run_10a00(); return;
                    }
                case 0x10e64:
                    r19 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x10990;
                    run_10800(); return;
                case 0x10e78:
                    r3 = r3 + -1;
                    r3 = r3 & 255;
                    r2 = r22 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 + r12;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10d44;
                        run_10c00(); return;
                    }
                    r8 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x10b44;
                    run_10a00(); return;
                case 0x10eb0:
                    r5 = r3 + -1;
                    r5 = r5 & 255;
                    r2 = r22 + r5;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r8 = r2 + r12;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r8 = r8 & 16;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1108c;
                        run_11000(); return;
                    }
                    r5 = r0 + 72;
                    if(r2 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x10f14;
                        continue;
                    }
                    r3 = r3 + -2;
                    r5 = 3 << 16;
                    r5 = r5 + -11088;
                    r3 = r3 & 255;
                    r2 = r3 + r5;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r8 = r0 + -17;
                    r2 = r8 & r2;
                    r5 = r0 + 67;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x10b40;
                        run_10a00(); return;
                    }
                case 0x10f14:
                    r8 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x10990;
                    run_10800(); return;
                case 0x10f28:
                    r10 = 65535 << 16;
                    r10 = r10 | 27995;
                    r3 = r16 + r10;
                    r10 = r0 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x10f44;
                    continue;
                case 0x10f40:
                    r30 = r23 + r0;
                case 0x10f44:
                    r8 = r3 + r30;
                    r8 = r21 + r8;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r2 = r30 + 1;
                    r23 = r2 & 255;
                    if(r8 != r10) {
                        /* Next insn is delay slot */ 
                        pc=0x10f40;
                        continue;
                    }
                    r10 = r0 + 41;
                    /* Next insn is delay slot */ 
                    pc=0x10f70;
                    continue;
                case 0x10f6c:
                    r23 = r13 + r0;
                case 0x10f70:
                    r8 = r3 + r23;
                    r8 = r21 + r8;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r13 = r23 + 1;
                    r13 = r13 & 255;
                    if(r8 != r10) {
                        /* Next insn is delay slot */ 
                        pc=0x10f6c;
                        continue;
                    }
                    r17 = r0 + 61;
                    /* Next insn is delay slot */ 
                    pc=0x10f9c;
                    continue;
                case 0x10f98:
                    r13 = r10 + r0;
                case 0x10f9c:
                    r8 = r3 + r13;
                    r8 = r21 + r8;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r10 = r13 + 1;
                    r8 = r8 & 127;
                    r10 = r10 & 255;
                    if(r8 != r17) {
                        /* Next insn is delay slot */ 
                        pc=0x10f98;
                        continue;
                    }
                    r19 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 & 255;
                    r10 = r19 - r30;
                    r8 = r5 + r0;
                    r17 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r10 = r10 & 255;
                    /* Next insn is delay slot */ 
                    pc=0x10fec;
                    continue;
                case 0x10fdc:
                    r17 = r10 + r2;
                    r17 = r17 & 255;
                    r8 = r22 + r17;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                case 0x10fec:
                    r19 = r3 + r2;
                    r19 = r21 + r19;
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r19 = tmp;
                    if(r19 != r8) {
                        /* Next insn is delay slot */ 
                        pc=0x10990;
                        run_10800(); return;
                    }
                case 0x11000:
                    pc=0x11000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11000() throws ExecutionException { /* 0x11000 - 0x11200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11000:
                    r2 = r2 + 1;
                    r2 = r2 & 255;
                    if(r2 != r23) {
                        /* Next insn is delay slot */ 
                        pc=0x10fdc;
                        run_10e00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x10ac8;
                    run_10a00(); return;
                case 0x1101c:
                    r3 = r3 + -1;
                    r3 = r3 & 255;
                    r2 = r22 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 + r12;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e24;
                        run_10e00(); return;
                    }
                    r8 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x10b44;
                    run_10a00(); return;
                case 0x11054:
                    r3 = r3 + -1;
                    r3 = r3 & 255;
                    r2 = r22 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 + r12;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 32;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e64;
                        run_10e00(); return;
                    }
                    r8 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x10b44;
                    run_10a00(); return;
                case 0x1108c:
                    r3 = r5 + r0;
                    r8 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x10b44;
                    run_10a00(); return;
                case 0x1109c:
                    if(r10 == r11) {
                        /* Next insn is delay slot */ 
                        pc=0x111c0;
                        continue;
                    }
                    if(r10 == r14) {
                        /* Next insn is delay slot */ 
                        pc=0x111fc;
                        continue;
                    }
                    if(r10 == r15) {
                        /* Next insn is delay slot */ 
                        pc=0x11238;
                        run_11200(); return;
                    }
                    if(r10 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x10cdc;
                        run_10c00(); return;
                    }
                    if(r10 == r24) {
                        /* Next insn is delay slot */ 
                        pc=0x112b8;
                        run_11200(); return;
                    }
                    r8 = r0 + 94;
                    if(r10 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x112fc;
                        run_11200(); return;
                    }
                    if(r10 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x11348;
                        run_11200(); return;
                    }
                    r8 = r0 + 58;
                    if(r10 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x11174;
                        continue;
                    }
                    r8 = r0 + 37;
                    if(r10 != r8) {
                        /* Next insn is delay slot */ 
                        pc=0x116b4;
                        run_11600(); return;
                    }
                    r8 = r2 + 1;
                    r8 = r8 & 255;
                    r10 = r22 + r8;
                    addr=r10+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    if(r10 == r30) {
                        /* Next insn is delay slot */ 
                        pc=0x114b4;
                        run_11400(); return;
                    }
                    r8 = r0 + 73;
                    if(r10 != r8) {
                        /* Next insn is delay slot */ 
                        pc=0x10e24;
                        run_10e00(); return;
                    }
                    r8 = r2 + 2;
                    r19 = 3 << 16;
                    r8 = r8 & 255;
                    r19 = r19 + -11088;
                    r8 = r8 + r19;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    r8 = r0 + 78;
                    if(r10 != r8) {
                        /* Next insn is delay slot */ 
                        pc=0x10d44;
                        run_10c00(); return;
                    }
                    r2 = r2 + 3;
                    r10 = 3 << 16;
                    r10 = r10 + -11088;
                    r2 = r2 & 255;
                    r8 = r2 + r10;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    r8 = r0 + 71;
                    if(r10 != r8) {
                        /* Next insn is delay slot */ 
                        pc=0x10e64;
                        run_10e00(); return;
                    }
                    r10 = r0 + 71;
                    r8 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x10bec;
                    run_10a00(); return;
                case 0x11170:
                    r2 = r8 + r0;
                case 0x11174:
                    r8 = r2 + 1;
                    r8 = r8 & 255;
                    r10 = r22 + r8;
                    addr=r10+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    r10 = r4 + r10;
                    addr=r10+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    r10 = r10 & 32;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11170;
                        continue;
                    }
                    r10 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x10b88;
                    run_10a00(); return;
                case 0x111ac:
                    r8 = r18 + r23;
                    r8 = r8 + r16;
                    addr=r8+-32000;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x10bb4;
                    run_10a00(); return;
                case 0x111c0:
                    r2 = r2 + 1;
                    r2 = r2 & 255;
                    r8 = r22 + r2;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r8 = r8 + r12;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r8 = r6 & r8;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e24;
                        run_10e00(); return;
                    }
                    r10 = r0 + r0;
                    r8 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x10bec;
                    run_10a00(); return;
                case 0x111fc:
                    r2 = r2 + 1;
                case 0x11200:
                    pc=0x11200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11200() throws ExecutionException { /* 0x11200 - 0x11400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11200:
                    r2 = r2 & 255;
                    r8 = r22 + r2;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r8 = r8 + r12;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    r10 = r10 & 64;
                    r10 = r10 & 255;
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e64;
                        run_10e00(); return;
                    }
                    r8 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x10bec;
                    run_10a00(); return;
                case 0x11238:
                    r2 = r2 + 1;
                    r2 = r2 & 255;
                    r8 = r22 + r2;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r8 = r8 + r12;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    r10 = r10 & 8;
                    r10 = r10 & 255;
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10d44;
                        run_10c00(); return;
                    }
                    r8 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x10bec;
                    run_10a00(); return;
                case 0x11274:
                    r3 = r3 + -1;
                    r3 = r3 & 255;
                    r2 = r22 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r5 = r0 + 69;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x10b40;
                        run_10a00(); return;
                    }
                    r8 = r0 + -17;
                    r2 = r2 & r8;
                    r5 = r0 + 73;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x10b40;
                        run_10a00(); return;
                    }
                    r8 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x10990;
                    run_10800(); return;
                case 0x112b8:
                    r2 = r2 + 1;
                    r2 = r2 & 255;
                    r8 = r22 + r2;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r8 = r8 + r12;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    r10 = r10 & 4;
                    r10 = r10 & 255;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10be8;
                        run_10a00(); return;
                    }
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x10990;
                    run_10800(); return;
                case 0x112fc:
                    r2 = r2 + 1;
                    r2 = r2 & 255;
                    r8 = r22 + r2;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r8 = r8 + r12;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    r10 = r10 & 32;
                    r10 = r10 & 255;
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10f14;
                        run_10e00(); return;
                    }
                    r8 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x10bec;
                    run_10a00(); return;
                case 0x11338:
                    r2 = r19 + r0;
                    r8 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x10bec;
                    run_10a00(); return;
                case 0x11348:
                    r2 = r2 + 1;
                    r2 = r2 & 255;
                    r8 = r22 + r2;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    if(r10 == r30) {
                        /* Next insn is delay slot */ 
                        pc=0x115f0;
                        run_11400(); return;
                    }
                    r19 = r0 + -17;
                    r8 = r10 & r19;
                    r19 = r0 + 73;
                    if(r8 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x10be8;
                        run_10a00(); return;
                    }
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x10990;
                    run_10800(); return;
                case 0x1138c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11584;
                        run_11400(); return;
                    }
                    r3 = r25 + 1;
                    r25 = r3 & 255;
                    r2 = r0 + 32;
                    r6 = r22 + r6;
                    r3 = (r25&0xffffffffL) < (121&0xffffffffL) ? 1 : 0;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r25&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x116dc;
                        run_11600(); return;
                    }
                    r5 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r5 + r25;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r6;
                    r3 = r6 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x10904;
                    run_10800(); return;
                case 0x113d8:
                    r6 = 65535 << 16;
                    r5 = r0 + 61;
                    r7 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x11400;
                    run_11400(); return;
                case 0x113ec:
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r13 = tmp;
                    r13 = r13 + 1;
                    r13 = r13 & 255;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r13&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x11400:
                    pc=0x11400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11400() throws ExecutionException { /* 0x11400 - 0x11600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11400:
                    r2 = r21 + r13;
                    r2 = r2 + r16;
                    r2 = r6 + r2;
                    addr=r2+27995;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r2 & 127;
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x11430;
                        continue;
                    }
                    r25 = r25 + 1;
                    r25 = r25 & 255;
                    r4 = r7 + r25;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x11430:
                    r2 = r2 << 24;
                    r2 = r2 >> 24;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x113ec;
                        run_11200(); return;
                    }
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r3 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x10c8c;
                    run_10c00(); return;
                case 0x11450:
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r10 = 3 << 16;
                    r6 = r8 + 2;
                    r6 = r6 & 255;
                    r2 = r22 + r6;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = r10 + -19996;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r4 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10940;
                        run_10800(); return;
                    }
                    r2 = r25 + 1;
                    r19 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r25 = r2 & 255;
                    r2 = r19 + r25;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r3 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x10904;
                    run_10800(); return;
                case 0x114b4:
                    r10 = r2 + 2;
                    r19 = 3 << 16;
                    r10 = r10 & 255;
                    r19 = r19 + -11088;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r10;
                    r10 = r10 + r19;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r10;
                    addr=r10+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    r19 = r4 + r10;
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r19 = tmp;
                    r19 = r6 & r19;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11600;
                        run_11600(); return;
                    }
                    r8 = r0 + 82;
                    if(r10 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x1168c;
                        run_11600(); return;
                    }
                    r8 = r0 + 83;
                    if(r10 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x116a0;
                        run_11600(); return;
                    }
                    r8 = r0 + 68;
                    if(r10 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x116c8;
                        run_11600(); return;
                    }
                    r8 = r0 + 76;
                    if(r10 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x11658;
                        run_11600(); return;
                    }
                    r19 = r0 + 70;
                    if(r10 != r19) {
                        /* Next insn is delay slot */ 
                        pc=0x10d44;
                        run_10c00(); return;
                    }
                    r10 = r2 + 3;
                    r19 = 3 << 16;
                    r19 = r19 + -11088;
                    r10 = r10 & 255;
                    r10 = r10 + r19;
                    addr=r10+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r19 = tmp;
                    r10 = r0 + 85;
                    if(r19 != r10) {
                        /* Next insn is delay slot */ 
                        pc=0x10d44;
                        run_10c00(); return;
                    }
                    r2 = r2 + 4;
                    r19 = 3 << 16;
                    r2 = r2 & 255;
                    r19 = r19 + -11088;
                    r10 = r2 + r19;
                    addr=r10+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    if(r10 != r8) {
                        /* Next insn is delay slot */ 
                        pc=0x10d44;
                        run_10c00(); return;
                    }
                    r10 = r0 + 76;
                    r8 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x10bec;
                    run_10a00(); return;
                case 0x11584:
                    r2 = r2 & 128;
                    r2 = r2 & 255;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11620;
                        run_11600(); return;
                    }
                    r2 = r5 + -65;
                    r19 = 3 << 16;
                    r2 = r2 & 255;
                    r3 = r19 + -24576;
                    r3 = r2 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r16 = tmp;
                    r3 = 3 << 16;
                    r3 = r3 + -24548;
                    r2 = r2 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r16 = r16 << 8;
                    r16 = r16 | r2;
                    /* Next insn is delay slot */ 
                    pc=0x1095c;
                    run_10800(); return;
                case 0x115d0:
                    r4 = r16 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r25;
                    /* Next insn is delay slot */ 
                    r31=0x115e0;
                    pc=0x18e00;
                    run_18e00(); return;
                case 0x115e0:
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r13 = tmp;
                    r25 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x10c14;
                    run_10c00(); return;
                case 0x115f0:
                    r10 = r0 + 69;
                    r8 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x10bec;
                    run_10a00(); return;
                case 0x11600:
                    pc=0x11600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11600() throws ExecutionException { /* 0x11600 - 0x11800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11600:
                    r2 = r8 + r0;
                    r10 = r0 + r0;
                    r8 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x10bec;
                    run_10a00(); return;
                case 0x11614:
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r30&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x11620:
                    r2 = r0 + r0;
                case 0x11624:
                    r31 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r30 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r23 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r22 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r21 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r20 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r29 = r29 + 88;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x11658:
                    r2 = r2 + 3;
                    r10 = 3 << 16;
                    r10 = r10 + -11088;
                    r2 = r2 & 255;
                    r8 = r2 + r10;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    r8 = r0 + 89;
                    if(r10 != r8) {
                        /* Next insn is delay slot */ 
                        pc=0x10e64;
                        run_10e00(); return;
                    }
                    r10 = r0 + 89;
                    r8 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x10bec;
                    run_10a00(); return;
                case 0x1168c:
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r10 = r0 + 82;
                    r8 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x10bec;
                    run_10a00(); return;
                case 0x116a0:
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r10 = r0 + 83;
                    r8 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x10bec;
                    run_10a00(); return;
                case 0x116b4:
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x11620;
                    continue;
                case 0x116c8:
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r10 = r0 + 68;
                    r8 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x10bec;
                    run_10a00(); return;
                case 0x116dc:
                    r8 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r10 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r8 + r25;
                    r3 = r0 + -101;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x11624;
                    continue;
                case 0x11800:
                    pc=0x11800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11800() throws ExecutionException { /* 0x11800 - 0x11a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11800:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11818;
                    pc=0x10268;
                    run_10200(); return;
                case 0x11818:
                    r3 = r2 < 255 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11918;
                        continue;
                    }
                    r2 = r0 + 254;
                case 0x11828:
                    r7 = 3 << 16;
                    r3 = 3 << 16;
                    r4 = r16 + 4;
                    r7 = r7 + -10792;
                    r3 = r3 + -10788;
                    r4 = ((r7 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    r3 = ((r16 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    r4 = r4 ^ 1;
                    r3 = r3 ^ 1;
                    r3 = r4 | r3;
                    r4 = r16 & 3;
                    r4 = (r4&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r3 = r4 & r3;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11930;
                        continue;
                    }
                    r3 = (r2&0xffffffffL) < (9&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11930;
                        continue;
                    }
                    r8 = r2 >>> 2;
                    r9 = r8 << 2;
                    r6 = r16 + r0;
                    r5 = r7 + r0;
                    r3 = r0 + r0;
                case 0x11884:
                    r4 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r4;
                    r4 = ((r3 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    r6 = r6 + 4;
                    r5 = r5 + 4;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11884;
                        continue;
                    }
                    if(r2 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x118fc;
                        continue;
                    }
                    r3 = r16 + r9;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r7 + r9;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r9 + 1;
                    r4 = r3 < r2 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x118fc;
                        continue;
                    }
                    r4 = r16 + r3;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r3 + r7;
                    r9 = r9 + 2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r9 < r2 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x118fc;
                        continue;
                    }
                    r16 = r16 + r9;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r9 = r9 + r7;
                    addr=r9+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x118fc:
                    r2 = r7 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x11918:
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x11828;
                        continue;
                    }
                    r7 = 3 << 16;
                    r7 = r7 + -10792;
                    /* Next insn is delay slot */ 
                    pc=0x118fc;
                    continue;
                case 0x11930:
                    r3 = r0 + r0;
                case 0x11934:
                    r5 = r16 + r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r5 = r7 + r3;
                    r3 = r3 + 1;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x11934;
                        continue;
                    }
                    r2 = r7 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x11a00:
                    pc=0x11a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11a00() throws ExecutionException { /* 0x11a00 - 0x11c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11a00:
                    addr=r28+-32756;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x11c00:
                    pc=0x11c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11c00() throws ExecutionException { /* 0x11c00 - 0x11e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11c00:
                    addr=r28+-32760;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x11e00:
                    pc=0x11e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11e00() throws ExecutionException { /* 0x11e00 - 0x12000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11e00:
                    addr=r28+-32764;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12000:
                    pc=0x12000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12000() throws ExecutionException { /* 0x12000 - 0x12200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12000:
                    addr=r28+-32768;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12200:
                    pc=0x12200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12200() throws ExecutionException { /* 0x12200 - 0x12400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12200:
                    r2 = r0 + 1;
                    writePages[(r28+-32604)>>>12][((r28+-32604)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12400:
                    pc=0x12400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12400() throws ExecutionException { /* 0x12400 - 0x12600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12400:
                    r2 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12600:
                    pc=0x12600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12600() throws ExecutionException { /* 0x12600 - 0x12800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12600:
                    r2 = readPages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12800:
                    pc=0x12800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12800() throws ExecutionException { /* 0x12800 - 0x12a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12800:
                    addr=r28+-32608;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r29 = r29 + -72;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r30;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r23;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r23 = 3 << 16;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r30 = 3 << 16;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r22;
                    r23 = r23 + -10220;
                    r30 = r30 + -9964;
                    r22 = 3 << 16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r18;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r17;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r20;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r16 = r0 + r0;
                    r2 = r0 + r0;
                    r17 = r0 + 255;
                    r21 = r23 + r0;
                    r18 = r30 + r0;
                    r22 = r22 + -10536;
                case 0x12868:
                    r3 = r23 + r16;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r0 + 255;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1297c;
                        continue;
                    }
                case 0x1287c:
                    r4 = r30 + r16;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r2 + r4;
                    r2 = r2 & 255;
                    r4 = (r2&0xffffffffL) < (232&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x129bc;
                        continue;
                    }
                    r4 = r0 + 254;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x12a7c;
                        run_12a00(); return;
                    }
                    r6 = 3 << 16;
                    r6 = r6 + -18472;
                    r5 = r3 + r6;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r5 = r5 & 1;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12a6c;
                        run_12a00(); return;
                    }
                    r20 = r16 + 1;
                    r20 = r20 & 255;
                    r2 = r20 < 254 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12a8c;
                        run_12a00(); return;
                    }
                    r19 = r4 - r20;
                    r8 = r20 + 1;
                    r4 = r21 + r8;
                    r5 = r21 + r20;
                    r6 = r19 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x128fc;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x128fc:
                    r8 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = r18 + r20;
                    r4 = r18 + r8;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12914;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x12914:
                    r8 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = r22 + r20;
                    r4 = r22 + r8;
                    r6 = r19 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r22;
                    /* Next insn is delay slot */ 
                    r31=0x12930;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x12930:
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                case 0x12934:
                    r2 = r23 + r20;
                    r3 = r0 + -2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r30 + r20;
                    r16 = r16 + 2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r16 & 255;
                    r3 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r3 = r23 + r16;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r9 = r9 + r20;
                    r4 = r0 + 255;
                    addr=r9+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + r0;
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1287c;
                        continue;
                    }
                case 0x1297c:
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r31 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r30 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r23 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r22 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r21 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r20 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r19 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r16&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r29 = r29 + 72;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x129bc:
                    r2 = r17 + r21;
                    r3 = r0 + 31;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r17 + 1;
                    r2 = r17 + r18;
                    r3 = r0 + 4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r16 & 255;
                    r2 = r22 + r17;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r16 < 254 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12a38;
                        run_12a00(); return;
                    }
                    r3 = r0 + 254;
                    r20 = r3 - r16;
                    r19 = r16 + 1;
                    r4 = r21 + r19;
                case 0x12a00:
                    pc=0x12a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12a00() throws ExecutionException { /* 0x12a00 - 0x12c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12a00:
                    r5 = r21 + r16;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12a10;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x12a10:
                    r4 = r18 + r19;
                    r5 = r18 + r16;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12a24;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x12a24:
                    r4 = r22 + r19;
                    r5 = r22 + r16;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12a38;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x12a38:
                    r2 = r23 + r16;
                    r3 = r0 + -2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r30 + r16;
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r16 = r22 + r16;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r17 + 2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r16 & 255;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x12868;
                    run_12800(); return;
                case 0x12a6c:
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12a78;
                        continue;
                    }
                    r17 = r16 + r0;
                case 0x12a78:
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                case 0x12a7c:
                    r16 = r16 + 1;
                    r16 = r16 & 255;
                    /* Next insn is delay slot */ 
                    pc=0x12868;
                    run_12800(); return;
                case 0x12a8c:
                    r9 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x12934;
                    run_12800(); return;
                case 0x12c00:
                    pc=0x12c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12c00() throws ExecutionException { /* 0x12c00 - 0x12e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12c00:
                    r29 = r29 + -56;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 3 << 16;
                    r17 = r17 + -10536;
                    r4 = r17 + r0;
                    r6 = r0 + 256;
                    r5 = r0 + r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r30;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r23;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x12c48;
                    pc=0x223f0;
                    run_22200(); return;
                case 0x12c48:
                    r24 = 3 << 16;
                    addr=r24+-10792;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r12 = tmp;
                    r9 = 3 << 16;
                    r11 = 3 << 16;
                    r16 = 3 << 16;
                    r25 = r0 + 155;
                    r2 = r0 + r0;
                    r7 = r0 + r0;
                    r3 = r0 + r0;
                    r13 = r0 + r0;
                    r14 = r0 + r0;
                    r24 = r24 + -10792;
                    r9 = r9 + -18224;
                    r11 = r11 + -18308;
                    r10 = r0 + 42;
                    r8 = r0 + 81;
                    r18 = r0 + 56;
                    r4 = r0 + 55;
                    r19 = r0 + 54;
                    r21 = r0 + 53;
                    r20 = r0 + 52;
                    r23 = r0 + 51;
                    r22 = r0 + 50;
                    r30 = r0 + 49;
                    r16 = r16 + -10220;
                    r6 = r12 + r0;
                    if(r12 == r25) {
                        /* Next insn is delay slot */ 
                        pc=0x12d50;
                        continue;
                    }
                case 0x12cb8:
                    r15 = r13 + 1;
                    r15 = r15 & 255;
                    r2 = r24 + r15;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r12 = tmp;
                    r7 = r0 + r0;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x12cec;
                    continue;
                case 0x12cd8:
                    r5 = r5 + 1;
                    r2 = r2 + 1;
                    r7 = r5 & 255;
                    if(r2 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x12d94;
                        continue;
                    }
                case 0x12cec:
                    r3 = r9 + r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r5 = r2 & 255;
                    if(r6 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x12cd8;
                        continue;
                    }
                    r3 = r11 + r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 == r10) {
                        /* Next insn is delay slot */ 
                        pc=0x12d7c;
                        continue;
                    }
                    if(r12 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x12cd8;
                        continue;
                    }
                    r13 = r13 + 2;
                    r2 = r14 + r16;
                    r13 = r13 & 255;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r14 = r14 + 1;
                    r2 = r24 + r13;
                    r3 = r12 + r0;
                    r14 = r14 & 255;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r12 = tmp;
                    r2 = r13 + r0;
                case 0x12d44:
                    r6 = r12 + r0;
                    if(r12 != r25) {
                        /* Next insn is delay slot */ 
                        pc=0x12cb8;
                        continue;
                    }
                case 0x12d50:
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = 3 << 16;
                    r2 = r2 + -10220;
                    r14 = r14 + r2;
                    r2 = r0 + -1;
                    addr=r14+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x12e50;
                    run_12e00(); return;
                case 0x12d7c:
                    r5 = r5 + 1;
                    r2 = r2 + 1;
                    r3 = r0 + 42;
                    r7 = r5 & 255;
                    if(r2 != r8) {
                        /* Next insn is delay slot */ 
                        pc=0x12cec;
                        continue;
                    }
                case 0x12d94:
                    r2 = r0 + r0;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x12db8;
                    continue;
                case 0x12da4:
                    r13 = r13 + 1;
                    r2 = r2 + 1;
                    r7 = r13 & 255;
                    if(r2 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x12e00;
                        run_12e00(); return;
                    }
                case 0x12db8:
                    r5 = r11 + r2;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r13 = r2 & 255;
                    if(r5 != r10) {
                        /* Next insn is delay slot */ 
                        pc=0x12da4;
                        continue;
                    }
                    r5 = r9 + r2;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    if(r5 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x12da4;
                        continue;
                    }
                    r2 = r14 + r16;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r13&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r14 = r14 + 1;
                    r13 = r15 + r0;
                    r14 = r14 & 255;
                    r2 = r13 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x12d44;
                    continue;
                case 0x12e00:
                    pc=0x12e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12e00() throws ExecutionException { /* 0x12e00 - 0x13000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12e00:
                    if(r6 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x12e84;
                        continue;
                    }
                    if(r6 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x12ea0;
                        continue;
                    }
                    if(r6 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x12eac;
                        continue;
                    }
                    if(r6 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x12eb8;
                        continue;
                    }
                    if(r6 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x12edc;
                        continue;
                    }
                    if(r6 == r23) {
                        /* Next insn is delay slot */ 
                        pc=0x12ed0;
                        continue;
                    }
                    if(r6 == r22) {
                        /* Next insn is delay slot */ 
                        pc=0x12ee8;
                        continue;
                    }
                    if(r6 == r30) {
                        /* Next insn is delay slot */ 
                        pc=0x12ec4;
                        continue;
                    }
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r15&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + r0;
                case 0x12e50:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12e84:
                    r7 = r0 + 8;
                case 0x12e88:
                    r2 = r17 + r14;
                    r13 = r15 + r0;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r13 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x12d44;
                    run_12c00(); return;
                case 0x12ea0:
                    r7 = r0 + 7;
                    /* Next insn is delay slot */ 
                    pc=0x12e88;
                    continue;
                case 0x12eac:
                    r7 = r0 + 6;
                    /* Next insn is delay slot */ 
                    pc=0x12e88;
                    continue;
                case 0x12eb8:
                    r7 = r0 + 5;
                    /* Next insn is delay slot */ 
                    pc=0x12e88;
                    continue;
                case 0x12ec4:
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x12e88;
                    continue;
                case 0x12ed0:
                    r7 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x12e88;
                    continue;
                case 0x12edc:
                    r7 = r0 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x12e88;
                    continue;
                case 0x12ee8:
                    r7 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x12e88;
                    continue;
                case 0x13000:
                    pc=0x13000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13000() throws ExecutionException { /* 0x13000 - 0x13200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13000:
                    r29 = r29 + -88;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r7 = 3 << 16;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r22;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r20;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    r18 = 3 << 16;
                    r20 = 3 << 16;
                    r22 = r7 + -10536;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r16 = tmp;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r23;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r19;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r31;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r30;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r21;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r23 = r0 + r0;
                    r18 = r18 + -10220;
                    r20 = r20 + -18392;
                    r19 = r22 + r0;
                case 0x13058:
                    r2 = r18 + r23;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r30 = tmp;
                    r2 = r0 + 255;
                    if(r30 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x130a4;
                        continue;
                    }
                case 0x1306c:
                    r2 = r20 + r30;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r2 & 2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x130e4;
                        continue;
                    }
                    r2 = r23 + 1;
                    r16 = r23 + r0;
                    r23 = r2 & 255;
                    r2 = r18 + r23;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r30 = tmp;
                    r2 = r0 + 255;
                    if(r30 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1306c;
                        continue;
                    }
                case 0x130a4:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r31 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r30 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r23 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r22 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r21 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r20 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r16&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r29 = r29 + 88;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x130e4:
                    r2 = r2 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13270;
                        run_13200(); return;
                    }
                    r3 = 3 << 16;
                    r3 = r3 + -18632;
                    r2 = r3 + r30;
                    r16 = r23 + 1;
                    r16 = r16 & 255;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r11 = tmp;
                    r2 = r22 + r23;
                    r10 = r30 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r12 = tmp;
                    r2 = r16 < 254 ? 1 : 0;
                    r10 = r10 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13494;
                        run_13400(); return;
                    }
                    r8 = r0 + 254;
                    r17 = r8 - r16;
                    r9 = r16 + 1;
                    r4 = r18 + r9;
                    r5 = r18 + r16;
                    r6 = r17 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r10;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r11;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r12;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x13154;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x13154:
                    r9 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = 3 << 16;
                    r21 = r2 + -9964;
                    r4 = r21 + r9;
                    r5 = r21 + r16;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13174;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x13174:
                    r9 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r5 = r19 + r16;
                    r4 = r19 + r9;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1318c;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x1318c:
                    r10 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r11 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r12 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                case 0x13198:
                    r2 = r18 + r16;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r21 + r16;
                    r16 = r22 + r16;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r12&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = 3 << 16;
                    r16 = r23 + 2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r11&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r16 & 255;
                    r2 = r22 + r23;
                    r3 = r3 + -18632;
                    r9 = r30 + 2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r11 = tmp;
                    r30 = r3 + r30;
                    r2 = r16 < 254 ? 1 : 0;
                    r9 = r9 & 255;
                    addr=r30+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13244;
                        run_13200(); return;
                    }
                    r30 = r0 + 254;
                    r30 = r30 - r16;
                    r17 = r16 + 1;
                    r4 = r18 + r17;
                    r5 = r18 + r16;
                    r6 = r30 + r0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r9;
                case 0x13200:
                    pc=0x13200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13200() throws ExecutionException { /* 0x13200 - 0x13400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13200:
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r10;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r11;
                    /* Next insn is delay slot */ 
                    r31=0x13210;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x13210:
                    r4 = r21 + r17;
                    r5 = r21 + r16;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13224;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x13224:
                    r4 = r19 + r17;
                    r5 = r19 + r16;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13238;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x13238:
                    r9 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r10 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r11 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                case 0x13244:
                    r2 = r18 + r16;
                    r3 = r21 + r16;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r9&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r22 + r16;
                    r2 = r23 + 3;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r11&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r23 + r0;
                    r23 = r2 & 255;
                    /* Next insn is delay slot */ 
                    pc=0x13058;
                    run_13000(); return;
                case 0x13270:
                    r8 = r23 + 1;
                    r8 = r8 & 255;
                    r16 = r8 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x13288;
                    continue;
                case 0x13284:
                    r16 = r2 + r0;
                case 0x13288:
                    r2 = r18 + r16;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r17 = tmp;
                    r2 = r16 + 1;
                    r2 = r2 & 255;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13284;
                        continue;
                    }
                    r2 = r0 + 255;
                    if(r17 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x132d4;
                        continue;
                    }
                    r2 = r20 + r17;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13484;
                        run_13400(); return;
                    }
                    r2 = r17 + -36;
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13484;
                        run_13400(); return;
                    }
                case 0x132d4:
                    r3 = 3 << 16;
                    r3 = r3 + -18632;
                    r2 = r3 + r30;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r12 = tmp;
                    r2 = r22 + r23;
                    r11 = r30 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r13 = tmp;
                    r2 = r8 < 254 ? 1 : 0;
                    r11 = r11 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x134a4;
                        run_13400(); return;
                    }
                    r9 = r0 + 254;
                    r9 = r9 - r8;
                    r10 = r8 + 1;
                    r4 = r18 + r10;
                    r5 = r18 + r8;
                    r6 = r9 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r11;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r12;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r13;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r8;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r9;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x13338;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x13338:
                    r10 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r8 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r9 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = 3 << 16;
                    r21 = r2 + -9964;
                    r4 = r21 + r10;
                    r5 = r21 + r8;
                    r6 = r9 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13360;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x13360:
                    r8 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r10 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r9 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r5 = r19 + r8;
                    r4 = r19 + r10;
                    r6 = r9 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13380;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x13380:
                    r8 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r11 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r12 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r13 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                case 0x13390:
                    r2 = r18 + r8;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r11&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r21 + r8;
                    r8 = r22 + r8;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r13&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = 3 << 16;
                    r8 = r23 + 2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r12&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r8 = r8 & 255;
                    r2 = r22 + r23;
                    r3 = r3 + -18632;
                    r10 = r30 + 2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r12 = tmp;
                    r30 = r3 + r30;
                    r2 = r8 < 254 ? 1 : 0;
                    r10 = r10 & 255;
                    addr=r30+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r11 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13458;
                        run_13400(); return;
                    }
                    r30 = r0 + 254;
                    r30 = r30 - r8;
                    r9 = r8 + 1;
                    r4 = r18 + r9;
                    r5 = r18 + r8;
                    r6 = r30 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r10;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r11;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r12;
                case 0x13400:
                    pc=0x13400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13400() throws ExecutionException { /* 0x13400 - 0x13600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13400:
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r8;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x13410;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x13410:
                    r9 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r8 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r21 + r9;
                    r5 = r21 + r8;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1342c;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x1342c:
                    r8 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r9 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r5 = r19 + r8;
                    r4 = r19 + r9;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13448;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x13448:
                    r8 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r10 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r11 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r12 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                case 0x13458:
                    r2 = r18 + r8;
                    r3 = r21 + r8;
                    r23 = r23 + 3;
                    r8 = r22 + r8;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r11&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r12&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r23 = r23 & 255;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    pc=0x13058;
                    run_13000(); return;
                case 0x13484:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r23 = r8 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x13058;
                    run_13000(); return;
                case 0x13494:
                    r2 = 3 << 16;
                    r21 = r2 + -9964;
                    /* Next insn is delay slot */ 
                    pc=0x13198;
                    run_13000(); return;
                case 0x134a4:
                    r2 = 3 << 16;
                    r21 = r2 + -9964;
                    /* Next insn is delay slot */ 
                    pc=0x13390;
                    run_13200(); return;
                case 0x13600:
                    pc=0x13600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13600() throws ExecutionException { /* 0x13600 - 0x13800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13600:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    r29 = r29 + -88;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r31;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r30;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r23;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r22;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r21;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r20;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r19;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13fa0;
                        run_13e00(); return;
                    }
                    r22 = r0 + r0;
                case 0x1363c:
                    r3 = 3 << 16;
                    r17 = 3 << 16;
                    r16 = r0 + r0;
                    r23 = r3 + -10220;
                    r17 = r17 + -10536;
                case 0x13650:
                    r2 = r23 + r16;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r16&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r18 = r16 + r0;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x136e8;
                        continue;
                    }
                    r4 = r0 + 255;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x136ac;
                        continue;
                    }
                case 0x13678:
                    r31 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r30 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r23 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r22 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r21 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r20 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r29 = r29 + 88;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x136ac:
                    r3 = 3 << 16;
                    r4 = 3 << 16;
                    r3 = r3 + -18224;
                    r4 = r4 + -18308;
                    r6 = r2 + r3;
                    r2 = r2 + r4;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r4 = 3 << 16;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r4 = r4 + -19880;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x136e0;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x136e0:
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                case 0x136e8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13934;
                        run_13800(); return;
                    }
                    r4 = r0 + 255;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x13678;
                        continue;
                    }
                    r3 = 3 << 16;
                    r3 = r3 + -18392;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r5 = r2 & 16;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13948;
                        run_13800(); return;
                    }
                    r4 = r17 + r16;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r2 & 32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14300;
                        run_14200(); return;
                    }
                    r2 = r0 + 20;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x142ec;
                        run_14200(); return;
                    }
                    r4 = 3 << 16;
                    r4 = r4 + -19868;
                    /* Next insn is delay slot */ 
                    r31=0x13760;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x13760:
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r7 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1433c;
                        run_14200(); return;
                    }
                    r2 = r0 + 21;
                    r22 = r7 + r0;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x13f5c;
                        run_13e00(); return;
                    }
                case 0x13784:
                    r8 = r16 + 1;
                    r21 = r8 & 255;
                    r2 = r21 < 254 ? 1 : 0;
                    addr=r28+-32608;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r12 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1425c;
                        run_14200(); return;
                    }
                    r10 = r0 + 254;
                    r30 = r10 - r21;
                    r19 = r21 + 1;
                    r4 = r23 + r19;
                    r5 = r23 + r21;
                    r6 = r30 + r0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r12;
                    /* Next insn is delay slot */ 
                    r31=0x137c0;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x137c0:
                    r9 = 3 << 16;
                    r20 = r9 + -9964;
                    r4 = r20 + r19;
                    r5 = r20 + r21;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x137dc;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x137dc:
                    r4 = r17 + r19;
                    r5 = r17 + r21;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x137f0;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x137f0:
                    r12 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                case 0x137f4:
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r23 + r21;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x13800:
                    pc=0x13800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13800() throws ExecutionException { /* 0x13800 - 0x13a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13800:
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r9 = r20 + r21;
                    r2 = r17 + r21;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r16&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r16 + r0;
                    addr=r9+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r12&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r21 + r0;
                case 0x13820:
                    r5 = r23 + r4;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r6 = r0 + 53;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x13e7c;
                        run_13e00(); return;
                    }
                case 0x13838:
                    r4 = r0 + 42;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x13ec8;
                        run_13e00(); return;
                    }
                case 0x13844:
                    r4 = r0 + 44;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x13a64;
                        run_13a00(); return;
                    }
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13fe0;
                        run_13e00(); return;
                    }
                case 0x13858:
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r2 + 1;
                    r18 = r4 + 1;
                    r18 = r18 & 255;
                    r8 = r2 & 255;
                    r4 = r17 + r4;
                    r2 = r18 < 254 ? 1 : 0;
                    addr=r28+-32608;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r11 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1432c;
                        run_14200(); return;
                    }
                    r21 = r0 + 254;
                    r30 = r18 + 1;
                    r21 = r21 - r18;
                    r4 = r23 + r30;
                    r5 = r23 + r18;
                    r6 = r21 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r8;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r10;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r11;
                    /* Next insn is delay slot */ 
                    r31=0x138b0;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x138b0:
                    r9 = 3 << 16;
                    r20 = r9 + -9964;
                    r4 = r20 + r30;
                    r5 = r20 + r18;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x138cc;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x138cc:
                    r3 = 3 << 16;
                    r3 = r3 + -10536;
                    r4 = r3 + r30;
                    r5 = r3 + r18;
                case 0x138dc:
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x138e8;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x138e8:
                    r8 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r10 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r11 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                case 0x138f4:
                    r2 = r23 + r18;
                    r9 = r20 + r18;
                    r18 = r17 + r18;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r8&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r9+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r11&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x13650;
                    run_13600(); return;
                case 0x13914:
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = 3 << 16;
                    r3 = r3 + -18392;
                    r2 = r3 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x14148;
                        run_14000(); return;
                    }
                case 0x13934:
                    r16 = r16 + 1;
                    r16 = r16 & 255;
                    r22 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x13650;
                    run_13600(); return;
                case 0x13948:
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r6 = r0 + 78;
                    r5 = r23 + r2;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    if(r5 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x13b3c;
                        run_13a00(); return;
                    }
                    r6 = r0 + 79;
                    if(r5 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x13c24;
                        run_13c00(); return;
                    }
                    r6 = r0 + 80;
                    if(r5 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x13c50;
                        run_13c00(); return;
                    }
                    r3 = 3 << 16;
                    r3 = r3 + -18392;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r5 + r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r5 = r5 & 128;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x139d0;
                        continue;
                    }
                    r5 = r17 + r2;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x139d0;
                        continue;
                    }
                    r5 = r2 + 1;
                    r5 = r5 & 255;
                    r5 = r5 + r23;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13cf8;
                        run_13c00(); return;
                    }
                case 0x139d0:
                    r4 = r23 + r16;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r5 = r0 + 23;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r16&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x13c7c;
                        run_13c00(); return;
                    }
                    r5 = r0 + 24;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x13914;
                        continue;
                    }
                    r5 = r0 + 32;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x14000;
                        run_14000(); return;
                    }
                case 0x13a00:
                    pc=0x13a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13a00() throws ExecutionException { /* 0x13a00 - 0x13c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13a00:
                    r5 = r0 + 72;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x13dfc;
                        run_13c00(); return;
                    }
                    r5 = r0 + 60;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x140e8;
                        run_14000(); return;
                    }
                    r22 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    r4 = r2 + r0;
                case 0x13a24:
                    r3 = 3 << 16;
                    r3 = r3 + -18392;
                    r5 = r3 + r4;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r5 & 1;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13fcc;
                        run_13e00(); return;
                    }
                    r5 = r23 + r16;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r6 = r0 + 32;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r5 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x141fc;
                        run_14000(); return;
                    }
                    r16 = r16 + 1;
                    r16 = r16 & 255;
                case 0x13a64:
                    r4 = r0 + 69;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x13a7c;
                        continue;
                    }
                    r4 = r0 + 57;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x13650;
                        run_13600(); return;
                    }
                case 0x13a7c:
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = 3 << 16;
                    r4 = r23 + r2;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r3 + -18392;
                    r4 = r3 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x13650;
                        run_13600(); return;
                    }
                    r2 = r2 + 1;
                    r2 = r2 & 255;
                    r5 = r2 + r23;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14070;
                        run_14000(); return;
                    }
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = r0 + 255;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x14348;
                        run_14200(); return;
                    }
                    r3 = 3 << 16;
                    r3 = r3 + -18392;
                    r2 = r2 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 128;
                    r2 = r2 & 255;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13b1c;
                        continue;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13650;
                        run_13600(); return;
                    }
                    r4 = 3 << 16;
                    r4 = r4 + -19224;
                    /* Next insn is delay slot */ 
                    r31=0x13b14;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x13b14:
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                case 0x13b1c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13b30;
                        continue;
                    }
                    r18 = r23 + r18;
                    r2 = r0 + 30;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x13b30:
                    r22 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x13650;
                    run_13600(); return;
                case 0x13b3c:
                    r4 = r0 + 24;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13e54;
                        run_13e00(); return;
                    }
                    r4 = r2 + r0;
                    r22 = r0 + r0;
                    r8 = r0 + 24;
                case 0x13b60:
                    r5 = r17 + r2;
                    r4 = r4 + 1;
                    r2 = r23 + r2;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    r18 = r4 & 255;
                    r5 = r0 + 13;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r18 < 254 ? 1 : 0;
                    addr=r28+-32608;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r11 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1424c;
                        run_14200(); return;
                    }
                    r21 = r0 + 254;
                    r21 = r21 - r18;
                    r30 = r18 + 1;
                    r4 = r23 + r30;
                    r5 = r23 + r18;
                    r6 = r21 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r8;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r10;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r11;
                    /* Next insn is delay slot */ 
                    r31=0x13bb8;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x13bb8:
                    r9 = 3 << 16;
                    r20 = r9 + -9964;
                    r4 = r20 + r30;
                    r5 = r20 + r18;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13bd4;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x13bd4:
                    r2 = 3 << 16;
                    r2 = r2 + -10536;
                    r4 = r2 + r30;
                    r5 = r2 + r18;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13bf0;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x13bf0:
                    r8 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r10 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r11 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                case 0x13bfc:
                    r2 = r23 + r18;
                case 0x13c00:
                    pc=0x13c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13c00() throws ExecutionException { /* 0x13c00 - 0x13e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13c00:
                    r9 = r20 + r18;
                    r16 = r16 + 1;
                    r18 = r17 + r18;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r8&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r9+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r11&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r16 & 255;
                    /* Next insn is delay slot */ 
                    pc=0x13650;
                    run_13600(); return;
                case 0x13c24:
                    r4 = r0 + 27;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13fbc;
                        run_13e00(); return;
                    }
                    r4 = r2 + r0;
                    r22 = r0 + r0;
                    r8 = r0 + 27;
                    /* Next insn is delay slot */ 
                    pc=0x13b60;
                    run_13a00(); return;
                case 0x13c50:
                    r4 = r0 + 28;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14040;
                        run_14000(); return;
                    }
                    r4 = r2 + r0;
                    r22 = r0 + r0;
                    r8 = r0 + 28;
                    /* Next insn is delay slot */ 
                    pc=0x13b60;
                    run_13a00(); return;
                case 0x13c7c:
                    r21 = r16 + -1;
                    r4 = r23 + r21;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r5 = r0 + 69;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r21&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x140b4;
                        run_14000(); return;
                    }
                    r5 = r0 + 57;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x14220;
                        run_14200(); return;
                    }
                    r3 = 3 << 16;
                    r3 = r3 + -18392;
                    r2 = r3 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r7 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    r2 = r2 & 128;
                    r2 = r2 & 255;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14178;
                        run_14000(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13ce4;
                        continue;
                    }
                case 0x13cd8:
                    r2 = r23 + r16;
                    r4 = r0 + 18;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x13ce4:
                    r16 = r16 + 1;
                    r16 = r16 & 255;
                    r22 = r7 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x13650;
                    run_13600(); return;
                case 0x13cf8:
                    r2 = r2 + 2;
                    r2 = r2 & 255;
                    r5 = r23 + r2;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r21 = r2 + r0;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r5 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x139d0;
                        run_13800(); return;
                    }
                    r3 = 3 << 16;
                    r3 = r3 + -18392;
                    r5 = r3 + r5;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r4 & 128;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x139d0;
                        run_13800(); return;
                    }
                    r2 = r17 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x139d0;
                        run_13800(); return;
                    }
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x143e0;
                        run_14200(); return;
                    }
                    r22 = r0 + r0;
                case 0x13d68:
                    r2 = r21 < 254 ? 1 : 0;
                    addr=r28+-32608;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x143d0;
                        run_14200(); return;
                    }
                    r18 = r0 + 254;
                    r18 = r18 - r21;
                    r30 = r21 + 1;
                    r4 = r23 + r30;
                    r5 = r23 + r21;
                    r6 = r18 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x13d9c;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x13d9c:
                    r9 = 3 << 16;
                    r20 = r9 + -9964;
                    r4 = r20 + r30;
                    r5 = r20 + r21;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13db8;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x13db8:
                    r4 = r17 + r30;
                    r5 = r17 + r21;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13dcc;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x13dcc:
                    r8 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                case 0x13dd0:
                    r2 = r23 + r21;
                    r9 = r20 + r21;
                    r4 = r0 + 31;
                    r21 = r17 + r21;
                    r16 = r16 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r9+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r8&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r16 & 255;
                    /* Next insn is delay slot */ 
                    pc=0x13650;
                    run_13600(); return;
                case 0x13dfc:
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                case 0x13e00:
                    pc=0x13e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13e00() throws ExecutionException { /* 0x13e00 - 0x14000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13e00:
                    r5 = r0 + 255;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x141a0;
                        run_14000(); return;
                    }
                    r3 = 3 << 16;
                    r3 = r3 + -18392;
                    r2 = r3 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r7 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    r2 = r2 & 32;
                    r2 = r2 & 255;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x141d4;
                        run_14000(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x141bc;
                        run_14000(); return;
                    }
                    r22 = r7 + r0;
                    r4 = r0 + 72;
                    r2 = r0 + 72;
                    /* Next insn is delay slot */ 
                    pc=0x13a24;
                    run_13a00(); return;
                case 0x13e54:
                    r4 = 3 << 16;
                    r4 = r4 + -19752;
                case 0x13e5c:
                    /* Next insn is delay slot */ 
                    r31=0x13e64;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x13e64:
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r2 = r4 + r0;
                    r22 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x13b60;
                    run_13a00(); return;
                case 0x13e7c:
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r5 = 3 << 16;
                    r5 = r5 + -18472;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + r5;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 4;
                    r2 = r2 & 255;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13650;
                        run_13600(); return;
                    }
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14050;
                        run_14000(); return;
                    }
                case 0x13eb4:
                    r4 = r23 + r4;
                    r2 = r0 + 16;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x13650;
                    run_13600(); return;
                case 0x13ec8:
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13f80;
                        continue;
                    }
                case 0x13ed0:
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r2 + 1;
                    r18 = r4 + 1;
                    r18 = r18 & 255;
                    r8 = r2 & 255;
                    r4 = r17 + r4;
                    r2 = r18 < 254 ? 1 : 0;
                    addr=r28+-32608;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r11 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1432c;
                        run_14200(); return;
                    }
                    r21 = r0 + 254;
                    r30 = r18 + 1;
                    r21 = r21 - r18;
                    r4 = r23 + r30;
                    r5 = r23 + r18;
                    r6 = r21 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r8;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r10;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r11;
                    /* Next insn is delay slot */ 
                    r31=0x13f28;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x13f28:
                    r9 = 3 << 16;
                    r20 = r9 + -9964;
                    r4 = r20 + r30;
                    r5 = r20 + r18;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13f44;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x13f44:
                    r2 = 3 << 16;
                    r2 = r2 + -10536;
                    r4 = r2 + r30;
                    r5 = r2 + r18;
                    /* Next insn is delay slot */ 
                    pc=0x138dc;
                    run_13800(); return;
                case 0x13f5c:
                    r4 = 3 << 16;
                    r4 = r4 + -19808;
                    /* Next insn is delay slot */ 
                    r31=0x13f6c;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x13f6c:
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r22 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x13784;
                    run_13600(); return;
                case 0x13f80:
                    r4 = 3 << 16;
                    r4 = r4 + -19252;
                    /* Next insn is delay slot */ 
                    r31=0x13f90;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x13f90:
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r22 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x13ed0;
                    continue;
                case 0x13fa0:
                    r4 = 3 << 16;
                    r4 = r4 + -19888;
                    /* Next insn is delay slot */ 
                    r31=0x13fb0;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x13fb0:
                    r22 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1363c;
                    run_13600(); return;
                case 0x13fbc:
                    r4 = 3 << 16;
                    r4 = r4 + -19732;
                    /* Next insn is delay slot */ 
                    pc=0x13e5c;
                    continue;
                case 0x13fcc:
                    r16 = r16 + 1;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r16 = r16 & 255;
                    /* Next insn is delay slot */ 
                    pc=0x13820;
                    run_13800(); return;
                case 0x13fe0:
                    r4 = 3 << 16;
                    r4 = r4 + -19236;
                    /* Next insn is delay slot */ 
                    r31=0x13ff0;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x13ff0:
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r22 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x13858;
                    run_13800(); return;
                case 0x14000:
                    pc=0x14000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14000() throws ExecutionException { /* 0x14000 - 0x14200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14000:
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r0 + 60;
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x13934;
                        run_13800(); return;
                    }
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x143b4;
                        run_14200(); return;
                    }
                    r22 = r0 + r0;
                case 0x14024:
                    r2 = r23 + r16;
                    r4 = r0 + 38;
                    r16 = r16 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r16 & 255;
                    /* Next insn is delay slot */ 
                    pc=0x13650;
                    run_13600(); return;
                case 0x14040:
                    r4 = 3 << 16;
                    r4 = r4 + -19712;
                    /* Next insn is delay slot */ 
                    pc=0x13e5c;
                    run_13e00(); return;
                case 0x14050:
                    r4 = 3 << 16;
                    r4 = r4 + -19292;
                    /* Next insn is delay slot */ 
                    r31=0x14060;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x14060:
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r22 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x13eb4;
                    run_13e00(); return;
                case 0x14070:
                    r4 = r4 + r3;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x13650;
                        run_13600(); return;
                    }
                    r2 = r2 + r17;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13650;
                        run_13600(); return;
                    }
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1441c;
                        run_14400(); return;
                    }
                case 0x140a0:
                    r18 = r23 + r18;
                    r2 = r0 + 30;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x13650;
                    run_13600(); return;
                case 0x140b4:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1428c;
                        run_14200(); return;
                    }
                    r22 = r0 + r0;
                    r2 = r0 + 69;
                case 0x140cc:
                    r21 = r23 + r21;
                    r4 = r0 + 42;
                    r16 = r16 + 1;
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r16 & 255;
                    /* Next insn is delay slot */ 
                    pc=0x13838;
                    run_13800(); return;
                case 0x140e8:
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = r0 + 255;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x13934;
                        run_13800(); return;
                    }
                    r3 = 3 << 16;
                    r3 = r3 + -18392;
                    r2 = r3 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 32;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13934;
                        run_13800(); return;
                    }
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14400;
                        run_14400(); return;
                    }
                    r22 = r0 + r0;
                case 0x1412c:
                    r2 = r23 + r16;
                    r4 = r0 + 63;
                    r16 = r16 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r16 & 255;
                    /* Next insn is delay slot */ 
                    pc=0x13650;
                    run_13600(); return;
                case 0x14148:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1426c;
                        run_14200(); return;
                    }
                    r22 = r0 + r0;
                case 0x1415c:
                    r18 = r23 + r18;
                    r2 = r0 + 19;
                    r16 = r16 + 1;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r16 & 255;
                    /* Next insn is delay slot */ 
                    pc=0x13650;
                    run_13600(); return;
                case 0x14178:
                    r4 = 3 << 16;
                    r4 = r4 + -19572;
                    /* Next insn is delay slot */ 
                    r31=0x14188;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x14188:
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r7 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13ce4;
                        run_13c00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x13cd8;
                    run_13c00(); return;
                case 0x141a0:
                    r2 = r0 + 75;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r22 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    r4 = r0 + 75;
                    r2 = r0 + 75;
                    /* Next insn is delay slot */ 
                    pc=0x13a24;
                    run_13a00(); return;
                case 0x141bc:
                    r4 = 3 << 16;
                    r4 = r4 + -19504;
                    /* Next insn is delay slot */ 
                    r31=0x141cc;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x141cc:
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r7 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                case 0x141d4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x142ac;
                        run_14200(); return;
                    }
                    r2 = r23 + r16;
                    r4 = r0 + 75;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r22 = r7 + r0;
                    r4 = r0 + 75;
                    r2 = r0 + 75;
                    /* Next insn is delay slot */ 
                    pc=0x13a24;
                    run_13a00(); return;
                case 0x141fc:
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1435c;
                        run_14200(); return;
                    }
                case 0x14200:
                    pc=0x14200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14200() throws ExecutionException { /* 0x14200 - 0x14400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14200:
                case 0x14204:
                    r4 = r23 + r16;
                    r2 = r2 + -12;
                    r16 = r16 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r16 & 255;
                    /* Next insn is delay slot */ 
                    pc=0x13650;
                    run_13600(); return;
                case 0x14220:
                    r2 = r0 + 44;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x142c4;
                        continue;
                    }
                    r16 = r16 + 1;
                    r16 = r16 & 255;
                    r22 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x13a7c;
                    run_13a00(); return;
                case 0x1424c:
                    r9 = 3 << 16;
                    r20 = r9 + -9964;
                    /* Next insn is delay slot */ 
                    pc=0x13bfc;
                    run_13a00(); return;
                case 0x1425c:
                    r9 = 3 << 16;
                    r20 = r9 + -9964;
                    /* Next insn is delay slot */ 
                    pc=0x137f4;
                    run_13600(); return;
                case 0x1426c:
                    r4 = 3 << 16;
                    r4 = r4 + -19556;
                    /* Next insn is delay slot */ 
                    r31=0x1427c;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x1427c:
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r18 = tmp;
                    r22 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1415c;
                    run_14000(); return;
                case 0x1428c:
                    r4 = 3 << 16;
                    r4 = r4 + -19612;
                    /* Next insn is delay slot */ 
                    r31=0x1429c;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x1429c:
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r22 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x140cc;
                    run_14000(); return;
                case 0x142ac:
                    r2 = r23 + r16;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r22 = r7 + r0;
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x13a24;
                    run_13a00(); return;
                case 0x142c4:
                    r4 = 3 << 16;
                    r4 = r4 + -19592;
                    r16 = r16 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x142d8;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x142d8:
                    r16 = r16 & 255;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r22 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x13844;
                    run_13800(); return;
                case 0x142ec:
                    r3 = r0 + 20;
                    r22 = r0 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x13784;
                    run_13600(); return;
                case 0x14300:
                    r2 = r0 + 21;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13f5c;
                        run_13e00(); return;
                    }
                    r3 = r0 + 21;
                    r22 = r0 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x13784;
                    run_13600(); return;
                case 0x1432c:
                    r9 = 3 << 16;
                    r20 = r9 + -9964;
                    /* Next insn is delay slot */ 
                    pc=0x138f4;
                    run_13800(); return;
                case 0x1433c:
                    r22 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x13784;
                    run_13600(); return;
                case 0x14348:
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13650;
                        run_13600(); return;
                    }
                    r22 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x13650;
                    run_13600(); return;
                case 0x1435c:
                    r3 = 3 << 16;
                    r3 = r3 + -18224;
                    r2 = r4 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r2 = 3 << 16;
                    r8 = r4 + -12;
                    r2 = r2 + -18308;
                    r4 = r4 + r2;
                    r2 = r8 + r2;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = r8 + r3;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r4 = 3 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r4 + -19320;
                    /* Next insn is delay slot */ 
                    r31=0x143a4;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x143a4:
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r22 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x14204;
                    continue;
                case 0x143b4:
                    r4 = 3 << 16;
                    r4 = r4 + -19524;
                    /* Next insn is delay slot */ 
                    r31=0x143c4;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x143c4:
                    r22 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x14024;
                    run_14000(); return;
                case 0x143d0:
                    r9 = 3 << 16;
                    r20 = r9 + -9964;
                    /* Next insn is delay slot */ 
                    pc=0x13dd0;
                    run_13c00(); return;
                case 0x143e0:
                    r4 = 3 << 16;
                    r4 = r4 + -19692;
                    /* Next insn is delay slot */ 
                    r31=0x143f0;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x143f0:
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r21 = tmp;
                    r22 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x13d68;
                    run_13c00(); return;
                case 0x14400:
                    pc=0x14400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14400() throws ExecutionException { /* 0x14400 - 0x14600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14400:
                    r4 = 3 << 16;
                    r4 = r4 + -19412;
                    /* Next insn is delay slot */ 
                    r31=0x14410;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x14410:
                    r22 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1412c;
                    run_14000(); return;
                case 0x1441c:
                    r4 = 3 << 16;
                    r4 = r4 + -19224;
                    /* Next insn is delay slot */ 
                    r31=0x1442c;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x1442c:
                    r22 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x140a0;
                    run_14000(); return;
                case 0x14600:
                    pc=0x14600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14600() throws ExecutionException { /* 0x14600 - 0x14800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14600:
                    r29 = r29 + -80;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r18;
                    r18 = 3 << 16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r17;
                    r2 = 3 << 16;
                    r17 = 3 << 16;
                    r8 = 3 << 16;
                    r18 = r18 + -9964;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r21;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r20;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r19;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r31;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r30;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r23;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r22;
                    r20 = r0 + r0;
                    r16 = r2 + -10220;
                    r17 = r17 + -18472;
                    r21 = r8 + -18392;
                    r19 = r18 + r0;
                case 0x14654:
                    r2 = r16 + r20;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r0 + 255;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1469c;
                        continue;
                    }
                case 0x14668:
                    r2 = r17 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x149a8;
                        run_14800(); return;
                    }
                    r9 = r20 + 1;
                    r20 = r9 & 255;
                    r2 = r16 + r20;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r0 + 255;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x14668;
                        continue;
                    }
                case 0x1469c:
                    r3 = 3 << 16;
                    r17 = 3 << 16;
                    r17 = r17 + -18392;
                    r19 = 3 << 16;
                    addr=r3+-10220;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r23 = r0 + r0;
                    r18 = r17 + r0;
                    r19 = r19 + -18472;
                case 0x146bc:
                    r5 = r0 + 255;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r7 = r23 + r0;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x14794;
                        continue;
                    }
                case 0x146d0:
                    r4 = r17 + r2;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r4 = r6 & 128;
                    r4 = r4 & 255;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x147c8;
                        continue;
                    }
                    r8 = r23 + 1;
                    r30 = r8 & 255;
                    r2 = r16 + r30;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r30&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x1485c;
                        run_14800(); return;
                    }
                    r4 = r2 + r18;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r5 = r4 & 64;
                    addr=r28+-32567;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14864;
                        run_14800(); return;
                    }
                    r3 = r4 & 4;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14bc4;
                        run_14a00(); return;
                    }
                    r4 = r4 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14874;
                        run_14800(); return;
                    }
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14f9c;
                        run_14e00(); return;
                    }
                case 0x14750:
                    r9 = 3 << 16;
                    r21 = r9 + -9964;
                    r7 = r21 + r7;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r3 >>> 3;
                    addr=r28+-32567;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 - r2;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x14774:
                    r2 = r16 + r30;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r23 = r30 + r0;
                case 0x14780:
                    r5 = r0 + 255;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r7 = r23 + r0;
                    if(r2 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x146d0;
                        continue;
                    }
                case 0x14794:
                    r31 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r30 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r23 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r22 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r21 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r20 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r19 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 80;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x147c8:
                    r2 = r2 + r19;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = r2 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x148ec;
                        run_14800(); return;
                    }
                    r3 = r23 + 1;
                    r23 = r3 & 255;
                    r2 = r16 + r23;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x14c80;
                        run_14c00(); return;
                    }
                    r4 = r2 + r18;
                case 0x14800:
                    pc=0x14800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14800() throws ExecutionException { /* 0x14800 - 0x14a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14800:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r4 & 2;
                    r4 = r4 & 255;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x146bc;
                        run_14600(); return;
                    }
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14c90;
                        run_14c00(); return;
                    }
                    r9 = 3 << 16;
                    r2 = r23 + r0;
                    r21 = r9 + -9964;
                case 0x14838:
                    r9 = r21 + r2;
                    r2 = r0 + 6;
                    addr=r9+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 5;
                    addr=r9+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x1484c:
                    r2 = r16 + r23;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x146bc;
                    run_14600(); return;
                case 0x1485c:
                    r4 = r0 + 65;
                    addr=r28+-32567;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x14864:
                    r4 = r2 + -18;
                    r4 = (r4&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14880;
                        continue;
                    }
                case 0x14874:
                    r23 = r30 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x146bc;
                    run_14600(); return;
                case 0x14880:
                    r4 = r23 + 2;
                    r4 = r4 & 255;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r16 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r17 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r4 & 64;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14874;
                        continue;
                    }
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15230;
                        run_15200(); return;
                    }
                case 0x148c0:
                    r9 = 3 << 16;
                    r21 = r9 + -9964;
                    r3 = r21 + r23;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r23 = r30 + r0;
                    r2 = r2 + -1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r16 + r30;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x14780;
                    run_14600(); return;
                case 0x148ec:
                    r6 = r6 & 2;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14c14;
                        run_14c00(); return;
                    }
                    r30 = r23 + 1;
                    r30 = r30 & 255;
                    r2 = r30 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x14910;
                    continue;
                case 0x1490c:
                    r2 = r5 + r0;
                case 0x14910:
                    r4 = r16 + r2;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r5 = r2 + 1;
                    r6 = r2 + r0;
                    r5 = r5 & 255;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1490c;
                        continue;
                    }
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 255;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x14774;
                        run_14600(); return;
                    }
                    r4 = r17 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14774;
                        run_14600(); return;
                    }
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1508c;
                        run_15000(); return;
                    }
                case 0x14964:
                    r9 = 3 << 16;
                    r21 = r9 + -9964;
                case 0x1496c:
                    r6 = r21 + r6;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r21 + r23;
                    r2 = r2 >>> 1;
                    r2 = r2 + 1;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r23 = r30 + r0;
                    r2 = r2 >>> 1;
                    r2 = r2 + 1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r16 + r30;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x14780;
                    run_14600(); return;
                case 0x149a8:
                    r2 = r20 + -1;
                    r2 = r2 & 255;
                    r6 = r0 + 255;
                case 0x149b4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1469c;
                        run_14600(); return;
                    }
                    r3 = r16 + r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x149f8;
                        continue;
                    }
                    r4 = r2 + -1;
                    r5 = r4 & 255;
                    r4 = r3 + r21;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x149f8;
                        continue;
                    }
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x149b4;
                    continue;
                case 0x149f8:
                    r23 = 3 << 16;
                    r22 = 3 << 16;
                case 0x14a00:
                    pc=0x14a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14a00() throws ExecutionException { /* 0x14a00 - 0x14c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14a00:
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r3 + r0;
                    r23 = r23 + -18224;
                    r22 = r22 + -18308;
                case 0x14a10:
                    r3 = r0 + 255;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x14a80;
                        continue;
                    }
                    r3 = r17 + r4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 32;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14a4c;
                        continue;
                    }
                    r4 = r4 + r21;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14a80;
                        continue;
                    }
                case 0x14a4c:
                    r3 = r18 + r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r3 + 1;
                    r3 = r3 >>> 1;
                    r3 = r4 + r3;
                    r4 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    r3 = r3 & 255;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14aa8;
                        continue;
                    }
                case 0x14a78:
                    r4 = r18 + r2;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x14a80:
                    r3 = r2 + 1;
                    r3 = r3 & 255;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x14bb4;
                        continue;
                    }
                case 0x14a94:
                    r2 = r16 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x14a10;
                    continue;
                case 0x14aa8:
                    r2 = 3 << 16;
                    r4 = r2 + -19152;
                    /* Next insn is delay slot */ 
                    r31=0x14ab8;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x14ab8:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15478;
                        run_15400(); return;
                    }
                    r4 = 3 << 16;
                    r4 = r4 + -19072;
                    /* Next insn is delay slot */ 
                    r31=0x14ad8;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x14ad8:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15478;
                        run_15400(); return;
                    }
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r30 = 3 << 16;
                    r2 = r16 + r5;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = r30 + -19068;
                    r3 = r2 + r23;
                    r2 = r2 + r22;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r2 = r5 + r19;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x14b20;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x14b20:
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r2 + r19;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14a80;
                        continue;
                    }
                    r4 = 3 << 16;
                    r4 = r4 + -19036;
                    /* Next insn is delay slot */ 
                    r31=0x14b50;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x14b50:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14b98;
                        continue;
                    }
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r30 + -19068;
                    r2 = r5 + r16;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r2 + r23;
                    r2 = r2 + r22;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r2 = r5 + r19;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x14b98;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x14b98:
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r2 + 1;
                    r3 = r3 & 255;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r20) {
                        /* Next insn is delay slot */ 
                        pc=0x14a94;
                        continue;
                    }
                case 0x14bb4:
                    r2 = r2 + 2;
                    r20 = r2 & 255;
                    /* Next insn is delay slot */ 
                    pc=0x14654;
                    run_14600(); return;
                case 0x14bc4:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14e54;
                        run_14e00(); return;
                    }
                    r9 = r30 + r0;
                case 0x14bd8:
                    r2 = r9 + -1;
                    r9 = 3 << 16;
                    r21 = r9 + -9964;
                    r9 = r21 + r2;
                    addr=r9+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r23 = r30 + r0;
                    r3 = r2 + 1;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 >>> 2;
                    r2 = r3 + r2;
                case 0x14c00:
                    pc=0x14c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14c00() throws ExecutionException { /* 0x14c00 - 0x14e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14c00:
                    addr=r9+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r16 + r30;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x14780;
                    run_14600(); return;
                case 0x14c14:
                    r2 = r2 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14c70;
                        continue;
                    }
                    r2 = r16 + r23;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 + r18;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14c70;
                        continue;
                    }
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15350;
                        run_15200(); return;
                    }
                case 0x14c54:
                    r9 = 3 << 16;
                    r21 = r9 + -9964;
                    r7 = r21 + r7;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 + -2;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x14c70:
                    r3 = r23 + 1;
                    r23 = r3 & 255;
                    /* Next insn is delay slot */ 
                    pc=0x1484c;
                    run_14800(); return;
                case 0x14c80:
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 255;
                    /* Next insn is delay slot */ 
                    pc=0x146bc;
                    run_14600(); return;
                case 0x14c90:
                    r4 = 3 << 16;
                    r4 = r4 + -18844;
                    /* Next insn is delay slot */ 
                    r31=0x14ca0;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x14ca0:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x154b8;
                        run_15400(); return;
                    }
                    r30 = 3 << 16;
                    r4 = r30 + -19036;
                    /* Next insn is delay slot */ 
                    r31=0x14cc0;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x14cc0:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x154b8;
                        run_15400(); return;
                    }
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r3 = 3 << 16;
                    r2 = r5 + r16;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r20 = 3 << 16;
                    r3 = r3 + -18224;
                    r9 = 3 << 16;
                    r20 = r20 + -18308;
                    r4 = r3 + r2;
                    r21 = r9 + -9964;
                    r2 = r20 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r2 = r21 + r5;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r22 = 3 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r22 + -19068;
                    /* Next insn is delay slot */ 
                    r31=0x14d20;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x14d20:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x154cc;
                        run_15400(); return;
                    }
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r3 = 3 << 16;
                    r5 = r5 + -1;
                    r2 = r5 + r16;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r3 + -18224;
                    r4 = r2 + r3;
                    r2 = r2 + r20;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r2 = r5 + r21;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r22 + -19068;
                    /* Next insn is delay slot */ 
                    r31=0x14d70;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x14d70:
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = r0 + 6;
                    r2 = r2 + r21;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r0 + 5;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1484c;
                        run_14800(); return;
                    }
                    r4 = r30 + -19036;
                    /* Next insn is delay slot */ 
                    r31=0x14da4;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x14da4:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1484c;
                        run_14800(); return;
                    }
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r3 = 3 << 16;
                    r2 = r16 + r5;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r3 + -18224;
                    r4 = r3 + r2;
                    r2 = r20 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r2 = r21 + r5;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r22 + -19068;
                    /* Next insn is delay slot */ 
                    r31=0x14df0;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x14df0:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1484c;
                        run_14800(); return;
                    }
                case 0x14e00:
                    pc=0x14e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14e00() throws ExecutionException { /* 0x14e00 - 0x15000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14e00:
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r3 = 3 << 16;
                    r5 = r5 + -1;
                    r2 = r5 + r16;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r3 + -18224;
                    r4 = r2 + r3;
                    r9 = r5 + r21;
                    r2 = r2 + r20;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    addr=r9+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r4 = 3 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r4 + -19068;
                    /* Next insn is delay slot */ 
                    r31=0x14e44;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x14e44:
                    r2 = r16 + r23;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x146bc;
                    run_14600(); return;
                case 0x14e54:
                    r4 = 3 << 16;
                    r4 = r4 + -18908;
                    /* Next insn is delay slot */ 
                    r31=0x14e64;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x14e64:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x154d8;
                        run_15400(); return;
                    }
                    r4 = 3 << 16;
                    r4 = r4 + -19072;
                    /* Next insn is delay slot */ 
                    r31=0x14e84;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x14e84:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x154d8;
                        run_15400(); return;
                    }
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = 3 << 16;
                    r5 = r5 + -1;
                    r2 = r5 + r16;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r20 = 3 << 16;
                    r4 = r4 + -18224;
                    r9 = 3 << 16;
                    r20 = r20 + -18308;
                    r3 = r4 + r2;
                    r21 = r9 + -9964;
                    r2 = r20 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r2 = r21 + r5;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r22 = 3 << 16;
                    r4 = r22 + -19068;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x14ee8;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x14ee8:
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 + -1;
                    r3 = r21 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = r2 + 1;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 >>> 2;
                    r2 = r4 + r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14774;
                        run_14600(); return;
                    }
                    r4 = 3 << 16;
                    r4 = r4 + -19036;
                    /* Next insn is delay slot */ 
                    r31=0x14f34;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x14f34:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14774;
                        run_14600(); return;
                    }
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r5 = r5 + -1;
                case 0x14f50:
                    r2 = r16 + r5;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = 3 << 16;
                    r4 = r4 + -18224;
                    r3 = r4 + r2;
                    r9 = r21 + r5;
                    r2 = r20 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    addr=r9+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r22 + -19068;
                    /* Next insn is delay slot */ 
                    r31=0x14f88;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x14f88:
                    r2 = r16 + r30;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r23 = r30 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x14780;
                    run_14600(); return;
                case 0x14f9c:
                    r4 = 3 << 16;
                    r4 = r4 + -18968;
                    /* Next insn is delay slot */ 
                    r31=0x14fac;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x14fac:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x154ac;
                        run_15400(); return;
                    }
                    r4 = 3 << 16;
                    r4 = r4 + -19072;
                    /* Next insn is delay slot */ 
                    r31=0x14fcc;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x14fcc:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x154ac;
                        run_15400(); return;
                    }
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = 3 << 16;
                    r2 = r5 + r16;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r20 = 3 << 16;
                    r4 = r4 + -18224;
                    r9 = 3 << 16;
                    r20 = r20 + -18308;
                    r3 = r4 + r2;
                case 0x15000:
                    pc=0x15000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15000() throws ExecutionException { /* 0x15000 - 0x15200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15000:
                    r21 = r9 + -9964;
                    r2 = r20 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r2 = r21 + r5;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r22 = 3 << 16;
                    r4 = r22 + -19068;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1502c;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x1502c:
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r21 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r4 >>> 3;
                    addr=r28+-32567;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r4 - r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14774;
                        run_14600(); return;
                    }
                    r4 = 3 << 16;
                    r4 = r4 + -19036;
                    /* Next insn is delay slot */ 
                    r31=0x15070;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x15070:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14774;
                        run_14600(); return;
                    }
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x14f50;
                    run_14e00(); return;
                case 0x1508c:
                    r4 = 3 << 16;
                    r4 = r4 + -18780;
                    /* Next insn is delay slot */ 
                    r31=0x1509c;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x1509c:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x154a0;
                        run_15400(); return;
                    }
                    r4 = 3 << 16;
                    r4 = r4 + -19072;
                    /* Next insn is delay slot */ 
                    r31=0x150bc;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x150bc:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x154a0;
                        run_15400(); return;
                    }
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r3 = 3 << 16;
                    r2 = r5 + r16;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r20 = 3 << 16;
                    r3 = r3 + -18224;
                    r9 = 3 << 16;
                    r20 = r20 + -18308;
                    r4 = r3 + r2;
                    r21 = r9 + -9964;
                    r2 = r20 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r2 = r21 + r5;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r22 = 3 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r22 + -19068;
                    /* Next insn is delay slot */ 
                    r31=0x1511c;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x1511c:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15494;
                        run_15400(); return;
                    }
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r3 = 3 << 16;
                    r5 = r5 + -1;
                    r2 = r5 + r16;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r3 + -18224;
                    r4 = r2 + r3;
                    r2 = r2 + r20;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r2 = r5 + r21;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r22 + -19068;
                    /* Next insn is delay slot */ 
                    r31=0x1516c;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x1516c:
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r3 = r21 + r23;
                    r5 = r8 + r21;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 >>> 1;
                    r2 = r2 + 1;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 >>> 1;
                    r2 = r2 + 1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14774;
                        run_14600(); return;
                    }
                    r4 = 3 << 16;
                    r4 = r4 + -19036;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x151c8;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x151c8:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r8 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14774;
                        run_14600(); return;
                    }
                    r2 = r8 + r16;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = 3 << 16;
                    r4 = r4 + -18224;
                    r3 = r2 + r4;
                    r2 = r2 + r20;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                case 0x15200:
                    pc=0x15200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15200() throws ExecutionException { /* 0x15200 - 0x15400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15200:
                    r5 = r8 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r22 + -19068;
                    /* Next insn is delay slot */ 
                    r31=0x15214;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x15214:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    r8 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14774;
                        run_14600(); return;
                    }
                    r5 = r8 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x14f50;
                    run_14e00(); return;
                case 0x15230:
                    r4 = 3 << 16;
                    r4 = r4 + -19028;
                    /* Next insn is delay slot */ 
                    r31=0x15240;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x15240:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x148c0;
                        run_14800(); return;
                    }
                    r4 = 3 << 16;
                    r4 = r4 + -19072;
                    /* Next insn is delay slot */ 
                    r31=0x15260;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x15260:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x148c0;
                        run_14800(); return;
                    }
                    r3 = r16 + r23;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    r9 = 3 << 16;
                    r3 = 3 << 16;
                    r22 = 3 << 16;
                    r3 = r3 + -18224;
                    r21 = r9 + -9964;
                    r22 = r22 + -18308;
                    r4 = r2 + r3;
                    r21 = r21 + r23;
                    r2 = r2 + r22;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r20 = 3 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r20 + -19068;
                    r5 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x152c4;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x152c4:
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 + -1;
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14774;
                        run_14600(); return;
                    }
                    r4 = 3 << 16;
                    r4 = r4 + -19036;
                    /* Next insn is delay slot */ 
                    r31=0x152f4;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x152f4:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14774;
                        run_14600(); return;
                    }
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = r23 + r0;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = 3 << 16;
                    r3 = r3 + -18224;
                    r4 = r2 + r3;
                    r2 = r2 + r22;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r20 + -19068;
                    /* Next insn is delay slot */ 
                    r31=0x1533c;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x1533c:
                    r2 = r16 + r30;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r23 = r30 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x146bc;
                    run_14600(); return;
                case 0x15350:
                    r4 = 3 << 16;
                    r4 = r4 + -18684;
                    /* Next insn is delay slot */ 
                    r31=0x15360;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x15360:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15488;
                        run_15400(); return;
                    }
                    r4 = 3 << 16;
                    r4 = r4 + -19072;
                    /* Next insn is delay slot */ 
                    r31=0x15380;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x15380:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15488;
                        run_15400(); return;
                    }
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r3 = 3 << 16;
                    r2 = r5 + r16;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r20 = 3 << 16;
                    r3 = r3 + -18224;
                    r9 = 3 << 16;
                    r20 = r20 + -18308;
                    r4 = r3 + r2;
                    r21 = r9 + -9964;
                    r2 = r20 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r2 = r21 + r5;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r22 = 3 << 16;
                    r4 = r22 + -19068;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x153e0;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x153e0:
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r21 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r4 + -2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                case 0x15400:
                    pc=0x15400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15400() throws ExecutionException { /* 0x15400 - 0x15600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15400:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14c70;
                        run_14c00(); return;
                    }
                    r4 = 3 << 16;
                    r4 = r4 + -19036;
                    /* Next insn is delay slot */ 
                    r31=0x1541c;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x1541c:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14c70;
                        run_14c00(); return;
                    }
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r3 = 3 << 16;
                    r2 = r16 + r5;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r3 + -18224;
                    r4 = r3 + r2;
                    r9 = r21 + r5;
                    r2 = r20 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    addr=r9+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r22 + -19068;
                    /* Next insn is delay slot */ 
                    r31=0x15468;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x15468:
                    r3 = r23 + 1;
                    r23 = r3 & 255;
                    /* Next insn is delay slot */ 
                    pc=0x1484c;
                    run_14800(); return;
                case 0x15478:
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x14a78;
                    run_14a00(); return;
                case 0x15488:
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x14c54;
                    run_14c00(); return;
                case 0x15494:
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x1496c;
                    run_14800(); return;
                case 0x154a0:
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x14964;
                    run_14800(); return;
                case 0x154ac:
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x14750;
                    run_14600(); return;
                case 0x154b8:
                    r9 = 3 << 16;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r21 = r9 + -9964;
                    /* Next insn is delay slot */ 
                    pc=0x14838;
                    run_14800(); return;
                case 0x154cc:
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x14838;
                    run_14800(); return;
                case 0x154d8:
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x14bd8;
                    run_14a00(); return;
                case 0x15600:
                    pc=0x15600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15600() throws ExecutionException { /* 0x15600 - 0x15800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15600:
                    addr=r28+-32768;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    addr=r28+-32764;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r29 = r29 + -56;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r30;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r23;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r19 = 3 << 16;
                    /* Next insn is delay slot */ 
                    r31=0x15640;
                    pc=0x17600;
                    run_17600(); return;
                case 0x15640:
                    r4 = 3 << 16;
                    r4 = r4 + 23892;
                    r23 = r19 + -10536;
                    r20 = 3 << 16;
                    writePages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff] = r0;
                    r30 = r20 + -9964;
                    /* Next insn is delay slot */ 
                    r31=0x15660;
                    pc=0x1c800;
                    run_1c800(); return;
                case 0x15660:
                    r16 = 3 << 16;
                    r4 = r23 + r0;
                    r5 = r0 + r0;
                    r6 = r0 + 256;
                    writePages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff] = r2;
                    r16 = r16 + -9708;
                    /* Next insn is delay slot */ 
                    r31=0x15680;
                    pc=0x223f0;
                    run_22200(); return;
                case 0x15680:
                    r17 = 3 << 16;
                    r4 = r30 + r0;
                    r5 = r0 + r0;
                    r6 = r0 + 256;
                    /* Next insn is delay slot */ 
                    r31=0x15698;
                    pc=0x223f0;
                    run_22200(); return;
                case 0x15698:
                    r17 = r17 + -10280;
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    r6 = r0 + 60;
                    r18 = 3 << 16;
                    /* Next insn is delay slot */ 
                    r31=0x156b4;
                    pc=0x223f0;
                    run_22200(); return;
                case 0x156b4:
                    r18 = r18 + -9648;
                    r4 = r17 + r0;
                    r5 = r0 + r0;
                    r6 = r0 + 60;
                    /* Next insn is delay slot */ 
                    r31=0x156cc;
                    pc=0x223f0;
                    run_22200(); return;
                case 0x156cc:
                    r21 = 3 << 16;
                    r4 = r18 + r0;
                    r5 = r0 + r0;
                    r6 = r0 + 60;
                    /* Next insn is delay slot */ 
                    r31=0x156e4;
                    pc=0x223f0;
                    run_22200(); return;
                case 0x156e4:
                    r22 = r21 + -10220;
                    r2 = r0 + 32;
                    addr=r22+255;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x156f8;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x156f8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15940;
                        run_15800(); return;
                    }
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15a70;
                        run_15a00(); return;
                    }
                case 0x15710:
                    /* Next insn is delay slot */ 
                    r31=0x15718;
                    pc=0x13600;
                    run_13600(); return;
                case 0x15718:
                    r2 = r0 + 1;
                    r4 = r2 + -1;
                    r4 = r4 & 255;
                    r3 = r22 + r4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r6 = 3 << 16;
                    r5 = r0 + 255;
                    r8 = r22 + r0;
                    r6 = r6 + -18392;
                    r9 = r23 + r0;
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x157b0;
                        continue;
                    }
                case 0x15748:
                    r3 = r3 + r6;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 64;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1578c;
                        continue;
                    }
                    r7 = r4 + 1;
                    r3 = r7 + r8;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x1578c;
                        continue;
                    }
                    r3 = r3 + r6;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x15974;
                        run_15800(); return;
                    }
                case 0x1578c:
                    r2 = r2 + 1;
                    r2 = r2 & 255;
                case 0x15794:
                    r4 = r2 + -1;
                    r4 = r4 & 255;
                    r3 = r22 + r4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x15748;
                        continue;
                    }
                case 0x157b0:
                    r2 = r0 + -1;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = 3 << 16;
                    addr=r2+-10220;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r0 + r0;
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x1584c;
                        run_15800(); return;
                    }
                    r6 = 3 << 16;
                    r5 = 3 << 16;
                    r6 = r6 + -18632;
                    r5 = r5 + -18552;
                    r4 = r0 + 255;
                    /* Next insn is delay slot */ 
                    pc=0x15810;
                    run_15800(); return;
                case 0x157e8:
                    r3 = r3 + r5;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r3 = r30 + r2;
                    r2 = r2 + 1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r22 + r2;
                case 0x15800:
                    pc=0x15800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15800() throws ExecutionException { /* 0x15800 - 0x15a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15800:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1584c;
                        continue;
                    }
                case 0x15810:
                    r7 = r23 + r2;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    if(r7 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x157e8;
                        run_15600(); return;
                    }
                    r3 = r3 + r6;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r3 = r30 + r2;
                    r2 = r2 + 1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r22 + r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x15810;
                        continue;
                    }
                case 0x1584c:
                    /* Next insn is delay slot */ 
                    r31=0x15854;
                    pc=0x14600;
                    run_14600(); return;
                case 0x15854:
                    /* Next insn is delay slot */ 
                    r31=0x1585c;
                    pc=0x13000;
                    run_13000(); return;
                case 0x1585c:
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x15878;
                    continue;
                case 0x15868:
                    r2 = r2 + 1;
                    r2 = r2 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15a34;
                        run_15a00(); return;
                    }
                case 0x15878:
                    r4 = r22 + r2;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r5 = (r3&0xffffffffL) < (81&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15868;
                        continue;
                    }
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x158a8;
                    pc=0x12800;
                    run_12800(); return;
                case 0x158a8:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15a54;
                        run_15a00(); return;
                    }
                case 0x158b8:
                    r19 = r0 + 1;
                    r3 = r19 + -1;
                    r3 = r3 & 255;
                    r2 = r22 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r21 = r0 + 255;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r0 + r0;
                    r20 = r0 + 254;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x15928;
                        continue;
                    }
                case 0x158ec:
                    if(r2 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x15a00;
                        run_15a00(); return;
                    }
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x159b4;
                        continue;
                    }
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r19&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r19 + 1;
                    r19 = r19 & 255;
                case 0x15908:
                    r3 = r19 + -1;
                    r3 = r3 & 255;
                    r2 = r22 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r21) {
                        /* Next insn is delay slot */ 
                        pc=0x158ec;
                        continue;
                    }
                case 0x15928:
                    r2 = r0 + -1;
                    r4 = r16 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x1593c;
                    pc=0x16200;
                    run_16200(); return;
                case 0x1593c:
                    r2 = r0 + 1;
                case 0x15940:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15974:
                    r7 = r23 + r7;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1578c;
                        run_15600(); return;
                    }
                    r7 = r3 << 24;
                    r7 = r7 >> 24;
                    if(r7 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1578c;
                        run_15600(); return;
                    }
                    r4 = r4 + r9;
                    r3 = r3 + 1;
                    r2 = r2 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 & 255;
                    /* Next insn is delay slot */ 
                    pc=0x15794;
                    run_15600(); return;
                case 0x159b4:
                    r6 = r16 + r4;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r2 = r18 + r4;
                    r6 = r30 + r6;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r3 = r23 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r17 + r4;
                    r4 = r4 + 1;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r19&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r4 & 255;
                    r19 = r19 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r19 & 255;
                    /* Next insn is delay slot */ 
                    pc=0x15908;
                    continue;
                case 0x15a00:
                    pc=0x15a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15a00() throws ExecutionException { /* 0x15a00 - 0x15c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15a00:
                    r4 = r16 + r4;
                    r2 = r0 + -1;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r19&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x15a18;
                    pc=0x16200;
                    run_16200(); return;
                case 0x15a18:
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r19&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r19 + 1;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r0 + r0;
                    r19 = r19 & 255;
                    /* Next insn is delay slot */ 
                    pc=0x15908;
                    run_15800(); return;
                case 0x15a34:
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x15a44;
                    pc=0x12800;
                    run_12800(); return;
                case 0x15a44:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x158b8;
                        run_15800(); return;
                    }
                case 0x15a54:
                    r4 = r21 + -10220;
                    r5 = r20 + -9964;
                    r6 = r19 + -10536;
                    /* Next insn is delay slot */ 
                    r31=0x15a68;
                    pc=0x18a00;
                    run_18a00(); return;
                case 0x15a68:
                    /* Next insn is delay slot */ 
                    pc=0x158b8;
                    run_15800(); return;
                case 0x15a70:
                    r4 = r22 + r0;
                    r5 = r30 + r0;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15a84;
                    pc=0x18a00;
                    run_18a00(); return;
                case 0x15a84:
                    /* Next insn is delay slot */ 
                    pc=0x15710;
                    run_15600(); return;
                case 0x15c00:
                    pc=0x15c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15c00() throws ExecutionException { /* 0x15c00 - 0x15e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15c00:
                    addr=r28+-32573;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r5 = r28 + -32736;
                    r6 = r2 & 7;
                    r6 = r6 + -1;
                    r6 = r6 & 255;
                    r5 = r5 + r6;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r2 = r2 & 248;
                    addr=r28+-32570;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32567;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32568;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32571;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15ec4;
                        run_15e00(); return;
                    }
                    r2 = 3 << 16;
                    r2 = r2 + -9588;
                    r3 = r3 + r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r24 = tmp;
                    r10 = 3 << 16;
                    r24 = r24 >>> 4;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r24&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r8 = 3 << 16;
                    r3 = readPages[(r28+-32600)>>>12][((r28+-32600)>>>2)&0x3ff];
                    r9 = r6 + r0;
                    r24 = r24 ^ 255;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r10 = r10 + -17920;
                    r8 = r8 + -13856;
                    r25 = r0 + 8;
                    r11 = r0 + -128;
                    r15 = r0 + 6;
                    r14 = r0 + 4;
                    r2 = r0 + 50;
                    r7 = r0 + 96;
                    r13 = r0 + 26;
                    r12 = r0 + 3;
                    r6 = r0 + -96;
                case 0x15ca0:
                    r9 = r9 << 8;
                    r5 = r9 + r5;
                    r5 = r10 + r5;
                    addr=r28+-32567;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r25&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x15da4;
                    continue;
                case 0x15cbc:
                    r5 = r3 << 2;
                    r3 = r3 << 4;
                    r3 = r5 + r3;
                    r3 = r8 + r3;
                    r5 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    r3 = readPages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff];
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r13&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r5 + r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r3%r2; lo = r3/r2;
                        pc=0x15ce8;
                        continue;
                    }
                    hi = r3%r2; lo = r3/r2;
                    throw new ExecutionException("Break");
                case 0x15ce8:
                    r5 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    writePages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff] = r3;
                    writePages[(r28+-32600)>>>12][((r28+-32600)>>>2)&0x3ff] = r12;
                    r3 = lo;
                    r3 = r5 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff];
                    r5 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r3%r2; lo = r3/r2;
                        pc=0x15d14;
                        continue;
                    }
                    hi = r3%r2; lo = r3/r2;
                    throw new ExecutionException("Break");
                case 0x15d14:
                    r3 = lo;
                    r3 = r5 + r3;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff];
                    r5 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r3%r2; lo = r3/r2;
                        pc=0x15d34;
                        continue;
                    }
                    hi = r3%r2; lo = r3/r2;
                    throw new ExecutionException("Break");
                case 0x15d34:
                    r3 = lo;
                    r3 = r5 + r3;
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff];
                    r5 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r3%r2; lo = r3/r2;
                        pc=0x15d54;
                        continue;
                    }
                    hi = r3%r2; lo = r3/r2;
                    throw new ExecutionException("Break");
                case 0x15d54:
                    r3 = lo;
                    r3 = r5 + r3;
                    addr=r3+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff];
                    r5 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r3%r2; lo = r3/r2;
                        pc=0x15d74;
                        continue;
                    }
                    hi = r3%r2; lo = r3/r2;
                    throw new ExecutionException("Break");
                case 0x15d74:
                    r3 = lo;
                    r3 = r5 + r3;
                    addr=r3+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32567;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r3 = r0 + 3;
                    r5 = r5 + -1;
                    r5 = r5 & 255;
                    addr=r28+-32567;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15e98;
                        run_15e00(); return;
                    }
                case 0x15d9c:
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                case 0x15da4:
                    r9 = r5 << 1;
                    r5 = r5 & r11;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r9&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15cbc;
                        continue;
                    }
                    r5 = r3 << 2;
                    r3 = r3 << 4;
                    r3 = r5 + r3;
                    r3 = r8 + r3;
                    r5 = readPages[(r3+16)>>>12][((r3+16)>>>2)&0x3ff];
                    r3 = readPages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff];
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r15&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r5 + r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r3%r2; lo = r3/r2;
                        pc=0x15de4;
                        continue;
                    }
                    hi = r3%r2; lo = r3/r2;
                    throw new ExecutionException("Break");
                case 0x15de4:
                    r5 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    writePages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff] = r3;
                    writePages[(r28+-32600)>>>12][((r28+-32600)>>>2)&0x3ff] = r14;
                    r3 = lo;
                    r3 = r5 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff];
                case 0x15e00:
                    pc=0x15e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15e00() throws ExecutionException { /* 0x15e00 - 0x16000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15e00:
                    r5 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r3%r2; lo = r3/r2;
                        pc=0x15e10;
                        continue;
                    }
                    hi = r3%r2; lo = r3/r2;
                    throw new ExecutionException("Break");
                case 0x15e10:
                    r3 = lo;
                    r3 = r5 + r3;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff];
                    r5 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r3%r2; lo = r3/r2;
                        pc=0x15e30;
                        continue;
                    }
                    hi = r3%r2; lo = r3/r2;
                    throw new ExecutionException("Break");
                case 0x15e30:
                    r3 = lo;
                    r3 = r5 + r3;
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff];
                    r5 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r3%r2; lo = r3/r2;
                        pc=0x15e50;
                        continue;
                    }
                    hi = r3%r2; lo = r3/r2;
                    throw new ExecutionException("Break");
                case 0x15e50:
                    r3 = lo;
                    r3 = r5 + r3;
                    addr=r3+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff];
                    r5 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r3%r2; lo = r3/r2;
                        pc=0x15e70;
                        continue;
                    }
                    hi = r3%r2; lo = r3/r2;
                    throw new ExecutionException("Break");
                case 0x15e70:
                    r3 = lo;
                    r3 = r5 + r3;
                    addr=r3+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32567;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r3 = r0 + 4;
                    r5 = r5 + -1;
                    r5 = r5 & 255;
                    addr=r28+-32567;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15d9c;
                        run_15c00(); return;
                    }
                case 0x15e98:
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r24 = r24 + 1;
                    r5 = r5 + 1;
                    r5 = r5 & 255;
                    r24 = r24 & 255;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r24 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16148;
                        run_16000(); return;
                    }
                    addr=r28+-32571;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x15ca0;
                    run_15c00(); return;
                case 0x15ec4:
                    r2 = r2 ^ 255;
                    r10 = 3 << 16;
                    r8 = 3 << 16;
                    r4 = readPages[(r28+-32600)>>>12][((r28+-32600)>>>2)&0x3ff];
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r2 + r0;
                    r10 = r10 + -17920;
                    r8 = r8 + -13856;
                    r12 = r0 + 8;
                    r7 = r0 + -128;
                    r9 = r0 + 2;
                    r2 = r0 + 50;
                    r3 = r0 + 80;
                    r11 = r0 + 1;
                case 0x15efc:
                    r6 = r6 << 8;
                    r5 = r6 + r5;
                    r5 = r10 + r5;
                    addr=r28+-32567;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r12&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x16004;
                    run_16000(); return;
                case 0x15f18:
                    r4 = r0 + 1;
                case 0x15f1c:
                    r5 = r4 << 2;
                    r4 = r4 << 4;
                    r4 = r5 + r4;
                    r4 = r8 + r4;
                    r5 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff];
                    writePages[(r28+-32600)>>>12][((r28+-32600)>>>2)&0x3ff] = r9;
                    r4 = r5 + r4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r4%r2; lo = r4/r2;
                        pc=0x15f48;
                        continue;
                    }
                    hi = r4%r2; lo = r4/r2;
                    throw new ExecutionException("Break");
                case 0x15f48:
                    r5 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    writePages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff] = r4;
                    r4 = lo;
                    r4 = r5 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff];
                    r5 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r4%r2; lo = r4/r2;
                        pc=0x15f70;
                        continue;
                    }
                    hi = r4%r2; lo = r4/r2;
                    throw new ExecutionException("Break");
                case 0x15f70:
                    r4 = lo;
                    r4 = r5 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff];
                    r5 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r4%r2; lo = r4/r2;
                        pc=0x15f90;
                        continue;
                    }
                    hi = r4%r2; lo = r4/r2;
                    throw new ExecutionException("Break");
                case 0x15f90:
                    r4 = lo;
                    r4 = r5 + r4;
                    addr=r4+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff];
                    r5 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r4%r2; lo = r4/r2;
                        pc=0x15fb0;
                        continue;
                    }
                    hi = r4%r2; lo = r4/r2;
                    throw new ExecutionException("Break");
                case 0x15fb0:
                    r4 = lo;
                    r4 = r5 + r4;
                    addr=r4+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff];
                    r5 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r4%r2; lo = r4/r2;
                        pc=0x15fd0;
                        continue;
                    }
                    hi = r4%r2; lo = r4/r2;
                    throw new ExecutionException("Break");
                case 0x15fd0:
                    r4 = lo;
                    r4 = r5 + r4;
                    addr=r4+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32567;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r0 + 2;
                    r5 = r5 + -1;
                    r5 = r5 & 255;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32567;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16120;
                        run_16000(); return;
                    }
                case 0x15ffc:
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                case 0x16000:
                    pc=0x16000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16000() throws ExecutionException { /* 0x16000 - 0x16200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16000:
                case 0x16004:
                    r6 = r5 << 1;
                    r5 = r5 & r7;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15f1c;
                        run_15e00(); return;
                    }
                    r5 = r4 << 2;
                    r4 = r4 << 4;
                    r4 = r5 + r4;
                    r4 = r8 + r4;
                    r5 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff];
                    addr=r28+-32568;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r5 = r5 + r4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r5%r2; lo = r5/r2;
                        pc=0x16044;
                        continue;
                    }
                    hi = r5%r2; lo = r5/r2;
                    throw new ExecutionException("Break");
                case 0x16044:
                    r4 = r6 & 15;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r4 << 4;
                    r6 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    writePages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff] = r5;
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    writePages[(r28+-32600)>>>12][((r28+-32600)>>>2)&0x3ff] = r11;
                    r5 = lo;
                    r5 = r6 + r5;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = readPages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff];
                    r6 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r5%r2; lo = r5/r2;
                        pc=0x16084;
                        continue;
                    }
                    hi = r5%r2; lo = r5/r2;
                    throw new ExecutionException("Break");
                case 0x16084:
                    r5 = lo;
                    r5 = r6 + r5;
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = readPages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff];
                    r6 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r5%r2; lo = r5/r2;
                        pc=0x160a4;
                        continue;
                    }
                    hi = r5%r2; lo = r5/r2;
                    throw new ExecutionException("Break");
                case 0x160a4:
                    r5 = lo;
                    r5 = r6 + r5;
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = readPages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff];
                    r6 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r5%r2; lo = r5/r2;
                        pc=0x160c4;
                        continue;
                    }
                    hi = r5%r2; lo = r5/r2;
                    throw new ExecutionException("Break");
                case 0x160c4:
                    r5 = lo;
                    r5 = r6 + r5;
                    addr=r5+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = readPages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff];
                    r6 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r5%r2; lo = r5/r2;
                        pc=0x160e4;
                        continue;
                    }
                    hi = r5%r2; lo = r5/r2;
                    throw new ExecutionException("Break");
                case 0x160e4:
                    r5 = lo;
                    r5 = r6 + r5;
                    addr=r5+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15f18;
                        run_15e00(); return;
                    }
                    addr=r28+-32567;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r0 + 1;
                    r5 = r5 + -1;
                    r5 = r5 & 255;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32567;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15ffc;
                        run_15e00(); return;
                    }
                case 0x16120:
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r5 = r5 + 1;
                    r5 = r5 & 255;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1616c;
                        continue;
                    }
                    addr=r28+-32571;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x15efc;
                    run_15e00(); return;
                case 0x16148:
                    r2 = r0 + 1;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32572;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32570;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1616c:
                    r2 = r0 + 1;
                    addr=r28+-32572;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32570;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16200:
                    pc=0x16200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16200() throws ExecutionException { /* 0x16200 - 0x16400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16200:
                    r4 = 3 << 16;
                    addr=r4+-9708;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r29 = r29 + -112;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r2 = r0 + 255;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r31;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r30;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r23;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r22;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r21;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r20;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r19;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r18;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r17;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r16;
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x166d4;
                        run_16600(); return;
                    }
                    r4 = 3 << 16;
                    r20 = r3 + r0;
                    r30 = r4 + -9332;
                    r24 = 3 << 16;
                    r25 = 3 << 16;
                    r19 = 3 << 16;
                    r4 = r0 + 255;
                    addr=r28+-32760;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r22 = tmp;
                    r3 = r0 + r0;
                    r2 = r0 + r0;
                    r21 = r0 + r0;
                    r23 = 3 << 16;
                    r24 = r24 + -13676;
                    r25 = r25 + -13756;
                    r19 = r19 + -8052;
                    if(r20 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1640c;
                        run_16400(); return;
                    }
                case 0x16290:
                    r4 = r0 + 1;
                    if(r20 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x165f8;
                        run_16400(); return;
                    }
                    r5 = 3 << 16;
                    r6 = r20 + r0;
                    r4 = r5 + -9588;
                case 0x162a8:
                    r5 = r0 + 2;
                    if(r6 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x16544;
                        run_16400(); return;
                    }
                case 0x162b4:
                    r6 = 3 << 16;
                    r6 = r6 + -13596;
                    r5 = r20 + r6;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r17 = tmp;
                    r7 = 3 << 16;
                    r5 = r20 + r24;
                    r7 = r7 + -15968;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r16 = tmp;
                    r8 = 3 << 16;
                    r5 = r20 + r25;
                    r8 = r8 + -16048;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r15 = tmp;
                    r18 = 3 << 16;
                    r5 = r20 + r7;
                    r18 = r18 + -16128;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r14 = tmp;
                    r6 = 3 << 16;
                    r5 = r20 + r8;
                    r6 = r6 + -15888;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r13 = tmp;
                    r7 = 3 << 16;
                    r5 = r20 + r18;
                    r7 = r7 + -10280;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r12 = tmp;
                    r5 = r20 + r6;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r11 = tmp;
                    r5 = r7 + r21;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r8 = 3 << 16;
                    r8 = r8 + -15548;
                    r18 = 3 << 16;
                    r5 = r5 + r8;
                    r18 = r18 + -9648;
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    r5 = r18 + r21;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r10 = r22 + r10;
                    r5 = r2 + r5;
                    r9 = 3 << 16;
                    r8 = 3 << 16;
                    r7 = 3 << 16;
                    r6 = 3 << 16;
                    r10 = r10 & 255;
                    r5 = r5 & 255;
                    r9 = r9 + -8820;
                    r8 = r8 + -7796;
                    r7 = r7 + -8564;
                    r6 = r6 + -9076;
                    /* Next insn is delay slot */ 
                    pc=0x16380;
                    continue;
                case 0x1637c:
                    r3 = r2 + r0;
                case 0x16380:
                    r3 = r9 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r16&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r8 + r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r15&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r18 = r19 + r2;
                    r3 = r30 + r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r14&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r17&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r7 + r2;
                    r18 = 3 << 16;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r13&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r18 = r18 + -8308;
                    r3 = r6 + r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r12&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r18 + r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r11&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r4 + r2;
                    r2 = r2 + 1;
                    r2 = r2 & 255;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x1637c;
                        continue;
                    }
                    r21 = r21 + 1;
                    r21 = r21 & 255;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x173a4;
                        run_17200(); return;
                    }
                    r3 = 3 << 16;
                    r3 = r3 + -9708;
                    r2 = r3 + r21;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r20 = tmp;
                    r4 = r0 + 255;
                    r3 = r5 + r0;
                case 0x16400:
                    pc=0x16400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16400() throws ExecutionException { /* 0x16400 - 0x16600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16400:
                    r2 = r5 + r0;
                    if(r20 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x16290;
                        run_16200(); return;
                    }
                case 0x1640c:
                    r4 = 3 << 16;
                    r4 = r4 + -9708;
                    r2 = r0 + -1;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r28+-32567;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 255;
                    addr=r28+-32572;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x173c4;
                        run_17200(); return;
                    }
                case 0x16430:
                    r5 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r7 = r0 + r0;
                    r2 = r0 + r0;
                    r20 = 3 << 16;
                case 0x16440:
                    r6 = 3 << 16;
                    r6 = r6 + -15648;
                    r4 = r6 + r3;
                    r6 = r6 + r5;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    addr=r28+-32567;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x1733c;
                        run_17200(); return;
                    }
                    r4 = ((r6 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17314;
                        run_17200(); return;
                    }
                    r5 = 3 << 16;
                    r8 = 3 << 16;
                    r5 = r5 + -15808;
                    r8 = r8 + -15728;
                    r4 = r3 + r5;
                    r3 = r8 + r3;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                case 0x16490:
                    r4 = 3 << 16;
                    r4 = r4 + -9648;
                    r21 = r5 + r6;
                    r21 = r21 & 255;
                    r3 = r4 + r2;
                    r4 = r0 + -88;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r28+-32571;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r21 + -2;
                    r4 = r4 & 255;
                    r3 = r7 + r3;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r4 << 24;
                    r3 = r3 & 255;
                    r4 = r4 >> 24;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32570;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r21;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r21&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1735c;
                        run_17200(); return;
                    }
                    r5 = r5 + r3;
                    r5 = r5 & 255;
                    r3 = r3 - r6;
                    r7 = 3 << 16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r5;
                    r19 = r3 & 255;
                    r8 = r0 + 168;
                    r22 = r7 + -18068;
                case 0x16504:
                    r2 = r0 + 168;
                    if(r8 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x171b0;
                        run_17000(); return;
                    }
                    r8 = r8 + 87;
                    r8 = r8 & 255;
                    r2 = (r8&0xffffffffL) < (6&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1728c;
                        run_17200(); return;
                    }
                    r2 = 3 << 16;
                    r2 = r2 + -18092;
                    r8 = r8 << 2;
                    r8 = r2 + r8;
                    r2 = readPages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x16544:
                    r3 = r2 < 31 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16718;
                        run_16600(); return;
                    }
                    r5 = r2 + -30;
                    r5 = r5 & 255;
                    r3 = r5 + r0;
                case 0x1655c:
                    r5 = r4 + r5;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r6 = r0 + 127;
                    if(r5 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x165a0;
                        continue;
                    }
                    r3 = r3 + 1;
                    r3 = r3 & 255;
                    r7 = r0 + 127;
                    /* Next insn is delay slot */ 
                    pc=0x16588;
                    continue;
                case 0x16584:
                    r3 = r6 + r0;
                case 0x16588:
                    r5 = r4 + r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r6 = r3 + 1;
                    r6 = r6 & 255;
                    if(r5 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x16584;
                        continue;
                    }
                case 0x165a0:
                    r5 = r5 + -1;
                    r8 = r5 & 255;
                    r7 = r0 + 255;
                case 0x165ac:
                    r5 = r4 + r3;
                    r3 = r3 + 1;
                    r3 = r3 & 255;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r8&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x165ec;
                        continue;
                    }
                case 0x165c4:
                    r5 = r3 + 1;
                    r6 = r5 & 255;
                    r5 = r4 + r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    if(r5 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x166b4;
                        run_16600(); return;
                    }
                    r3 = r6 + r0;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x165c4;
                        continue;
                    }
                case 0x165ec:
                    r3 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x162b4;
                    run_16200(); return;
                case 0x165f8:
                    r3 = r2 < 31 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16708;
                        run_16600(); return;
                    }
                case 0x16600:
                    pc=0x16600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16600() throws ExecutionException { /* 0x16600 - 0x16800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16600:
                    r5 = r2 + -30;
                    r5 = r5 & 255;
                    r3 = r5 + r0;
                case 0x16610:
                    r4 = r23 + -9588;
                    r5 = r4 + r5;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r6 = r0 + 127;
                    if(r5 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x16658;
                        continue;
                    }
                    r3 = r3 + 1;
                    r3 = r3 & 255;
                    r7 = r0 + 127;
                    /* Next insn is delay slot */ 
                    pc=0x16640;
                    continue;
                case 0x1663c:
                    r3 = r6 + r0;
                case 0x16640:
                    r5 = r4 + r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r6 = r3 + 1;
                    r6 = r6 & 255;
                    if(r5 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x1663c;
                        continue;
                    }
                case 0x16658:
                    r5 = r5 + 1;
                    r8 = r5 & 255;
                    r7 = r0 + 255;
                case 0x16664:
                    r5 = r4 + r3;
                    r3 = r3 + 1;
                    r3 = r3 & 255;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r8&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x166a4;
                        continue;
                    }
                case 0x1667c:
                    r5 = r3 + 1;
                    r6 = r5 & 255;
                    r5 = r4 + r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    if(r5 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x166c4;
                        continue;
                    }
                    r3 = r6 + r0;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1667c;
                        continue;
                    }
                case 0x166a4:
                    r3 = r2 + r0;
                    r6 = r8 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x162a8;
                    run_16200(); return;
                case 0x166b4:
                    r8 = r8 + -1;
                    r8 = r8 & 255;
                    /* Next insn is delay slot */ 
                    pc=0x165ac;
                    run_16400(); return;
                case 0x166c4:
                    r8 = r8 + 1;
                    r8 = r8 & 255;
                    /* Next insn is delay slot */ 
                    pc=0x16664;
                    continue;
                case 0x166d4:
                    r31 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r30 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r23 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r22 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r21 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r20 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r19 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r18 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r17 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r16 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r29 = r29 + 112;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16708:
                    r3 = r0 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x16610;
                    continue;
                case 0x16718:
                    r3 = r0 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1655c;
                    run_16400(); return;
                case 0x16728:
                    r8 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r2 = r30 + r8;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x16740:
                    r3 = r30 + r19;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r8 = r0 + 172;
                    r4 = r0 + 260;
                case 0x16750:
                    r2 = r2 - r3;
                    r2 = r2 & 255;
                    r3 = r2 & 128;
                    r2 = r2 << 24;
                    r2 = r2 >> 24;
                    addr=r28+-32569;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r21 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = r2 + r0;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x17228;
                        run_17200(); return;
                    }
                case 0x16778:
                    r3 = r3 & 255;
                    if(r21 != r0) {
                        /* Next insn is delay slot */ 
                        if(r21!=0) {
                        hi = (int)((r3 & 0xffffffffL) % (r21 & 0xffffffffL)); lo = (int)((r3 & 0xffffffffL) / (r21 & 0xffffffffL));
                        }
                        pc=0x16788;
                        continue;
                    }
                    if(r21!=0) {
                    hi = (int)((r3 & 0xffffffffL) % (r21 & 0xffffffffL)); lo = (int)((r3 & 0xffffffffL) / (r21 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x16788:
                    r17 = 3 << 16;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r21&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r19&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32567;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r19 + r0;
                    r17 = r17 + -8564;
                    r16 = 3 << 16;
                    r5 = hi;
                    addr=r28+-32566;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r21 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r21; lo = r2/r21;
                        pc=0x167bc;
                        continue;
                    }
                    hi = r2%r21; lo = r2/r21;
                    throw new ExecutionException("Break");
                case 0x167bc:
                    r2 = lo;
                    addr=r28+-32568;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = 3 << 16;
                    r18 = r2 + -9076;
                case 0x167cc:
                    r4 = r4 & 255;
                    r2 = (r4&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16fa4;
                        run_16e00(); return;
                    }
                case 0x167dc:
                    r4 = r4 << 2;
                    r4 = r22 + r4;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x167f4:
                    r2 = r17 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                case 0x167fc:
                    addr=r28+-32568;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                case 0x16800:
                    pc=0x16800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16800() throws ExecutionException { /* 0x16800 - 0x16a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16800:
                    r3 = r3 + 1;
                    r2 = r4 + r2;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r2 & 255;
                    r4 = r4 + -1;
                    r3 = r3 & 255;
                    r4 = r4 & 255;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x168c4;
                        continue;
                    }
                case 0x16830:
                    addr=r28+-32566;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    addr=r28+-32567;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r5 + r4;
                    r4 = r4 & 255;
                    r5 = ((r4 & 0xffffffffL) < (r21 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17140;
                        run_17000(); return;
                    }
                    addr=r28+-32567;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x16854:
                    r4 = r8 + 88;
                    r5 = r4 & 255;
                    r9 = (r5&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1717c;
                        run_17000(); return;
                    }
                case 0x16868:
                    r9 = 3 << 16;
                    r5 = r5 << 2;
                    r9 = r9 + -18040;
                    r5 = r9 + r5;
                    r5 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r5;
                    return;
                case 0x16888:
                    r2 = r30 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    addr=r28+-32568;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r3 + 1;
                    r2 = r4 + r2;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r2 & 255;
                    r4 = r4 + -1;
                    r3 = r3 & 255;
                    r4 = r4 & 255;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16830;
                        continue;
                    }
                case 0x168c4:
                    r8 = r8 + 1;
                    r8 = r8 & 255;
                    r2 = r0 + 175;
                    addr=r28+-32571;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r8&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r8 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x16504;
                        run_16400(); return;
                    }
                    addr=r28+-32572;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r28+-32570;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                case 0x168e4:
                    r2 = r2 + 1;
                    r3 = 3 << 16;
                    r2 = r2 & 255;
                    r3 = r3 + -9708;
                    r4 = r3 + r2;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r0 + 255;
                    addr=r28+-32572;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r2 + r0;
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x16440;
                        run_16400(); return;
                    }
                case 0x16914:
                    r4 = 3 << 16;
                    r4 = r4 + -9648;
                    r6 = r4 + r6;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r7 = r7 + r2;
                    r2 = readPages[(r28+-32604)>>>12][((r28+-32604)>>>2)&0x3ff];
                    r21 = r7 & 255;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16970;
                        continue;
                    }
                    r2 = r23 + -9588;
                    r3 = 3 << 16;
                    r3 = r3 + -8052;
                    r6 = r2 + 256;
                case 0x1694c:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r4 >>> 1;
                    r4 = r5 - r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    if(r2 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x1694c;
                        continue;
                    }
                case 0x16970:
                    r2 = 3 << 16;
                    r4 = 3 << 16;
                    r3 = 3 << 16;
                    r5 = 3 << 16;
                    addr=r28+-32570;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + -9077;
                    r4 = r4 + -8309;
                    r3 = r3 + -8821;
                    r7 = r30 + -1;
                    r5 = r5 + -15568;
                case 0x16998:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r2 = r2 + -1;
                    r6 = r5 + r6;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r4 = r4 + -1;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r3 = r3 + -1;
                    r6 = r5 + r6;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r6 = r5 + r6;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x16998;
                        continue;
                    }
                    addr=r23+-9588;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r2 >>> 2;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32572;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x16a00:
                    pc=0x16a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16a00() throws ExecutionException { /* 0x16a00 - 0x16c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16a00:
                    r2 = r2 - r3;
                    r20 = r2 & 255;
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x173d4;
                        run_17200(); return;
                    }
                    r2 = r0 + r0;
                case 0x16a1c:
                    r14 = 3 << 16;
                    r13 = 3 << 16;
                    r3 = 3 << 16;
                    r19 = r0 + 72;
                    r18 = r0 + r0;
                    r17 = r0 + r0;
                    r16 = r0 + r0;
                    r14 = r14 + -8564;
                    r13 = r13 + -9076;
                    r25 = r3 + -8820;
                    r22 = 3 << 16;
                case 0x16a48:
                    r6 = 3 << 16;
                    r6 = r6 + -8308;
                    r3 = r6 + r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r28+-32573;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 & 248;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16ee4;
                        run_16e00(); return;
                    }
                case 0x16a70:
                    r7 = 3 << 16;
                    r4 = r7 + -8052;
                    r4 = r2 + r4;
                    r3 = r30 + r2;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r4 = r2 + r25;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r3 = r2 + r14;
                    r4 = r22 + -7796;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r3 = r2 + r13;
                    r2 = r2 + r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r2 = 3 << 16;
                    r2 = r2 + -16384;
                    r4 = r2 + r16;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r6 = r6 & 15;
                    { long hilo = (long)(r4) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = r2 + r17;
                    addr=r10+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r10 = tmp;
                    r5 = r5 & 15;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r9 = r9 << 6;
                    r3 = r3 & 15;
                    r8 = r8 << 6;
                    r7 = r7 << 6;
                    r15 = r16 << 8;
                    r12 = r17 << 8;
                    r11 = r18 << 8;
                    r4 = lo;
                    { long hilo = (long)(r10) * ((long)r5); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = lo;
                    r24 = r4 + r10;
                    r4 = 3 << 16;
                    r4 = r4 + -16640;
                    r10 = r4 + r18;
                    addr=r10+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r10 = tmp;
                    { long hilo = (long)(r10) * ((long)r3); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = lo;
                    r10 = r24 + r10;
                    if(r10 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x17368;
                        run_17200(); return;
                    }
                case 0x16b2c:
                    r10 = r10 >> 5;
                    r10 = r10 + 128;
                    r15 = r15 + r9;
                    addr=r29+32;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r10 = r15 >>> 8;
                    r10 = r10 & 255;
                    r10 = r2 + r10;
                    addr=r10+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r10 = tmp;
                    r12 = r12 + r8;
                    { long hilo = (long)(r10) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r24 = r12 >>> 8;
                    r24 = r24 & 255;
                    r24 = r2 + r24;
                    addr=r24+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r24 = tmp;
                    r11 = r11 + r7;
                    r10 = lo;
                    { long hilo = (long)(r24) * ((long)r5); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r24 = lo;
                    r24 = r10 + r24;
                    r10 = r11 >>> 8;
                    r10 = r10 & 255;
                    r10 = r4 + r10;
                    addr=r10+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r10 = tmp;
                    { long hilo = (long)(r10) * ((long)r3); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = lo;
                    r10 = r24 + r10;
                    if(r10 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x17380;
                        run_17200(); return;
                    }
                case 0x16ba8:
                    r10 = r10 >> 5;
                    r10 = r10 + 128;
                    r15 = r15 + r9;
                    addr=r29+33;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r10 = r15 >>> 8;
                    r10 = r10 & 255;
                    r10 = r2 + r10;
                    addr=r10+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r10 = tmp;
                    r12 = r12 + r8;
                    { long hilo = (long)(r10) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r24 = r12 >>> 8;
                    r24 = r24 & 255;
                    r24 = r2 + r24;
                    addr=r24+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r24 = tmp;
                    r11 = r11 + r7;
                    r10 = lo;
                    { long hilo = (long)(r24) * ((long)r5); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r24 = lo;
                    r24 = r10 + r24;
                    r10 = r11 >>> 8;
                case 0x16c00:
                    pc=0x16c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16c00() throws ExecutionException { /* 0x16c00 - 0x16e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16c00:
                    r10 = r10 & 255;
                    r10 = r4 + r10;
                    addr=r10+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r10 = tmp;
                    { long hilo = (long)(r10) * ((long)r3); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = lo;
                    r10 = r24 + r10;
                    if(r10 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x17374;
                        run_17200(); return;
                    }
                case 0x16c24:
                    r10 = r10 >> 5;
                    r10 = r10 + 128;
                    r15 = r15 + r9;
                    addr=r29+34;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r10 = r15 >>> 8;
                    r10 = r10 & 255;
                    r10 = r2 + r10;
                    addr=r10+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r10 = tmp;
                    r12 = r12 + r8;
                    { long hilo = (long)(r10) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r24 = r12 >>> 8;
                    r24 = r24 & 255;
                    r24 = r2 + r24;
                    addr=r24+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r24 = tmp;
                    r11 = r11 + r7;
                    r10 = lo;
                    { long hilo = (long)(r24) * ((long)r5); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r24 = lo;
                    r24 = r10 + r24;
                    r10 = r11 >>> 8;
                    r10 = r10 & 255;
                    r10 = r4 + r10;
                    addr=r10+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r10 = tmp;
                    { long hilo = (long)(r10) * ((long)r3); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = lo;
                    r10 = r24 + r10;
                    if(r10 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x17398;
                        run_17200(); return;
                    }
                case 0x16ca0:
                    r9 = r15 + r9;
                    r9 = r9 >>> 8;
                    r9 = r9 & 255;
                    r9 = r2 + r9;
                    addr=r9+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r9 = tmp;
                    r8 = r12 + r8;
                    { long hilo = (long)(r9) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r8 = r8 >>> 8;
                    r8 = r8 & 255;
                    r2 = r2 + r8;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r10 = r10 >> 5;
                    r10 = r10 + 128;
                    addr=r29+35;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = lo;
                    { long hilo = (long)(r2) * ((long)r5); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = r11 + r7;
                    r2 = r2 >>> 8;
                    r2 = r2 & 255;
                    r4 = r4 + r2;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r5 = lo;
                    r5 = r6 + r5;
                    { long hilo = (long)(r2) * ((long)r3); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = lo;
                    r2 = r5 + r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1738c;
                        run_17200(); return;
                    }
                case 0x16d1c:
                    r2 = r2 >> 5;
                    r4 = r2 + 128;
                    r2 = readPages[(r28+-32600)>>>12][((r28+-32600)>>>2)&0x3ff];
                    r5 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = r2 << 4;
                    r3 = r3 + r2;
                    r2 = 3 << 16;
                    r2 = r2 + -13856;
                    r2 = r3 + r2;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff];
                    r19 = r19 + -1;
                    r3 = r3 + r2;
                    r2 = r0 + 50;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r3%r2; lo = r3/r2;
                        pc=0x16d64;
                        continue;
                    }
                    hi = r3%r2; lo = r3/r2;
                    throw new ExecutionException("Break");
                case 0x16d64:
                    writePages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff] = r3;
                    r19 = r19 & 255;
                    writePages[(r28+-32600)>>>12][((r28+-32600)>>>2)&0x3ff] = r0;
                    r3 = lo;
                    r3 = r5 + r3;
                    addr=r29+32;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff];
                    r5 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r3%r2; lo = r3/r2;
                        pc=0x16d98;
                        continue;
                    }
                    hi = r3%r2; lo = r3/r2;
                    throw new ExecutionException("Break");
                case 0x16d98:
                    r3 = lo;
                    r3 = r5 + r3;
                    addr=r29+33;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff];
                    r5 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r3%r2; lo = r3/r2;
                        pc=0x16dc0;
                        continue;
                    }
                    hi = r3%r2; lo = r3/r2;
                    throw new ExecutionException("Break");
                case 0x16dc0:
                    r3 = lo;
                    r3 = r5 + r3;
                    addr=r29+34;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff];
                    r5 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r3%r2; lo = r3/r2;
                        pc=0x16de8;
                        continue;
                    }
                    hi = r3%r2; lo = r3/r2;
                    throw new ExecutionException("Break");
                case 0x16de8:
                    r3 = lo;
                    r3 = r5 + r3;
                    addr=r29+35;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    addr=r3+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff];
                case 0x16e00:
                    pc=0x16e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16e00() throws ExecutionException { /* 0x16e00 - 0x17000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16e00:
                    r5 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r3%r2; lo = r3/r2;
                        pc=0x16e10;
                        continue;
                    }
                    hi = r3%r2; lo = r3/r2;
                    throw new ExecutionException("Break");
                case 0x16e10:
                    r2 = lo;
                    r2 = r5 + r2;
                    addr=r2+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16e44;
                        continue;
                    }
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r21 = r21 + -1;
                    r2 = r2 + 1;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r21 = r21 & 255;
                case 0x16e38:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x166d4;
                        run_16600(); return;
                    }
                    addr=r28+-32756;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r19 = tmp;
                case 0x16e44:
                    addr=r28+-32572;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 + -1;
                    r2 = r2 & 255;
                    addr=r28+-32572;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17258;
                        run_17200(); return;
                    }
                    r20 = r20 + -1;
                    r20 = r20 & 255;
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16e80;
                        continue;
                    }
                    addr=r28+-32573;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17234;
                        run_17200(); return;
                    }
                case 0x16e80:
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = 3 << 16;
                    r3 = r4 + -8052;
                    r3 = r2 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r6 = 3 << 16;
                    r16 = r16 + r3;
                    r3 = r2 + r25;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r6 = r6 + -8308;
                    r17 = r17 + r3;
                    r3 = r22 + -7796;
                    r3 = r2 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r16 = r16 & 255;
                    r18 = r18 + r3;
                    r3 = r6 + r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r17 = r17 & 255;
                    addr=r28+-32573;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 & 248;
                    r18 = r18 & 255;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16a70;
                        run_16a00(); return;
                    }
                case 0x16ee4:
                    r4 = r29 + 40;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r13;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r14;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r25;
                    /* Next insn is delay slot */ 
                    r31=0x16efc;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x16efc:
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r21 = r21 + -2;
                    r2 = r2 + 2;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r21 = r21 & 255;
                    r13 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r14 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r25 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x16e38;
                    continue;
                case 0x16f24:
                    r5 = r16 + -7796;
                    r5 = r5 + r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x167fc;
                    run_16600(); return;
                case 0x16f38:
                    r5 = 3 << 16;
                    r5 = r5 + -8820;
                    r5 = r5 + r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x167fc;
                    run_16600(); return;
                case 0x16f50:
                    r5 = 3 << 16;
                    r5 = r5 + -8052;
                    r5 = r5 + r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x167fc;
                    run_16600(); return;
                case 0x16f68:
                    r2 = r23 + -9588;
                    r2 = r3 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x167fc;
                    run_16600(); return;
                case 0x16f7c:
                    r2 = r18 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x167fc;
                    run_16600(); return;
                case 0x16f8c:
                    r5 = r17 + r3;
                    r4 = r4 & 255;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = (r4&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x167dc;
                        run_16600(); return;
                    }
                case 0x16fa4:
                    r4 = r20 + -18140;
                    /* Next insn is delay slot */ 
                    r31=0x16fb0;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x16fb0:
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r28+-32571;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x167fc;
                    run_16600(); return;
                case 0x16fc4:
                    r5 = r30 + r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x167cc;
                    run_16600(); return;
                case 0x16fd4:
                    r5 = r16 + -7796;
                    r5 = r5 + r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x167cc;
                    run_16600(); return;
                case 0x16fe8:
                    r5 = 3 << 16;
                    r5 = r5 + -8820;
                    r5 = r5 + r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x167cc;
                    run_16600(); return;
                case 0x17000:
                    pc=0x17000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17000() throws ExecutionException { /* 0x17000 - 0x17200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17000:
                    r5 = 3 << 16;
                    r5 = r5 + -8052;
                    r5 = r5 + r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x167cc;
                    run_16600(); return;
                case 0x17018:
                    r5 = r23 + -9588;
                    r5 = r3 + r5;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x167cc;
                    run_16600(); return;
                case 0x1702c:
                    r5 = r18 + r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x167cc;
                    run_16600(); return;
                case 0x1703c:
                    r5 = 3 << 16;
                    r7 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r5 = r5 + -7796;
                    r2 = r5 + r7;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x17058:
                    r5 = r5 + r19;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r8 = r0 + 171;
                    r4 = r0 + 259;
                    /* Next insn is delay slot */ 
                    pc=0x16750;
                    run_16600(); return;
                case 0x17070:
                    r5 = 3 << 16;
                    r6 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r5 = r5 + -8820;
                    r2 = r5 + r6;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x1708c:
                    r5 = r5 + r19;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r8 = r0 + 170;
                    r4 = r0 + 258;
                    /* Next insn is delay slot */ 
                    pc=0x16750;
                    run_16600(); return;
                case 0x170a4:
                    r5 = 3 << 16;
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r5 = r5 + -8052;
                    r2 = r5 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x170c0:
                    r5 = r5 + r19;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r8 = r0 + 169;
                    r4 = r0 + 257;
                    /* Next insn is delay slot */ 
                    pc=0x16750;
                    run_16600(); return;
                case 0x170d8:
                    r2 = 3 << 16;
                    r5 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r3 = r2 + -9076;
                    r2 = r3 + r5;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x170f4:
                    r3 = r3 + r19;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r8 = r0 + 174;
                    r4 = r0 + 262;
                    /* Next insn is delay slot */ 
                    pc=0x16750;
                    run_16600(); return;
                case 0x1710c:
                    r3 = 3 << 16;
                    r18 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r3 = r3 + -8564;
                    r2 = r3 + r18;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x17128:
                    r3 = r3 + r19;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r8 = r0 + 173;
                    r4 = r0 + 261;
                    /* Next insn is delay slot */ 
                    pc=0x16750;
                    run_16600(); return;
                case 0x17140:
                    r4 = r4 - r21;
                    addr=r28+-32567;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32569;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x171a0;
                        continue;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16854;
                        run_16800(); return;
                    }
                    r4 = r8 + 88;
                    r5 = r4 & 255;
                    r2 = r2 + 1;
                    r9 = (r5&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    r2 = r2 & 255;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16868;
                        run_16800(); return;
                    }
                case 0x1717c:
                    r4 = 3 << 16;
                    r4 = r4 + -18116;
                    /* Next insn is delay slot */ 
                    r31=0x1718c;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x1718c:
                    addr=r28+-32571;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r8 + 88;
                    /* Next insn is delay slot */ 
                    pc=0x167cc;
                    run_16600(); return;
                case 0x171a0:
                    r2 = r2 + -1;
                    r2 = r2 & 255;
                    /* Next insn is delay slot */ 
                    pc=0x16854;
                    run_16800(); return;
                case 0x171b0:
                    addr=r28+-32572;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r18 = 3 << 16;
                    r18 = r18 + -9648;
                    r2 = r18 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r28+-32570;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r4 >>> 1;
                    r2 = r2 >>> 1;
                    r21 = r2 + r4;
                    r2 = r2 + r5;
                    r4 = r5 - r4;
                    r3 = r23 + -9588;
                    r4 = r4 & 255;
                    r2 = r2 & 255;
                    r2 = r2 + r3;
                    r3 = r4 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x17200:
                    pc=0x17200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17200() throws ExecutionException { /* 0x17200 - 0x17400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17200:
                    r2 = r2 - r3;
                    r2 = r2 & 255;
                    r3 = r2 & 128;
                    r2 = r2 << 24;
                    r2 = r2 >> 24;
                    addr=r28+-32569;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r0 + 256;
                    r3 = r2 + r0;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x16778;
                        run_16600(); return;
                    }
                case 0x17228:
                    r3 = r0 - r2;
                    /* Next insn is delay slot */ 
                    pc=0x16778;
                    run_16600(); return;
                case 0x17234:
                    r4 = r29 + 40;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r13;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r14;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r25;
                    /* Next insn is delay slot */ 
                    r31=0x1724c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1724c:
                    r13 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r14 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r25 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                case 0x17258:
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r23 + -9588;
                    r3 = r2 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r18 = r0 + r0;
                    r4 = r3 >>> 2;
                    addr=r28+-32572;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 - r4;
                    r20 = r3 & 255;
                    r17 = r0 + r0;
                    r16 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x16a48;
                    run_16a00(); return;
                case 0x1728c:
                    r4 = r20 + -18140;
                    /* Next insn is delay slot */ 
                    r31=0x17298;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x17298:
                    addr=r28+-32571;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r8 + 88;
                    r2 = r4 & 255;
                    r3 = (r2&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r19&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x172f0;
                        continue;
                    }
                    r6 = 3 << 16;
                    r2 = r2 << 2;
                    r6 = r6 + -18012;
                    r2 = r6 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x172d8:
                    r2 = r23 + -9588;
                    r2 = r19 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x16750;
                    run_16600(); return;
                case 0x172f0:
                    r4 = r20 + -18140;
                    /* Next insn is delay slot */ 
                    r31=0x172fc;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x172fc:
                    addr=r28+-32571;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r2 = r0 + r0;
                    r3 = r0 + r0;
                    r4 = r8 + 88;
                    /* Next insn is delay slot */ 
                    pc=0x16750;
                    run_16600(); return;
                case 0x17314:
                    r18 = 3 << 16;
                    r18 = r18 + -15728;
                    r3 = r18 + r5;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r3 = 3 << 16;
                    r3 = r3 + -15808;
                    r5 = r5 + r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x16490;
                    run_16400(); return;
                case 0x1733c:
                    r18 = 3 << 16;
                    r18 = r18 + -15728;
                    r5 = r18 + r5;
                    r3 = r18 + r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x16490;
                    run_16400(); return;
                case 0x1735c:
                    r7 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x168e4;
                    run_16800(); return;
                case 0x17368:
                    r10 = r10 + 31;
                    /* Next insn is delay slot */ 
                    pc=0x16b2c;
                    run_16a00(); return;
                case 0x17374:
                    r10 = r10 + 31;
                    /* Next insn is delay slot */ 
                    pc=0x16c24;
                    run_16c00(); return;
                case 0x17380:
                    r10 = r10 + 31;
                    /* Next insn is delay slot */ 
                    pc=0x16ba8;
                    run_16a00(); return;
                case 0x1738c:
                    r2 = r2 + 31;
                    /* Next insn is delay slot */ 
                    pc=0x16d1c;
                    run_16c00(); return;
                case 0x17398:
                    r10 = r10 + 31;
                    /* Next insn is delay slot */ 
                    pc=0x16ca0;
                    run_16c00(); return;
                case 0x173a4:
                    r4 = 3 << 16;
                    r4 = r4 + -9708;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r0 + 255;
                    addr=r28+-32567;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r20&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32572;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x16430;
                        run_16400(); return;
                    }
                case 0x173c4:
                    r7 = r0 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x16914;
                    run_16800(); return;
                case 0x173d4:
                    r2 = 3 << 16;
                    r2 = r2 + -8564;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = 3 << 16;
                    r2 = r2 + -9076;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r5 = 3 << 16;
                    r2 = 3 << 16;
                    r2 = r2 + -9588;
                    r4 = r5 + -8308;
                    r6 = 3 << 16;
                case 0x17400:
                    pc=0x17400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17400() throws ExecutionException { /* 0x17400 - 0x17600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17400:
                    r5 = 3 << 16;
                    r7 = 3 << 16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r30;
                    r5 = r5 + -8052;
                    r6 = r6 + -8820;
                    r7 = r7 + -7796;
                    /* Next insn is delay slot */ 
                    r31=0x17424;
                    pc=0x18c00;
                    run_18c00(); return;
                case 0x17424:
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x16a1c;
                    run_16a00(); return;
                case 0x17430:
                    r3 = 3 << 16;
                    r2 = r0 + r0;
                    r3 = r3 + -8564;
                    /* Next insn is delay slot */ 
                    pc=0x17128;
                    run_17000(); return;
                case 0x17444:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x16740;
                    run_16600(); return;
                case 0x17450:
                    r5 = 3 << 16;
                    r2 = r0 + r0;
                    r5 = r5 + -7796;
                    /* Next insn is delay slot */ 
                    pc=0x17058;
                    run_17000(); return;
                case 0x17464:
                    r5 = 3 << 16;
                    r2 = r0 + r0;
                    r5 = r5 + -8820;
                    /* Next insn is delay slot */ 
                    pc=0x1708c;
                    run_17000(); return;
                case 0x17478:
                    r5 = 3 << 16;
                    r2 = r0 + r0;
                    r5 = r5 + -8052;
                    /* Next insn is delay slot */ 
                    pc=0x170c0;
                    run_17000(); return;
                case 0x1748c:
                    r7 = 3 << 16;
                    r2 = r0 + r0;
                    r3 = r7 + -9076;
                    /* Next insn is delay slot */ 
                    pc=0x170f4;
                    run_17000(); return;
                case 0x17600:
                    pc=0x17600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17600() throws ExecutionException { /* 0x17600 - 0x17800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17600:
                    r29 = r29 + -136;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r20;
                    r20 = r5 & 255;
                    r5 = 3 << 16;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r16;
                    r5 = r5 + -17984;
                    r16 = r4 & 255;
                    r6 = r0 + 30;
                    r4 = r29 + 48;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r31;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r21;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r19;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r18;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r17;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r23;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r22;
                    /* Next insn is delay slot */ 
                    r31=0x17648;
                    pc=0x223e0;
                    run_22200(); return;
                case 0x17648:
                    r5 = 3 << 16;
                    r4 = r29 + 16;
                    r5 = r5 + -17952;
                    r6 = r0 + 30;
                    /* Next insn is delay slot */ 
                    r31=0x17660;
                    pc=0x223e0;
                    run_22200(); return;
                case 0x17660:
                    r4 = r29 + 88;
                    r5 = r28 + -32752;
                    r6 = r0 + 6;
                    /* Next insn is delay slot */ 
                    r31=0x17674;
                    pc=0x223e0;
                    run_22200(); return;
                case 0x17674:
                    r4 = r29 + 80;
                    r5 = r28 + -32744;
                    r6 = r0 + 6;
                    /* Next insn is delay slot */ 
                    r31=0x17688;
                    pc=0x223e0;
                    run_22200(); return;
                case 0x17688:
                    r8 = r16 >>> 1;
                    r9 = r20 >>> 1;
                    r21 = r8 & 1;
                    r10 = r20 & 1;
                    r8 = r8 >>> 1;
                    r20 = r9 & 1;
                    r9 = r9 >>> 1;
                    r25 = r8 & 1;
                    r11 = r9 & 1;
                    r8 = r8 >>> 1;
                    r9 = r9 >>> 1;
                    r24 = r16 & 1;
                    r12 = r9 & 1;
                    r16 = r8 & 1;
                    r9 = r9 >>> 1;
                    r8 = r8 >>> 1;
                    r17 = r8 & 1;
                    r13 = r9 & 1;
                    r8 = r8 >>> 1;
                    r9 = r9 >>> 1;
                    r18 = r8 & 1;
                    r14 = r9 & 1;
                    r8 = r8 >>> 1;
                    r9 = r9 >>> 1;
                    r6 = 3 << 16;
                    r5 = 3 << 16;
                    r19 = r8 & 1;
                    r15 = r9 & 1;
                    r8 = r8 >>> 1;
                    r9 = r9 >>> 1;
                    r2 = r0 + r0;
                    r4 = r0 + r0;
                    r6 = r6 + -13596;
                    r5 = r5 + -13676;
                    r7 = r0 + 25;
                    /* Next insn is delay slot */ 
                    pc=0x17750;
                    continue;
                case 0x1771c:
                    r3 = r6 + r2;
                    r22 = r29 + 16;
                    addr=r3+5;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r22 + r2;
                    addr=r3+5;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x178bc;
                        run_17800(); return;
                    }
                case 0x1773c:
                    r3 = r5 + r2;
                    r2 = r2 + 1;
                    addr=r3+5;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x17a04;
                        run_17a00(); return;
                    }
                case 0x17750:
                    r22 = r29 + 48;
                    r3 = r22 + r2;
                    addr=r3+5;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1771c;
                        continue;
                    }
                    if(r24 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17de4;
                        run_17c00(); return;
                    }
                    r4 = r0 + r0;
                case 0x17774:
                    r4 = r4 >>> 1;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17d74;
                        run_17c00(); return;
                    }
                    r22 = r4 + r3;
                    r4 = r22 & 255;
                    r22 = r22 < 256 ? 1 : 0;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17d74;
                        run_17c00(); return;
                    }
                    r4 = r4 >>> 1;
                    r22 = r0 + -128;
                    r4 = r4 | r22;
                    r4 = r4 & 255;
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17d8c;
                        run_17c00(); return;
                    }
                case 0x177ac:
                    r22 = r4 + r3;
                    r4 = r22 & 255;
                    r22 = r22 < 256 ? 1 : 0;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17d8c;
                        run_17c00(); return;
                    }
                    r4 = r4 >>> 1;
                    r22 = r0 + -128;
                    r4 = r4 | r22;
                    r4 = r4 & 255;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17da4;
                        run_17c00(); return;
                    }
                case 0x177d8:
                    r22 = r4 + r3;
                    r4 = r22 & 255;
                    r22 = r22 < 256 ? 1 : 0;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17da4;
                        run_17c00(); return;
                    }
                    r4 = r4 >>> 1;
                    r22 = r0 + -128;
                    r4 = r4 | r22;
                    r4 = r4 & 255;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17dbc;
                        run_17c00(); return;
                    }
                case 0x17800:
                    pc=0x17800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17800() throws ExecutionException { /* 0x17800 - 0x17a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17800:
                case 0x17804:
                    r22 = r4 + r3;
                    r4 = r22 & 255;
                    r22 = r22 < 256 ? 1 : 0;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17dbc;
                        run_17c00(); return;
                    }
                    r4 = r4 >>> 1;
                    r22 = r0 + -128;
                    r4 = r4 | r22;
                    r4 = r4 & 255;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17dd4;
                        run_17c00(); return;
                    }
                case 0x17830:
                    r22 = r4 + r3;
                    r4 = r22 & 255;
                    r22 = r22 < 256 ? 1 : 0;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17dd4;
                        run_17c00(); return;
                    }
                    r4 = r4 >>> 1;
                    r22 = r0 + -128;
                case 0x1784c:
                    r4 = r4 | r22;
                    r4 = r4 & 255;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17d64;
                        run_17c00(); return;
                    }
                    r22 = r4 + r3;
                    r4 = r22 & 255;
                    r22 = r22 < 256 ? 1 : 0;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17d64;
                        run_17c00(); return;
                    }
                    r4 = r4 >>> 1;
                    r22 = r0 + -128;
                case 0x17878:
                    r4 = r4 | r22;
                    r4 = r4 & 255;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17890;
                        continue;
                    }
                    r3 = r4 + r3;
                    r4 = r3 & 255;
                case 0x17890:
                    r4 = r4 >>> 1;
                    r4 = r4 << 1;
                    r3 = r6 + r2;
                    r4 = r4 & 254;
                    r22 = r29 + 16;
                    addr=r3+5;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r22 + r2;
                    addr=r3+5;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1773c;
                        run_17600(); return;
                    }
                case 0x178bc:
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17df0;
                        run_17c00(); return;
                    }
                    r4 = r0 + r0;
                case 0x178c8:
                    r4 = r4 >>> 1;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17d54;
                        run_17c00(); return;
                    }
                    r22 = r4 + r3;
                    r4 = r22 & 255;
                    r22 = r22 < 256 ? 1 : 0;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17d54;
                        run_17c00(); return;
                    }
                    r4 = r4 >>> 1;
                    r22 = r0 + -128;
                case 0x178f0:
                    r4 = r4 | r22;
                    r4 = r4 & 255;
                    if(r11 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17d44;
                        run_17c00(); return;
                    }
                    r22 = r4 + r3;
                    r4 = r22 & 255;
                    r22 = r22 < 256 ? 1 : 0;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17d44;
                        run_17c00(); return;
                    }
                    r4 = r4 >>> 1;
                    r22 = r0 + -128;
                case 0x1791c:
                    r4 = r4 | r22;
                    r4 = r4 & 255;
                    if(r12 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17d34;
                        run_17c00(); return;
                    }
                    r22 = r4 + r3;
                    r4 = r22 & 255;
                    r22 = r22 < 256 ? 1 : 0;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17d34;
                        run_17c00(); return;
                    }
                    r4 = r4 >>> 1;
                    r22 = r0 + -128;
                case 0x17948:
                    r4 = r4 | r22;
                    r4 = r4 & 255;
                    if(r13 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17d24;
                        run_17c00(); return;
                    }
                    r22 = r4 + r3;
                    r4 = r22 & 255;
                    r22 = r22 < 256 ? 1 : 0;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17d24;
                        run_17c00(); return;
                    }
                    r4 = r4 >>> 1;
                    r22 = r0 + -128;
                case 0x17974:
                    r4 = r4 | r22;
                    r4 = r4 & 255;
                    if(r14 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17d14;
                        run_17c00(); return;
                    }
                    r22 = r4 + r3;
                    r4 = r22 & 255;
                    r22 = r22 < 256 ? 1 : 0;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17d14;
                        run_17c00(); return;
                    }
                    r4 = r4 >>> 1;
                    r22 = r0 + -128;
                case 0x179a0:
                    r4 = r4 | r22;
                    r4 = r4 & 255;
                    if(r15 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17d04;
                        run_17c00(); return;
                    }
                    r22 = r4 + r3;
                    r4 = r22 & 255;
                    r22 = r22 < 256 ? 1 : 0;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17d04;
                        run_17c00(); return;
                    }
                    r4 = r4 >>> 1;
                    r22 = r0 + -128;
                case 0x179cc:
                    r4 = r4 | r22;
                    r4 = r4 & 255;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x179e4;
                        continue;
                    }
                    r3 = r4 + r3;
                    r4 = r3 & 255;
                case 0x179e4:
                    r4 = r4 >>> 1;
                    r4 = r4 << 1;
                    r3 = r5 + r2;
                    r4 = r4 & 254;
                    r2 = r2 + 1;
                    addr=r3+5;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x17750;
                        run_17600(); return;
                    }
                case 0x17a00:
                    pc=0x17a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17a00() throws ExecutionException { /* 0x17a00 - 0x17c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17a00:
                case 0x17a04:
                    r2 = r0 + r0;
                    r22 = r0 + 6;
                case 0x17a0c:
                    r4 = r29 + 88;
                    r3 = r4 + r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r24 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17ef8;
                        run_17e00(); return;
                    }
                    r4 = r0 + r0;
                case 0x17a24:
                    r4 = r4 >>> 1;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17edc;
                        run_17e00(); return;
                    }
                    r7 = r4 + r3;
                    r4 = r7 & 255;
                    r7 = r7 < 256 ? 1 : 0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17edc;
                        run_17e00(); return;
                    }
                    r4 = r4 >>> 1;
                    r7 = r0 + -128;
                case 0x17a4c:
                    r4 = r4 | r7;
                    r4 = r4 & 255;
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17ecc;
                        run_17e00(); return;
                    }
                    r7 = r4 + r3;
                    r4 = r7 & 255;
                    r7 = r7 < 256 ? 1 : 0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17ecc;
                        run_17e00(); return;
                    }
                    r4 = r4 >>> 1;
                    r7 = r0 + -128;
                case 0x17a78:
                    r4 = r4 | r7;
                    r4 = r4 & 255;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17e74;
                        run_17e00(); return;
                    }
                    r7 = r4 + r3;
                    r4 = r7 & 255;
                    r7 = r7 < 256 ? 1 : 0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17e74;
                        run_17e00(); return;
                    }
                    r4 = r4 >>> 1;
                    r7 = r0 + -128;
                    r4 = r4 | r7;
                    r4 = r4 & 255;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17e8c;
                        run_17e00(); return;
                    }
                case 0x17ab4:
                    r7 = r4 + r3;
                    r4 = r7 & 255;
                    r7 = r7 < 256 ? 1 : 0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17e8c;
                        run_17e00(); return;
                    }
                    r4 = r4 >>> 1;
                    r7 = r0 + -128;
                    r4 = r4 | r7;
                    r4 = r4 & 255;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17ea4;
                        run_17e00(); return;
                    }
                case 0x17ae0:
                    r7 = r4 + r3;
                    r4 = r7 & 255;
                    r7 = r7 < 256 ? 1 : 0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17ea4;
                        run_17e00(); return;
                    }
                    r4 = r4 >>> 1;
                    r7 = r0 + -128;
                    r4 = r4 | r7;
                    r4 = r4 & 255;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17ebc;
                        run_17e00(); return;
                    }
                case 0x17b0c:
                    r7 = r4 + r3;
                    r4 = r7 & 255;
                    r7 = r7 < 256 ? 1 : 0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17ebc;
                        run_17e00(); return;
                    }
                    r4 = r4 >>> 1;
                    r7 = r0 + -128;
                case 0x17b28:
                    r4 = r4 | r7;
                    r4 = r4 & 255;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17b40;
                        continue;
                    }
                    r3 = r4 + r3;
                    r4 = r3 & 255;
                case 0x17b40:
                    r4 = r4 >>> 1;
                    r3 = r6 + r2;
                    r4 = r4 << 1;
                    addr=r3+48;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r29 + 80;
                    r3 = r4 + r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17eec;
                        run_17e00(); return;
                    }
                    r4 = r3 + r0;
                case 0x17b68:
                    r7 = r4 >>> 1;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17e64;
                        run_17e00(); return;
                    }
                    r4 = r7 + r3;
                    r7 = r4 & 255;
                    r4 = r4 < 256 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17e60;
                        run_17e00(); return;
                    }
                    r23 = r7 >>> 1;
                    r4 = r7 + r0;
                    r7 = r0 + -128;
                case 0x17b94:
                    r7 = r7 | r23;
                    r7 = r7 & 255;
                    if(r11 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17e50;
                        run_17e00(); return;
                    }
                    r4 = r7 + r3;
                    r7 = r4 & 255;
                    r4 = r4 < 256 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17e4c;
                        run_17e00(); return;
                    }
                    r23 = r7 >>> 1;
                    r4 = r7 + r0;
                    r7 = r0 + -128;
                case 0x17bc4:
                    r7 = r7 | r23;
                    r7 = r7 & 255;
                    if(r12 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17e3c;
                        run_17e00(); return;
                    }
                    r4 = r7 + r3;
                    r7 = r4 & 255;
                    r4 = r4 < 256 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17e38;
                        run_17e00(); return;
                    }
                    r23 = r7 >>> 1;
                    r4 = r7 + r0;
                    r7 = r0 + -128;
                case 0x17bf4:
                    r7 = r7 | r23;
                    r7 = r7 & 255;
                    if(r13 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17e28;
                        run_17e00(); return;
                    }
                case 0x17c00:
                    pc=0x17c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17c00() throws ExecutionException { /* 0x17c00 - 0x17e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17c00:
                    r4 = r7 + r3;
                    r7 = r4 & 255;
                    r4 = r4 < 256 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17e24;
                        run_17e00(); return;
                    }
                    r23 = r7 >>> 1;
                    r4 = r7 + r0;
                    r7 = r0 + -128;
                case 0x17c24:
                    r7 = r7 | r23;
                    r7 = r7 & 255;
                    if(r14 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17e14;
                        run_17e00(); return;
                    }
                    r4 = r7 + r3;
                    r7 = r4 & 255;
                    r4 = r4 < 256 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17e10;
                        run_17e00(); return;
                    }
                    r23 = r7 >>> 1;
                    r4 = r7 + r0;
                    r7 = r0 + -128;
                case 0x17c54:
                    r7 = r7 | r23;
                    r7 = r7 & 255;
                    if(r15 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17e00;
                        run_17e00(); return;
                    }
                    r4 = r7 + r3;
                    r7 = r4 & 255;
                    r4 = r4 < 256 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17dfc;
                        continue;
                    }
                    r23 = r7 >>> 1;
                    r4 = r7 + r0;
                    r7 = r0 + -128;
                case 0x17c84:
                    r7 = r7 | r23;
                    r7 = r7 & 255;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17cac;
                        continue;
                    }
                    r3 = r7 + r3;
                    r7 = r3 & 255;
                    r3 = r3 < 256 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17f04;
                        run_17e00(); return;
                    }
                    r4 = r7 + r0;
                case 0x17cac:
                    r23 = r7 >>> 1;
                case 0x17cb0:
                    r3 = r5 + r2;
                    r7 = r23 << 1;
                    r2 = r2 + 1;
                    addr=r3+48;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r22) {
                        /* Next insn is delay slot */ 
                        pc=0x17a0c;
                        run_17a00(); return;
                    }
                    r31 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r23 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r22 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r21 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r20 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r19 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r18 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r17 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r16 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    addr=r28+-32576;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32574;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32575;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r29 = r29 + 136;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17d04:
                    r4 = r4 >>> 1;
                    r22 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x179cc;
                    run_17800(); return;
                case 0x17d14:
                    r4 = r4 >>> 1;
                    r22 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x179a0;
                    run_17800(); return;
                case 0x17d24:
                    r4 = r4 >>> 1;
                    r22 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x17974;
                    run_17800(); return;
                case 0x17d34:
                    r4 = r4 >>> 1;
                    r22 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x17948;
                    run_17800(); return;
                case 0x17d44:
                    r4 = r4 >>> 1;
                    r22 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1791c;
                    run_17800(); return;
                case 0x17d54:
                    r4 = r4 >>> 1;
                    r22 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x178f0;
                    run_17800(); return;
                case 0x17d64:
                    r4 = r4 >>> 1;
                    r22 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x17878;
                    run_17800(); return;
                case 0x17d74:
                    r4 = r4 >>> 1;
                    r22 = r0 + r0;
                    r4 = r4 | r22;
                    r4 = r4 & 255;
                    if(r25 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x177ac;
                        run_17600(); return;
                    }
                case 0x17d8c:
                    r4 = r4 >>> 1;
                    r22 = r0 + r0;
                    r4 = r4 | r22;
                    r4 = r4 & 255;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x177d8;
                        run_17600(); return;
                    }
                case 0x17da4:
                    r4 = r4 >>> 1;
                    r22 = r0 + r0;
                    r4 = r4 | r22;
                    r4 = r4 & 255;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17804;
                        run_17800(); return;
                    }
                case 0x17dbc:
                    r4 = r4 >>> 1;
                    r22 = r0 + r0;
                    r4 = r4 | r22;
                    r4 = r4 & 255;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17830;
                        run_17800(); return;
                    }
                case 0x17dd4:
                    r4 = r4 >>> 1;
                    r22 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1784c;
                    run_17800(); return;
                case 0x17de4:
                    r4 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x17774;
                    run_17600(); return;
                case 0x17df0:
                    r4 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x178c8;
                    run_17800(); return;
                case 0x17dfc:
                    r4 = r7 + r0;
                case 0x17e00:
                    pc=0x17e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17e00() throws ExecutionException { /* 0x17e00 - 0x18000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17e00:
                    r23 = r7 >>> 1;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x17c84;
                    run_17c00(); return;
                case 0x17e10:
                    r4 = r7 + r0;
                case 0x17e14:
                    r23 = r7 >>> 1;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x17c54;
                    run_17c00(); return;
                case 0x17e24:
                    r4 = r7 + r0;
                case 0x17e28:
                    r23 = r7 >>> 1;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x17c24;
                    run_17c00(); return;
                case 0x17e38:
                    r4 = r7 + r0;
                case 0x17e3c:
                    r23 = r7 >>> 1;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x17bf4;
                    run_17a00(); return;
                case 0x17e4c:
                    r4 = r7 + r0;
                case 0x17e50:
                    r23 = r7 >>> 1;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x17bc4;
                    run_17a00(); return;
                case 0x17e60:
                    r4 = r7 + r0;
                case 0x17e64:
                    r23 = r7 >>> 1;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x17b94;
                    run_17a00(); return;
                case 0x17e74:
                    r4 = r4 >>> 1;
                    r7 = r0 + r0;
                    r4 = r4 | r7;
                    r4 = r4 & 255;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17ab4;
                        run_17a00(); return;
                    }
                case 0x17e8c:
                    r4 = r4 >>> 1;
                    r7 = r0 + r0;
                    r4 = r4 | r7;
                    r4 = r4 & 255;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17ae0;
                        run_17a00(); return;
                    }
                case 0x17ea4:
                    r4 = r4 >>> 1;
                    r7 = r0 + r0;
                    r4 = r4 | r7;
                    r4 = r4 & 255;
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17b0c;
                        run_17a00(); return;
                    }
                case 0x17ebc:
                    r4 = r4 >>> 1;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x17b28;
                    run_17a00(); return;
                case 0x17ecc:
                    r4 = r4 >>> 1;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x17a78;
                    run_17a00(); return;
                case 0x17edc:
                    r4 = r4 >>> 1;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x17a4c;
                    run_17a00(); return;
                case 0x17eec:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x17b68;
                    run_17a00(); return;
                case 0x17ef8:
                    r4 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x17a24;
                    run_17a00(); return;
                case 0x17f04:
                    r23 = r7 >>> 1;
                    r4 = r7 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x17cb0;
                    run_17c00(); return;
                case 0x18000:
                    pc=0x18000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18000() throws ExecutionException { /* 0x18000 - 0x18200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18000:
                    r29 = r29 + -64;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r20;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r19;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r18;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r17;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1821c;
                        run_18200(); return;
                    }
                    r4 = 3 << 16;
                    r17 = r6 + r0;
                    r20 = r5 + r0;
                    r4 = r4 + -15536;
                    r5 = r0 + 4;
                    r6 = r0 + 1;
                    r7 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1804c;
                    pc=0x1c400;
                    run_1c400(); return;
                case 0x1804c:
                    r2 = r17 + 28;
                    r4 = r2 << 8;
                    r19 = 255 << 16;
                    r3 = r2 >> 8;
                    r4 = r4 & r19;
                    r3 = r3 & 65280;
                    r3 = r4 | r3;
                    r4 = r2 >>> 24;
                    r3 = r3 | r4;
                    r2 = r2 << 24;
                    r2 = r3 | r2;
                    r4 = r29 + 28;
                    r5 = r0 + 4;
                    r6 = r0 + 1;
                    r7 = r16 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x18094;
                    pc=0x1c400;
                    run_1c400(); return;
                case 0x18094:
                    r4 = 3 << 16;
                    r4 = r4 + -15528;
                    r5 = r0 + 4;
                    r6 = r0 + 1;
                    r7 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x180b0;
                    pc=0x1c400;
                    run_1c400(); return;
                case 0x180b0:
                    r4 = 3 << 16;
                    r4 = r4 + -15520;
                    r5 = r0 + 4;
                    r6 = r0 + 1;
                    r7 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x180cc;
                    pc=0x1c400;
                    run_1c400(); return;
                case 0x180cc:
                    r2 = 4096 << 16;
                    r4 = r29 + 24;
                    r5 = r0 + 4;
                    r6 = r0 + 1;
                    r7 = r16 + r0;
                    r18 = r0 + 256;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x180f0;
                    pc=0x1c400;
                    run_1c400(); return;
                case 0x180f0:
                    r4 = r29 + 38;
                    r5 = r0 + 2;
                    r6 = r0 + 1;
                    r7 = r16 + r0;
                    addr=r29+38;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r18&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x1810c;
                    pc=0x1c400;
                    run_1c400(); return;
                case 0x1810c:
                    r4 = r29 + 36;
                    r5 = r0 + 2;
                    r6 = r0 + 1;
                    r7 = r16 + r0;
                    addr=r29+36;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r18&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x18128;
                    pc=0x1c400;
                    run_1c400(); return;
                case 0x18128:
                    r2 = 8790 << 16;
                    r4 = r29 + 20;
                    r5 = r0 + 4;
                    r6 = r0 + 1;
                    r7 = r16 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x18148;
                    pc=0x1c400;
                    run_1c400(); return;
                case 0x18148:
                    r4 = r29 + 20;
                    r5 = r0 + 4;
                    r6 = r0 + 1;
                    r7 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18160;
                    pc=0x1c400;
                    run_1c400(); return;
                case 0x18160:
                    r4 = r29 + 34;
                    r5 = r0 + 2;
                    r6 = r0 + 1;
                    r7 = r16 + r0;
                    addr=r29+34;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r18&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x1817c;
                    pc=0x1c400;
                    run_1c400(); return;
                case 0x1817c:
                    r2 = r0 + 2048;
                    r4 = r29 + 32;
                    r5 = r0 + 2;
                    r6 = r0 + 1;
                    r7 = r16 + r0;
                    addr=r29+32;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x1819c;
                    pc=0x1c400;
                    run_1c400(); return;
                case 0x1819c:
                    r4 = 3 << 16;
                    r4 = r4 + -15512;
                    r5 = r0 + 4;
                    r6 = r0 + 1;
                    r7 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x181b8;
                    pc=0x1c400;
                    run_1c400(); return;
                case 0x181b8:
                    r2 = r17 << 8;
                    r19 = r2 & r19;
                    r2 = r17 >> 8;
                    r2 = r2 & 65280;
                    r19 = r19 | r2;
                    r2 = r17 >>> 24;
                    r19 = r19 | r2;
                    r2 = r17 << 24;
                    r19 = r19 | r2;
                    r4 = r29 + 16;
                    r5 = r0 + 4;
                    r6 = r0 + 1;
                    r7 = r16 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    r31=0x181f8;
                    pc=0x1c400;
                    run_1c400(); return;
                case 0x181f8:
                    r4 = r20 + r0;
                    r5 = r17 + r0;
                case 0x18200:
                    pc=0x18200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18200() throws ExecutionException { /* 0x18200 - 0x18400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18200:
                    r6 = r0 + 1;
                    r7 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18210;
                    pc=0x1c400;
                    run_1c400(); return;
                case 0x18210:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1821c;
                    pc=0x19800;
                    run_19800(); return;
                case 0x1821c:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r20 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r19 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18400:
                    pc=0x18400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18400() throws ExecutionException { /* 0x18400 - 0x18600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18400:
                    r29 = r29 + -320;
                    r6 = r0 + 256;
                    writePages[(r29+288)>>>12][((r29+288)>>>2)&0x3ff] = r18;
                    writePages[(r29+284)>>>12][((r29+284)>>>2)&0x3ff] = r17;
                    r18 = r5 + r0;
                    r17 = r4 + r0;
                    r5 = r0 + r0;
                    r4 = r29 + 16;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r31;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r30;
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r23;
                    writePages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff] = r22;
                    writePages[(r29+300)>>>12][((r29+300)>>>2)&0x3ff] = r21;
                    writePages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff] = r20;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r19;
                    writePages[(r29+280)>>>12][((r29+280)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x18448;
                    pc=0x223f0;
                    run_22200(); return;
                case 0x18448:
                    r2 = r17 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18780;
                        run_18600(); return;
                    }
                    r19 = 3 << 16;
                    r21 = 3 << 16;
                    r22 = r0 + r0;
                    r20 = r0 + r0;
                    writePages[(r29+272)>>>12][((r29+272)>>>2)&0x3ff] = r0;
                    r30 = r0 + 1;
                    r19 = r19 + -15504;
                    r21 = r21 + -15500;
                    /* Next insn is delay slot */ 
                    pc=0x184bc;
                    continue;
                case 0x1847c:
                    r4 = r29 + 16;
                    r6 = r0 + 255;
                    /* Next insn is delay slot */ 
                    r31=0x1848c;
                    pc=0x1f400;
                    run_1f400(); return;
                case 0x1848c:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x18498;
                    pc=0x10268;
                    run_10200(); return;
                case 0x18498:
                    r3 = r29 + 16;
                    r2 = r3 + r2;
                    r4 = r0 + 32;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x184ac:
                    r30 = r30 + 1;
                    r2 = r30 < r17 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18510;
                        continue;
                    }
                case 0x184bc:
                    r6 = r30 << 2;
                    r23 = r18 + r6;
                    r5 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    r2 = r0 + 45;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1847c;
                        continue;
                    }
                    r16 = r5 + 1;
                    r4 = r16 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x184f0;
                    pc=0x1f200;
                    run_1f200(); return;
                case 0x184f0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1865c;
                        run_18600(); return;
                    }
                    r30 = r30 + 1;
                    r30 = r30 + 1;
                    r2 = r30 < r17 ? 1 : 0;
                    r20 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x184bc;
                        continue;
                    }
                case 0x18510:
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18580;
                        continue;
                    }
                    r7 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    r6 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x1854c;
                    continue;
                case 0x18534:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 + 1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18580;
                        continue;
                    }
                case 0x1854c:
                    r4 = r7 + r2;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r5 = r2 + -32;
                    r4 = r4 & 3;
                    if(r4 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x18534;
                        continue;
                    }
                    r2 = r5 + r0;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 + 1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1854c;
                        continue;
                    }
                case 0x18580:
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x187c8;
                        run_18600(); return;
                    }
                    r3 = readPages[(r29+272)>>>12][((r29+272)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18848;
                        run_18800(); return;
                    }
                    r4 = 3 << 16;
                    r4 = r4 + -15432;
                    r5 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x185b4;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x185b4:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x185c0;
                    pc=0x10268;
                    run_10200(); return;
                case 0x185c0:
                    r3 = r29 + 16;
                    r2 = r3 + r2;
                    r3 = r0 + -101;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x185d4:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x185e0;
                    pc=0x11800;
                    run_11800(); return;
                case 0x185e0:
                    /* Next insn is delay slot */ 
                    r31=0x185e8;
                    pc=0x15600;
                    run_15600(); return;
                case 0x185e8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18780;
                        run_18600(); return;
                    }
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x188e4;
                        run_18800(); return;
                    }
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18864;
                        run_18800(); return;
                    }
                case 0x18600:
                    pc=0x18600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18600() throws ExecutionException { /* 0x18600 - 0x18800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18600:
                    r5 = 3 << 16;
                    r4 = r20 + r0;
                    r5 = r5 + -15396;
                    /* Next insn is delay slot */ 
                    r31=0x18614;
                    pc=0x1b000;
                    run_1b000(); return;
                case 0x18614:
                    r17 = r2 + r0;
                case 0x18618:
                    /* Next insn is delay slot */ 
                    r31=0x18620;
                    pc=0x12400;
                    run_12400(); return;
                case 0x18620:
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1862c;
                    pc=0x12600;
                    run_12600(); return;
                case 0x1862c:
                    r6 = r0 + 50;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r6; lo = r2/r6;
                        pc=0x1863c;
                        continue;
                    }
                    hi = r2%r6; lo = r2/r6;
                    throw new ExecutionException("Break");
                case 0x1863c:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    r6 = lo;
                    /* Next insn is delay slot */ 
                    r31=0x18650;
                    pc=0x18000;
                    run_18000(); return;
                case 0x18650:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x18784;
                    continue;
                case 0x1865c:
                    r4 = r16 + r0;
                    r5 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1866c;
                    pc=0x1f200;
                    run_1f200(); return;
                case 0x1866c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18688;
                        continue;
                    }
                    r20 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r30 = r30 + 1;
                    r22 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x184ac;
                    run_18400(); return;
                case 0x18688:
                    r2 = 3 << 16;
                    r4 = r16 + r0;
                    r5 = r2 + -15492;
                    /* Next insn is delay slot */ 
                    r31=0x1869c;
                    pc=0x1f200;
                    run_1f200(); return;
                case 0x1869c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x187b8;
                        continue;
                    }
                    r5 = 3 << 16;
                    r4 = r16 + r0;
                    r5 = r5 + -15484;
                    /* Next insn is delay slot */ 
                    r31=0x186b8;
                    pc=0x1f200;
                    run_1f200(); return;
                case 0x186b8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18770;
                        continue;
                    }
                    r3 = 3 << 16;
                    r4 = r16 + r0;
                    r5 = r3 + -15472;
                    /* Next insn is delay slot */ 
                    r31=0x186d4;
                    pc=0x1f200;
                    run_1f200(); return;
                case 0x186d4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18838;
                        run_18800(); return;
                    }
                    r5 = 3 << 16;
                    r4 = r16 + r0;
                    r5 = r5 + -15464;
                    /* Next insn is delay slot */ 
                    r31=0x186f0;
                    pc=0x1f200;
                    run_1f200(); return;
                case 0x186f0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1889c;
                        run_18800(); return;
                    }
                    r5 = 3 << 16;
                    r4 = r16 + r0;
                    r5 = r5 + -15456;
                    /* Next insn is delay slot */ 
                    r31=0x1870c;
                    pc=0x1f200;
                    run_1f200(); return;
                case 0x1870c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18878;
                        run_18800(); return;
                    }
                    r5 = 3 << 16;
                    r4 = r16 + r0;
                    r5 = r5 + -15448;
                    /* Next insn is delay slot */ 
                    r31=0x18728;
                    pc=0x1f200;
                    run_1f200(); return;
                case 0x18728:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x188c0;
                        run_18800(); return;
                    }
                    r5 = 3 << 16;
                    r4 = r16 + r0;
                    r5 = r5 + -15440;
                    /* Next insn is delay slot */ 
                    r31=0x18744;
                    pc=0x1f200;
                    run_1f200(); return;
                case 0x18744:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18780;
                        continue;
                    }
                    r4 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r30 = r30 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x1875c;
                    pc=0x19200;
                    run_19200(); return;
                case 0x1875c:
                    r4 = r2 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x18768;
                    pc=0x12000;
                    run_12000(); return;
                case 0x18768:
                    /* Next insn is delay slot */ 
                    pc=0x184ac;
                    run_18400(); return;
                case 0x18770:
                    r3 = r0 + 1;
                    writePages[(r29+272)>>>12][((r29+272)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x184ac;
                    run_18400(); return;
                case 0x18780:
                    r2 = r0 + 1;
                case 0x18784:
                    r31 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r30 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    r23 = readPages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff];
                    r22 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r21 = readPages[(r29+300)>>>12][((r29+300)>>>2)&0x3ff];
                    r20 = readPages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff];
                    r19 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r18 = readPages[(r29+288)>>>12][((r29+288)>>>2)&0x3ff];
                    r17 = readPages[(r29+284)>>>12][((r29+284)>>>2)&0x3ff];
                    r16 = readPages[(r29+280)>>>12][((r29+280)>>>2)&0x3ff];
                    r29 = r29 + 320;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x187b8:
                    /* Next insn is delay slot */ 
                    r31=0x187c0;
                    pc=0x12200;
                    run_12200(); return;
                case 0x187c0:
                    /* Next insn is delay slot */ 
                    pc=0x184ac;
                    run_18400(); return;
                case 0x187c8:
                    r3 = readPages[(r29+272)>>>12][((r29+272)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x185b4;
                        run_18400(); return;
                    }
                case 0x187d8:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x187e4;
                    pc=0x10268;
                    run_10200(); return;
                case 0x187e4:
                    r3 = r29 + 16;
                    r2 = r3 + r2;
                    r3 = r0 + 91;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x18804;
                    pc=0x10800;
                    run_10800(); return;
                case 0x18800:
                    pc=0x18800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18800() throws ExecutionException { /* 0x18800 - 0x18a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18800:
                case 0x18804:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18780;
                        run_18600(); return;
                    }
                    r2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x185d4;
                        run_18400(); return;
                    }
                    r4 = 3 << 16;
                    r4 = r4 + -15432;
                    r5 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x18830;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x18830:
                    /* Next insn is delay slot */ 
                    pc=0x185d4;
                    run_18400(); return;
                case 0x18838:
                    r2 = r0 + 1;
                    writePages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x184ac;
                    run_18400(); return;
                case 0x18848:
                    r4 = 3 << 16;
                    r4 = r4 + -15412;
                    r5 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x1885c;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x1885c:
                    /* Next insn is delay slot */ 
                    pc=0x187d8;
                    run_18600(); return;
                case 0x18864:
                    r2 = readPages[(r28+-32716)>>>12][((r28+-32716)>>>2)&0x3ff];
                    r17 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x18618;
                    run_18600(); return;
                case 0x18878:
                    r4 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r30 = r30 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x18888;
                    pc=0x19200;
                    run_19200(); return;
                case 0x18888:
                    r4 = r2 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x18894;
                    pc=0x11a00;
                    run_11a00(); return;
                case 0x18894:
                    /* Next insn is delay slot */ 
                    pc=0x184ac;
                    run_18400(); return;
                case 0x1889c:
                    r4 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r30 = r30 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x188ac;
                    pc=0x19200;
                    run_19200(); return;
                case 0x188ac:
                    r4 = r2 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x188b8;
                    pc=0x11c00;
                    run_11c00(); return;
                case 0x188b8:
                    /* Next insn is delay slot */ 
                    pc=0x184ac;
                    run_18400(); return;
                case 0x188c0:
                    r4 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r30 = r30 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x188d0;
                    pc=0x19200;
                    run_19200(); return;
                case 0x188d0:
                    r4 = r2 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x188dc;
                    pc=0x11e00;
                    run_11e00(); return;
                case 0x188dc:
                    /* Next insn is delay slot */ 
                    pc=0x184ac;
                    run_18400(); return;
                case 0x188e4:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x18784;
                    run_18600(); return;
                case 0x18a00:
                    pc=0x18a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18a00() throws ExecutionException { /* 0x18a00 - 0x18c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18a00:
                    r29 = r29 + -64;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    r23 = 3 << 16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = r23 + -15392;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    r18 = r6 + r0;
                    r17 = r5 + r0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    r31=0x18a48;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x18a48:
                    r4 = 3 << 16;
                    r4 = r4 + -15348;
                    /* Next insn is delay slot */ 
                    r31=0x18a58;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x18a58:
                    r4 = 3 << 16;
                    r4 = r4 + -15316;
                    /* Next insn is delay slot */ 
                    r31=0x18a68;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x18a68:
                    r4 = 3 << 16;
                    r4 = r4 + -15284;
                    /* Next insn is delay slot */ 
                    r31=0x18a78;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x18a78:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r2 = r0 + 255;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x18b54;
                        continue;
                    }
                    r22 = 3 << 16;
                    r21 = 3 << 16;
                    r20 = 3 << 16;
                    r19 = 3 << 16;
                    r2 = r0 + r0;
                    r30 = r0 + r0;
                    r22 = r22 + -15216;
                    r21 = r21 + -18224;
                    r20 = r20 + -18308;
                    r19 = r19 + -15252;
                    /* Next insn is delay slot */ 
                    pc=0x18b10;
                    continue;
                case 0x18ab8:
                    r3 = r5 + r21;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r3 = r5 + r20;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r3 = r17 + r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r18 + r2;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r30 = r30 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18af0;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x18af0:
                    r3 = r16 + r30;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r3 = r0 + 255;
                    r2 = r30 + r0;
                    if(r5 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x18b54;
                        continue;
                    }
                case 0x18b08:
                    if(r30 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x18b54;
                        continue;
                    }
                case 0x18b10:
                    r3 = (r5&0xffffffffL) < (81&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18ab8;
                        continue;
                    }
                    r3 = r17 + r2;
                    r2 = r18 + r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r30 = r30 + 1;
                    r4 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18b3c;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x18b3c:
                    r3 = r16 + r30;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r3 = r0 + 255;
                    r2 = r30 + r0;
                    if(r5 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x18b08;
                        continue;
                    }
                case 0x18b54:
                    r4 = r23 + -15392;
                    /* Next insn is delay slot */ 
                    r31=0x18b60;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x18b60:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=0x1de00;
                    run_1de00(); return;
                case 0x18c00:
                    pc=0x18c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18c00() throws ExecutionException { /* 0x18c00 - 0x18e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18c00:
                    r29 = r29 + -88;
                    r2 = 3 << 16;
                    r3 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r30;
                    r30 = r4 + r0;
                    r4 = r2 + -15392;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r3;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r23;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r22;
                    r23 = r5 + r0;
                    r22 = r6 + r0;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r21;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r20;
                    r21 = r7 + r0;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r19;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    r20 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r19 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r18 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18c60;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x18c60:
                    r4 = 3 << 16;
                    r4 = r4 + -15184;
                    /* Next insn is delay slot */ 
                    r31=0x18c70;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x18c70:
                    r4 = 3 << 16;
                    r4 = r4 + -15152;
                    /* Next insn is delay slot */ 
                    r31=0x18c80;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x18c80:
                    r4 = 3 << 16;
                    r4 = r4 + -15100;
                    r16 = 3 << 16;
                    /* Next insn is delay slot */ 
                    r31=0x18c94;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x18c94:
                    r17 = r0 + r0;
                    r16 = r16 + -15048;
                case 0x18c9c:
                    r2 = r30 + r17;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r2 = r20 + r17;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r2 = r23 + r17;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r2 = r19 + r17;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r22 + r17;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = r16 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = r18 + r17;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r21 + r17;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r2 = r3 + r17;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r17 = r17 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x18d0c;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x18d0c:
                    r2 = r0 + 255;
                    if(r17 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x18c9c;
                        continue;
                    }
                    r31 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r30 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r23 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r22 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r21 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r20 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = 3 << 16;
                    r4 = r3 + -15392;
                    r29 = r29 + 88;
                    /* Next insn is delay slot */ 
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x18e00:
                    pc=0x18e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18e00() throws ExecutionException { /* 0x18e00 - 0x19000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18e00:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r19 = r4 + r0;
                    r4 = 3 << 16;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    r4 = r4 + -15012;
                    r20 = 3 << 16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r19 = r19 & 65535;
                    /* Next insn is delay slot */ 
                    r31=0x18e38;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x18e38:
                    r16 = r0 + 1;
                    r18 = r0 + 61;
                    r20 = r20 + -14996;
                    /* Next insn is delay slot */ 
                    pc=0x18e68;
                    continue;
                case 0x18e4c:
                    r17 = r17 << 24;
                    r17 = r17 >> 24;
                    /* Next insn is delay slot */ 
                    r31=0x18e5c;
                    pc=0x1de00;
                    run_1de00(); return;
                case 0x18e5c:
                    r16 = r16 + 1;
                    if(r17 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x18ea8;
                        continue;
                    }
                case 0x18e68:
                    r4 = r19 + r0;
                    r5 = r16 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x18e78;
                    pc=0x10600;
                    run_10600(); return;
                case 0x18e78:
                    r4 = r2 & 127;
                    r17 = r2 + r0;
                    if(r4 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x18e4c;
                        continue;
                    }
                    r17 = r17 << 24;
                    r4 = r20 + r0;
                    r17 = r17 >> 24;
                    /* Next insn is delay slot */ 
                    r31=0x18e9c;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x18e9c:
                    r16 = r16 + 1;
                    if(r17 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x18e68;
                        continue;
                    }
                case 0x18ea8:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x1de00;
                    run_1de00(); return;
                case 0x19000:
                    pc=0x19000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19000() throws ExecutionException { /* 0x19000 - 0x19200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19000:
                    r5 = r4 + r0;
                    r6 = r0 + r0;
                    r4 = r0 + r0;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x22800;
                    run_22800(); return;
                case 0x19200:
                    pc=0x19200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19200() throws ExecutionException { /* 0x19200 - 0x19400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19200:
                    r5 = r0 + r0;
                    r6 = r0 + 10;
                    /* Next insn is delay slot */ 
                    pc=0x1fa00;
                    run_1fa00(); return;
                case 0x19400:
                    pc=0x19400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19400() throws ExecutionException { /* 0x19400 - 0x19600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19400:
                    r29 = r29 + -24;
                    r5 = r0 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1941c;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x1941c:
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r2 = readPages[(r4+60)>>>12][((r4+60)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1943c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1943c;
                    return;
                case 0x1943c:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19448;
                    pc=0x22200;
                    run_22200(); return;
                case 0x19448:
                case 0x19600:
                    pc=0x19600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19600() throws ExecutionException { /* 0x19600 - 0x19800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19600:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r16 = r5 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1964c;
                        continue;
                    }
                    r17 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1963c;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19738;
                        continue;
                    }
                case 0x1963c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1966c;
                        continue;
                    }
                case 0x1964c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1966c:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1967c;
                    pc=0x19e00;
                    run_19e00(); return;
                case 0x1967c:
                    r3 = readPages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff];
                    r18 = r2 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x196a4;
                        continue;
                    }
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x1969c;
                    return;
                case 0x1969c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x19748;
                        continue;
                    }
                case 0x196a4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19754;
                        continue;
                    }
                case 0x196b8:
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x196e4;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x196e0;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x196e0;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x196e0:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x196e4:
                    r5 = readPages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19704;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19700;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x19700:
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                case 0x19704:
                    /* Next insn is delay slot */ 
                    r31=0x1970c;
                    pc=0x1aa00;
                    run_1aa00(); return;
                case 0x1970c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x19718;
                    pc=0x1ac00;
                    run_1ac00(); return;
                case 0x19718:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19738:
                    /* Next insn is delay slot */ 
                    r31=0x19740;
                    pc=0x1a600;
                    run_1a600(); return;
                case 0x19740:
                    /* Next insn is delay slot */ 
                    pc=0x1963c;
                    continue;
                case 0x19748:
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x196a4;
                    continue;
                case 0x19754:
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19764;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x19764:
                    /* Next insn is delay slot */ 
                    pc=0x196b8;
                    continue;
                case 0x19800:
                    pc=0x19800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19800() throws ExecutionException { /* 0x19800 - 0x19a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19800:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32716)>>>12][((r28+-32716)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x19600;
                    run_19600(); return;
                case 0x19a00:
                    pc=0x19a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19a00() throws ExecutionException { /* 0x19a00 - 0x19c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19a00:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -40;
                    r3 = r2 & 8;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r19 = r4 + r0;
                    r17 = r5 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19b40;
                        continue;
                    }
                    r3 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 | 2048;
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x19bf4;
                        continue;
                    }
                case 0x19a44:
                    r3 = readPages[(r17+40)>>>12][((r17+40)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19b1c;
                        continue;
                    }
                    r2 = r2 & 65535;
                    r4 = r2 & 4096;
                    r16 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19c0c;
                        run_19c00(); return;
                    }
                    r6 = readPages[(r17+80)>>>12][((r17+80)>>>2)&0x3ff];
                case 0x19a70:
                    r2 = r2 & 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19aa4;
                        continue;
                    }
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r6 = r6 - r2;
                    r2 = readPages[(r17+48)>>>12][((r17+48)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19aa4;
                        continue;
                    }
                    r2 = readPages[(r17+60)>>>12][((r17+60)>>>2)&0x3ff];
                    r6 = r6 - r2;
                case 0x19aa4:
                    r5 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x19ab8;
                    return;
                case 0x19ab8:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x19c44;
                        run_19c00(); return;
                    }
                case 0x19ac4:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r4 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r3 = r3 & 63487;
                    r3 = r3 << 16;
                    r3 = r3 >> 16;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 & 4096;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r0;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r4;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19cc8;
                        run_19c00(); return;
                    }
                case 0x19af0:
                    r5 = readPages[(r17+48)>>>12][((r17+48)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r16;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19b1c;
                        continue;
                    }
                    r2 = r17 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x19b18;
                        continue;
                    }
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19b18;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x19b18:
                    writePages[(r17+48)>>>12][((r17+48)>>>2)&0x3ff] = r0;
                case 0x19b1c:
                    r2 = r0 + r0;
                case 0x19b20:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19b40:
                    r18 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19b1c;
                        continue;
                    }
                    r16 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = r2 & 3;
                    r16 = r16 - r18;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r18;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19be8;
                        continue;
                    }
                    r2 = readPages[(r5+20)>>>12][((r5+20)>>>2)&0x3ff];
                case 0x19b70:
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r2;
                    if(r16 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x19b94;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x19b1c;
                    continue;
                case 0x19b84:
                    r16 = r16 - r2;
                    r18 = r18 + r2;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x19b1c;
                        continue;
                    }
                case 0x19b94:
                    r2 = readPages[(r17+36)>>>12][((r17+36)>>>2)&0x3ff];
                    r5 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r6 = r18 + r0;
                    r7 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x19bb0;
                    return;
                case 0x19bb0:
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x19b84;
                        continue;
                    }
                case 0x19bb8:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 | 64;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19be8:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x19b70;
                    continue;
                case 0x19bf4:
                    r3 = readPages[(r5+60)>>>12][((r5+60)>>>2)&0x3ff];
                    if(r3 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x19a44;
                        continue;
                    }
                case 0x19c00:
                    pc=0x19c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19c00() throws ExecutionException { /* 0x19c00 - 0x19e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19c00:
                    /* Next insn is delay slot */ 
                    pc=0x19b1c;
                    run_19a00(); return;
                case 0x19c0c:
                    r5 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    r4 = r19 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x19c24;
                    return;
                case 0x19c24:
                    r6 = r2 + r0;
                    r2 = r0 + -1;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x19c90;
                        continue;
                    }
                case 0x19c34:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = readPages[(r17+40)>>>12][((r17+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x19a70;
                    run_19a00(); return;
                case 0x19c44:
                    r3 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19ac4;
                        run_19a00(); return;
                    }
                    r2 = r0 + 29;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x19c6c;
                        continue;
                    }
                    r2 = r0 + 22;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x19bb8;
                        run_19a00(); return;
                    }
                case 0x19c6c:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r0;
                    r2 = r2 & 63487;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x19af0;
                    run_19a00(); return;
                case 0x19c90:
                    r2 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19c34;
                        continue;
                    }
                    r3 = r0 + 29;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x19cb8;
                        continue;
                    }
                    r3 = r0 + 22;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x19bb8;
                        run_19a00(); return;
                    }
                case 0x19cb8:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r16;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x19b20;
                    run_19a00(); return;
                case 0x19cc8:
                    writePages[(r17+80)>>>12][((r17+80)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x19af0;
                    run_19a00(); return;
                case 0x19e00:
                    pc=0x19e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19e00() throws ExecutionException { /* 0x19e00 - 0x1a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19e00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19e28;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19e68;
                        continue;
                    }
                case 0x19e28:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19e50;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19e50:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x19a00;
                    run_19a00(); return;
                case 0x19e68:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x19e74;
                    pc=0x1a600;
                    run_1a600(); return;
                case 0x19e74:
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x19e28;
                    continue;
                case 0x1a000:
                    pc=0x1a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a000() throws ExecutionException { /* 0x1a000 - 0x1a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a000:
                    r5 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a018;
                        continue;
                    }
                    r4 = readPages[(r28+-32716)>>>12][((r28+-32716)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x19e00;
                    run_19e00(); return;
                case 0x1a018:
                    r5 = 2 << 16;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r5 = r5 + -25088;
                    /* Next insn is delay slot */ 
                    pc=0x1c000;
                    run_1c000(); return;
                case 0x1a200:
                    pc=0x1a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a200() throws ExecutionException { /* 0x1a200 - 0x1a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a200:
                    r5 = 2 << 16;
                    r5 = r5 + -26624;
                    /* Next insn is delay slot */ 
                    pc=0x1be00;
                    run_1be00(); return;
                case 0x1a400:
                    pc=0x1a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a400() throws ExecutionException { /* 0x1a400 - 0x1a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a400:
                    r29 = r29 + -32;
                    r2 = r5 << 2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r18 = r5 << 4;
                    r18 = r18 - r2;
                    r18 = r18 + r5;
                    r18 = r18 << 3;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = r5 + r0;
                    r5 = r18 + 12;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1a438;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x1a438:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a464;
                        continue;
                    }
                    r4 = r2 + 12;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r17;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r4;
                    r5 = r0 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a464;
                    pc=0x223f0;
                    run_22200(); return;
                case 0x1a464:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1a600:
                    pc=0x1a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a600() throws ExecutionException { /* 0x1a600 - 0x1a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a600:
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    r29 = r29 + -48;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a77c;
                        continue;
                    }
                    r2 = 2 << 16;
                    r2 = r2 + -24064;
                    writePages[(r4+60)>>>12][((r4+60)>>>2)&0x3ff] = r2;
                    r2 = r0 + 3;
                    r16 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    writePages[(r4+740)>>>12][((r4+740)>>>2)&0x3ff] = r2;
                    r2 = r4 + 748;
                    writePages[(r4+744)>>>12][((r4+744)>>>2)&0x3ff] = r2;
                    r22 = r0 + 1;
                    r2 = r0 + 4;
                    r21 = 2 << 16;
                    r20 = 2 << 16;
                    r19 = 2 << 16;
                    r18 = 2 << 16;
                    writePages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff] = r22;
                    writePages[(r4+736)>>>12][((r4+736)>>>2)&0x3ff] = r0;
                    r21 = r21 + -5632;
                    r4 = r16 + 92;
                    r20 = r20 + -5120;
                    r19 = r19 + -4608;
                    r18 = r18 + -4096;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r0;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x1a6bc;
                    pc=0x223f0;
                    run_22200(); return;
                case 0x1a6bc:
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r16;
                    writePages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff] = r21;
                    writePages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff] = r20;
                    writePages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff] = r19;
                    writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r18;
                    r16 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r4 = r16 + 92;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r0;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r22&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x1a710;
                    pc=0x223f0;
                    run_22200(); return;
                case 0x1a710:
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r16;
                    writePages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff] = r21;
                    writePages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff] = r20;
                    writePages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff] = r19;
                    writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r18;
                    r16 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r2 = r0 + 18;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 2;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r0;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    r4 = r16 + 92;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x1a768;
                    pc=0x223f0;
                    run_22200(); return;
                case 0x1a768:
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r16;
                    writePages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff] = r21;
                    writePages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff] = r20;
                    writePages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff] = r19;
                    writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r18;
                case 0x1a77c:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1a800:
                    pc=0x1a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a800() throws ExecutionException { /* 0x1a800 - 0x1aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a800:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r18 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r2 = readPages[(r18+56)>>>12][((r18+56)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r19 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a900;
                        continue;
                    }
                case 0x1a82c:
                    r18 = r18 + 736;
                    r17 = r0 + -1;
                case 0x1a834:
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r16 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a860;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1a8e4;
                    continue;
                case 0x1a850:
                    r2 = r2 + -1;
                    r16 = r16 + 104;
                    if(r2 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x1a8e4;
                        continue;
                    }
                case 0x1a860:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a850;
                        continue;
                    }
                    r2 = r0 + -1;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    r4 = r16 + 92;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x1a8b0;
                    pc=0x223f0;
                    run_22200(); return;
                case 0x1a8b0:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                    writePages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff] = r0;
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    writePages[(r16+72)>>>12][((r16+72)>>>2)&0x3ff] = r0;
                    r2 = r16 + r0;
                case 0x1a8c4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1a8e4:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a914;
                        continue;
                    }
                case 0x1a8f4:
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1a834;
                    continue;
                case 0x1a900:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a90c;
                    pc=0x1a600;
                    run_1a600(); return;
                case 0x1a90c:
                    /* Next insn is delay slot */ 
                    pc=0x1a82c;
                    continue;
                case 0x1a914:
                    r4 = r19 + r0;
                    r5 = r0 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x1a924;
                    pc=0x1a400;
                    run_1a400(); return;
                case 0x1a924:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a8f4;
                        continue;
                    }
                    r2 = r0 + 12;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1a8c4;
                    continue;
                case 0x1aa00:
                    pc=0x1aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1aa00() throws ExecutionException { /* 0x1aa00 - 0x1ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1aa00:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ac00:
                    pc=0x1ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ac00() throws ExecutionException { /* 0x1ac00 - 0x1ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ac00:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ae00:
                    pc=0x1ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ae00() throws ExecutionException { /* 0x1ae00 - 0x1b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ae00:
                    r29 = r29 + -48;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    r19 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r29 + 16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ae30;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x1ae30:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1aef4;
                        continue;
                    }
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ae48;
                    pc=0x1a800;
                    run_1a800(); return;
                case 0x1ae48:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1aef4;
                        continue;
                    }
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r5 = r19 + r0;
                    r7 = r0 + 438;
                    /* Next insn is delay slot */ 
                    r31=0x1ae6c;
                    pc=0x22210;
                    run_22200(); return;
                case 0x1ae6c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1aee0;
                        continue;
                    }
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = 2 << 16;
                    r2 = r2 + -5632;
                    writePages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff] = r2;
                    r2 = 2 << 16;
                    r2 = r2 + -5120;
                    writePages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff] = r2;
                    r2 = 2 << 16;
                    r2 = r2 + -4608;
                    writePages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff] = r2;
                    r2 = 2 << 16;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r17&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + -4096;
                    r17 = r17 & 256;
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r16;
                    writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r2;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1af18;
                        continue;
                    }
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1aee0:
                    /* Next insn is delay slot */ 
                    r31=0x1aee8;
                    pc=0x1aa00;
                    run_1aa00(); return;
                case 0x1aee8:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x1aef4;
                    pc=0x1ac00;
                    run_1ac00(); return;
                case 0x1aef4:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1af18:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r0 + r0;
                    r7 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x1af30;
                    pc=0x1b800;
                    run_1b800(); return;
                case 0x1af30:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1b000:
                    pc=0x1b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b000() throws ExecutionException { /* 0x1b000 - 0x1b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b000:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32716)>>>12][((r28+-32716)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x1b200:
                    pc=0x1b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b200() throws ExecutionException { /* 0x1b200 - 0x1b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b200:
                    r29 = r29 + -40;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r18 = 3 << 16;
                    r17 = r4 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r20 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r18 = r18 + -12448;
                    /* Next insn is delay slot */ 
                    r31=0x1b234;
                    pc=0x223d0;
                    run_22200(); return;
                case 0x1b234:
                    r4 = r17 + r0;
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b244;
                    pc=0x1d800;
                    run_1d800(); return;
                case 0x1b244:
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r19 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r19 = r19 & r2;
                    r5 = r19 - r20;
                    r5 = r5 + -17;
                    r5 = r5 + r16;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        if(r16!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r16 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r16 & 0xffffffffL));
                        }
                        pc=0x1b270;
                        continue;
                    }
                    if(r16!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r16 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r16 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x1b270:
                    r20 = lo;
                    r20 = r20 + -1;
                    { long hilo = (long)(r20) * ((long)r16); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r20 = lo;
                    r16 = r20 < r16 ? 1 : 0;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b2b4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b2a0;
                    pc=0x22310;
                    run_22200(); return;
                case 0x1b2a0:
                    r3 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r3 = r3 + r19;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1b2e8;
                        continue;
                    }
                case 0x1b2b4:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b2c0;
                    pc=0x1da00;
                    run_1da00(); return;
                case 0x1b2c0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1b2e8:
                    r4 = r17 + r0;
                    r5 = r0 - r20;
                    /* Next insn is delay slot */ 
                    r31=0x1b2f8;
                    pc=0x22310;
                    run_22200(); return;
                case 0x1b2f8:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1b358;
                        continue;
                    }
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r19 = r19 - r20;
                    r19 = r19 | 1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r19;
                    r2 = 3 << 16;
                    r3 = readPages[(r2+-10832)>>>12][((r2+-10832)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r20 = r3 - r20;
                    writePages[(r2+-10832)>>>12][((r2+-10832)>>>2)&0x3ff] = r20;
                    /* Next insn is delay slot */ 
                    r31=0x1b330;
                    pc=0x1da00;
                    run_1da00(); return;
                case 0x1b330:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1b358:
                    r4 = r17 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b368;
                    pc=0x22310;
                    run_22200(); return;
                case 0x1b368:
                    r3 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r4 = r2 - r3;
                    r5 = r4 < 16 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b2b4;
                        continue;
                    }
                    r5 = readPages[(r28+-32712)>>>12][((r28+-32712)>>>2)&0x3ff];
                    r4 = r4 | 1;
                    r2 = r2 - r5;
                    r5 = 3 << 16;
                    writePages[(r5+-10832)>>>12][((r5+-10832)>>>2)&0x3ff] = r2;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x1b2b4;
                    continue;
                case 0x1b400:
                    pc=0x1b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b400() throws ExecutionException { /* 0x1b400 - 0x1b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b400:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r16 = r5 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b5a0;
                        continue;
                    }
                    r17 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b428;
                    pc=0x1d800;
                    run_1d800(); return;
                case 0x1b428:
                    r8 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r2 = r0 + -2;
                    r6 = r16 + -8;
                    r2 = r8 & r2;
                    r3 = r6 + r2;
                    r5 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r7 = 3 << 16;
                    r4 = r0 + -4;
                    r7 = r7 + -12448;
                    r5 = r5 & r4;
                    r4 = readPages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff];
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1b644;
                        run_1b600(); return;
                    }
                    r8 = r8 & 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r5;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b564;
                        continue;
                    }
                    r4 = r0 + r0;
                case 0x1b474:
                    r8 = r3 + r5;
                    r8 = readPages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff];
                    r8 = r8 & 1;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b4ac;
                        continue;
                    }
                    r2 = r2 + r5;
                    r5 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b60c;
                        run_1b600(); return;
                    }
                case 0x1b49c:
                    r3 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    writePages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff] = r3;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r5;
                case 0x1b4ac:
                    r3 = r2 | 1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r3;
                    r3 = r6 + r2;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b548;
                        continue;
                    }
                    r3 = (r2&0xffffffffL) < (512&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b5b8;
                        continue;
                    }
                    r3 = r2 >>> 9;
                    r4 = (r3&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b6b8;
                        run_1b600(); return;
                    }
                    r4 = r2 >>> 6;
                    r4 = r4 + 56;
                    r8 = r4 << 1;
                case 0x1b4ec:
                    r8 = r8 << 2;
                    r8 = r7 + r8;
                    r3 = readPages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff];
                    if(r3 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x1b6d4;
                        run_1b600(); return;
                    }
                    r4 = r0 + -4;
                case 0x1b508:
                    r5 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r5 = r5 & r4;
                    r5 = ((r2 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b530;
                        continue;
                    }
                    r3 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    if(r8 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1b508;
                        continue;
                    }
                case 0x1b530:
                    r2 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                case 0x1b538:
                    writePages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff] = r2;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r3;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r6;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r6;
                case 0x1b548:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x1da00;
                    run_1da00(); return;
                case 0x1b564:
                    r4 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    r8 = 3 << 16;
                    r6 = r6 - r4;
                    r2 = r2 + r4;
                    r4 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r8 = r8 + -12440;
                    if(r4 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x1b6ac;
                        run_1b600(); return;
                    }
                    r8 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r8;
                    writePages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff] = r4;
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1b474;
                    continue;
                case 0x1b5a0:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1b5b8:
                    r2 = r2 >>> 3;
                    r3 = r2 >> 2;
                    r4 = r0 + 1;
                    r3 = r4 << (r3&0x1f);
                    r4 = readPages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff];
                    r2 = r2 << 3;
                    r3 = r3 | r4;
                    writePages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff] = r3;
                    r7 = r7 + r2;
                    r2 = readPages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff] = r7;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r2;
                    writePages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff] = r6;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r6;
                case 0x1b600:
                    pc=0x1b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b600() throws ExecutionException { /* 0x1b600 - 0x1b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b600:
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x1da00;
                    run_1da00(); return;
                case 0x1b60c:
                    r8 = 3 << 16;
                    r8 = r8 + -12440;
                    if(r5 != r8) {
                        /* Next insn is delay slot */ 
                        pc=0x1b49c;
                        run_1b400(); return;
                    }
                    r3 = r2 | 1;
                    writePages[(r7+20)>>>12][((r7+20)>>>2)&0x3ff] = r6;
                    writePages[(r7+16)>>>12][((r7+16)>>>2)&0x3ff] = r6;
                    writePages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff] = r5;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r5;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r3;
                    r6 = r6 + r2;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x1b548;
                    run_1b400(); return;
                case 0x1b644:
                    r8 = r8 & 1;
                    r2 = r5 + r2;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b678;
                        continue;
                    }
                    r3 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    r6 = r6 - r3;
                    r4 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r3 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r3;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r4;
                case 0x1b678:
                    r5 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r3 = r2 | 1;
                    r2 = ((r2 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r3;
                    writePages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff] = r6;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b548;
                        run_1b400(); return;
                    }
                    r5 = readPages[(r28+-32580)>>>12][((r28+-32580)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b6a4;
                    pc=0x1b200;
                    run_1b200(); return;
                case 0x1b6a4:
                    /* Next insn is delay slot */ 
                    pc=0x1b548;
                    run_1b400(); return;
                case 0x1b6ac:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x1b474;
                    run_1b400(); return;
                case 0x1b6b8:
                    r4 = (r3&0xffffffffL) < (21&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b6fc;
                        continue;
                    }
                    r4 = r3 + 91;
                    r8 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x1b4ec;
                    run_1b400(); return;
                case 0x1b6d4:
                    r2 = r0 + 1;
                    r4 = r4 >> 2;
                    r4 = r2 << (r4&0x1f);
                    r2 = readPages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff];
                    r2 = r4 | r2;
                    writePages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff] = r2;
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1b538;
                    run_1b400(); return;
                case 0x1b6fc:
                    r4 = (r3&0xffffffffL) < (85&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b71c;
                        continue;
                    }
                    r4 = r2 >>> 12;
                    r4 = r4 + 110;
                    r8 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x1b4ec;
                    run_1b400(); return;
                case 0x1b71c:
                    r4 = (r3&0xffffffffL) < (341&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b73c;
                        continue;
                    }
                    r4 = r2 >>> 15;
                    r4 = r4 + 119;
                    r8 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x1b4ec;
                    run_1b400(); return;
                case 0x1b73c:
                    r3 = (r3&0xffffffffL) < (1365&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b75c;
                        continue;
                    }
                    r4 = r2 >>> 18;
                    r4 = r4 + 124;
                    r8 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x1b4ec;
                    run_1b400(); return;
                case 0x1b75c:
                    r8 = r0 + 252;
                    r4 = r0 + 126;
                    /* Next insn is delay slot */ 
                    pc=0x1b4ec;
                    run_1b400(); return;
                case 0x1b800:
                    pc=0x1b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b800() throws ExecutionException { /* 0x1b800 - 0x1ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b800:
                    r29 = r29 + -120;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r21;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r18;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r17;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r16;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r31;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r23;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r22;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r20;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r19;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    r21 = r6 + r0;
                    r18 = r7 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b850;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ba30;
                        run_1ba00(); return;
                    }
                case 0x1b850:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r0 + 264;
                    r3 = r3 & 264;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1ba4c;
                        run_1ba00(); return;
                    }
                case 0x1b864:
                    r19 = readPages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff];
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bd88;
                        run_1bc00(); return;
                    }
                    r2 = r0 + 1;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1b9c4;
                        continue;
                    }
                    r2 = r0 + 2;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1b8d4;
                        continue;
                    }
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b8d4;
                        continue;
                    }
                    r2 = r0 + 22;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                case 0x1b89c:
                    r20 = r0 + -1;
                case 0x1b8a0:
                    r31 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r2 = r20 + r0;
                    r23 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r22 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r21 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r20 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r19 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r18 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r16 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 120;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1b8d4:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    r20 = r0 + r0;
                case 0x1b8e0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bd24;
                        run_1bc00(); return;
                    }
                case 0x1b8e8:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 65535;
                    r4 = r2 & 2074;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b924;
                        continue;
                    }
                    r2 = r2 & 1024;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bab8;
                        run_1ba00(); return;
                    }
                    r2 = 2 << 16;
                    r2 = r2 + -4608;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1ba64;
                        run_1ba00(); return;
                    }
                case 0x1b91c:
                    r3 = r3 | 2048;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x1b924:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b934;
                    pc=0x19e00;
                    run_19e00(); return;
                case 0x1b934:
                    r20 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b89c;
                        continue;
                    }
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r21 + r0;
                    r7 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x1b958;
                    return;
                case 0x1b958:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1b89c;
                        continue;
                    }
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b990;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1b98c;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b98c;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x1b98c:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x1b990:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r4 = r16 + 92;
                    r2 = r2 & 63455;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x1b9bc;
                    pc=0x223f0;
                    run_22200(); return;
                case 0x1b9bc:
                    /* Next insn is delay slot */ 
                    pc=0x1b8a0;
                    continue;
                case 0x1b9c4:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b9d4;
                    pc=0x19e00;
                    run_19e00(); return;
                case 0x1b9d4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r2 & 4096;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bce4;
                        run_1bc00(); return;
                    }
                    r20 = readPages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff];
                case 0x1b9ec:
                    r3 = r2 & 4;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bba0;
                        run_1ba00(); return;
                    }
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bbc8;
                        run_1ba00(); return;
                    }
                case 0x1ba00:
                    pc=0x1ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ba00() throws ExecutionException { /* 0x1ba00 - 0x1bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ba00:
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ba1c;
                        continue;
                    }
                    r3 = r3 - r2;
                    r20 = r20 + r3;
                case 0x1ba1c:
                    r21 = r21 + r20;
                    r22 = r0 + 1;
                    r18 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1b8e0;
                    run_1b800(); return;
                case 0x1ba30:
                    /* Next insn is delay slot */ 
                    r31=0x1ba38;
                    pc=0x1a600;
                    run_1a600(); return;
                case 0x1ba38:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r0 + 264;
                    r3 = r3 & 264;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1b864;
                        run_1b800(); return;
                    }
                case 0x1ba4c:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ba5c;
                    pc=0x19e00;
                    run_19e00(); return;
                case 0x1ba5c:
                    /* Next insn is delay slot */ 
                    pc=0x1b864;
                    run_1b800(); return;
                case 0x1ba64:
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b91c;
                        run_1b800(); return;
                    }
                    r4 = r17 + r0;
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x1ba84;
                    pc=0x22350;
                    run_22200(); return;
                case 0x1ba84:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bd18;
                        run_1bc00(); return;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 | 32768;
                    r3 = r3 & 61440;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1bd18;
                        run_1bc00(); return;
                    }
                    r2 = r0 + 1024;
                    writePages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 1024;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x1bab8:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bbd4;
                        continue;
                    }
                    r23 = r21 + r0;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bc04;
                        run_1bc00(); return;
                    }
                case 0x1bacc:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 4096;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bd3c;
                        run_1bc00(); return;
                    }
                    r2 = readPages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff];
                case 0x1bae4:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    r20 = r2 - r3;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bd68;
                        run_1bc00(); return;
                    }
                    r6 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    r20 = r20 - r6;
                case 0x1bb04:
                    r2 = readPages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff];
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r20 = r20 + r3;
                    r2 = r2 - r4;
                    r20 = r20 - r2;
                    r2 = r6 + r2;
                case 0x1bb1c:
                    r3 = r23 < r20 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bc20;
                        run_1bc00(); return;
                    }
                    r3 = r20 + r2;
                    r3 = ((r23 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bc20;
                        run_1bc00(); return;
                    }
                    r20 = r23 - r20;
                    r4 = r4 + r20;
                    r2 = r2 - r20;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r4;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bb70;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1bb6c;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bb6c;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x1bb6c:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x1bb70:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 65503;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x1bb80:
                    r4 = r16 + 92;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x1bb94;
                    pc=0x223f0;
                    run_22200(); return;
                case 0x1bb94:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1b8a0;
                    run_1b800(); return;
                case 0x1bba0:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r20 = r20 - r2;
                    r2 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bbc8;
                        continue;
                    }
                    r2 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    r20 = r20 - r2;
                case 0x1bbc8:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1ba1c;
                    continue;
                case 0x1bbd4:
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x1bbe8;
                    pc=0x22350;
                    run_22200(); return;
                case 0x1bbe8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b924;
                        run_1b800(); return;
                    }
                    r23 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r23 = r21 + r23;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bacc;
                        continue;
                    }
                case 0x1bc00:
                    pc=0x1bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1bc00() throws ExecutionException { /* 0x1bc00 - 0x1be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1bc00:
                case 0x1bc04:
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bd68;
                        continue;
                    }
                    r6 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1bb04;
                    run_1ba00(); return;
                case 0x1bc20:
                    r20 = readPages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff];
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r20 = r0 - r20;
                    r20 = r23 & r20;
                    r4 = r17 + r0;
                    r6 = r20 + r0;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x1bc44;
                    return;
                case 0x1bc44:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1b924;
                        run_1b800(); return;
                    }
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bc84;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1bc80;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bc80;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x1bc80:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x1bc84:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r23 = r23 - r20;
                    r2 = r2 & 65503;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r23 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bb80;
                        run_1ba00(); return;
                    }
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bcac;
                    pc=0x1e600;
                    run_1e600(); return;
                case 0x1bcac:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b924;
                        run_1b800(); return;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r23 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b924;
                        run_1b800(); return;
                    }
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r2 - r23;
                    r3 = r3 + r23;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x1bb80;
                    run_1ba00(); return;
                case 0x1bce4:
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r0 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x1bcfc;
                    return;
                case 0x1bcfc:
                    r20 = r2 + r0;
                    r2 = r0 + -1;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1b89c;
                        run_1b800(); return;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x1b9ec;
                    run_1b800(); return;
                case 0x1bd18:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x1b91c;
                    run_1b800(); return;
                case 0x1bd24:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bd34;
                    pc=0x1c600;
                    run_1c600(); return;
                case 0x1bd34:
                    /* Next insn is delay slot */ 
                    pc=0x1b8e8;
                    run_1b800(); return;
                case 0x1bd3c:
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r0 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x1bd54;
                    return;
                case 0x1bd54:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1bae4;
                        run_1ba00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1b924;
                    run_1b800(); return;
                case 0x1bd68:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    r2 = r2 - r4;
                    r20 = r20 - r2;
                    r2 = r3 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x1bb1c;
                    run_1ba00(); return;
                case 0x1bd88:
                    r2 = r0 + 29;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r20 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x1b8a0;
                    run_1b800(); return;
                case 0x1be00:
                    pc=0x1be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1be00() throws ExecutionException { /* 0x1be00 - 0x1c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1be00:
                    r29 = r29 + -48;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = r4 + 736;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1becc;
                        continue;
                    }
                    r21 = r5 + r0;
                    r20 = r0 + r0;
                    r18 = r0 + -1;
                case 0x1be38:
                    r17 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r16 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r17 = r17 + -1;
                    if(r17 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1be90;
                        continue;
                    }
                case 0x1be4c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r3 = (r3&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1be80;
                        continue;
                    }
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    if(r3 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x1be80;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=r21;
                    r31=0x1be7c;
                    return;
                case 0x1be7c:
                    r20 = r20 | r2;
                case 0x1be80:
                    r17 = r17 + -1;
                    r16 = r16 + 104;
                    if(r17 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x1be4c;
                        continue;
                    }
                case 0x1be90:
                    r19 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1be38;
                        continue;
                    }
                case 0x1bea0:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r20 + r0;
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1becc:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1bea0;
                    continue;
                case 0x1c000:
                    pc=0x1c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c000() throws ExecutionException { /* 0x1c000 - 0x1c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c000:
                    r29 = r29 + -48;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r19 = r4 + 736;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r20 = r4 + r0;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c0dc;
                        continue;
                    }
                    r21 = r5 + r0;
                    r22 = r0 + r0;
                    r18 = r0 + -1;
                case 0x1c040:
                    r17 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r16 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r17 = r17 + -1;
                    if(r17 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c09c;
                        continue;
                    }
                case 0x1c054:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r3 = (r3&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c08c;
                        continue;
                    }
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    if(r3 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x1c08c;
                        continue;
                    }
                    r4 = r20 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=r21;
                    r31=0x1c088;
                    return;
                case 0x1c088:
                    r22 = r22 | r2;
                case 0x1c08c:
                    r17 = r17 + -1;
                    r16 = r16 + 104;
                    if(r17 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x1c054;
                        continue;
                    }
                case 0x1c09c:
                    r19 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c040;
                        continue;
                    }
                case 0x1c0ac:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r22 + r0;
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1c0dc:
                    r22 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1c0ac;
                    continue;
                case 0x1c200:
                    pc=0x1c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c200() throws ExecutionException { /* 0x1c200 - 0x1c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c200:
                    { long hilo = (long)(r7) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r29 = r29 + -64;
                    r2 = r29 + 28;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r20;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r19;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r17;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r18 = lo;
                    r19 = r6 + r0;
                    r20 = r7 + r0;
                    r16 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c268;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c314;
                        continue;
                    }
                case 0x1c268:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 8192;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c294;
                        continue;
                    }
                    r3 = r3 | 8192;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    r2 = r0 + -8193;
                    r2 = r3 & r2;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r2;
                case 0x1c294:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x1c2a8;
                    pc=0x25000;
                    run_25000(); return;
                case 0x1c2a8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c2ec;
                        continue;
                    }
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = r18 - r2;
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        if(r19!=0) {
                        hi = (int)((r18 & 0xffffffffL) % (r19 & 0xffffffffL)); lo = (int)((r18 & 0xffffffffL) / (r19 & 0xffffffffL));
                        }
                        pc=0x1c2c8;
                        continue;
                    }
                    if(r19!=0) {
                    hi = (int)((r18 & 0xffffffffL) % (r19 & 0xffffffffL)); lo = (int)((r18 & 0xffffffffL) / (r19 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x1c2c8:
                    r20 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r19 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    r2 = lo;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1c2ec:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r20 + r0;
                    r19 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r20 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1c314:
                    /* Next insn is delay slot */ 
                    r31=0x1c31c;
                    pc=0x1a600;
                    run_1a600(); return;
                case 0x1c31c:
                    /* Next insn is delay slot */ 
                    pc=0x1c268;
                    continue;
                case 0x1c400:
                    pc=0x1c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c400() throws ExecutionException { /* 0x1c400 - 0x1c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c400:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = readPages[(r28+-32716)>>>12][((r28+-32716)>>>2)&0x3ff];
                    r5 = r8 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1c430;
                    pc=0x1c200;
                    run_1c200(); return;
                case 0x1c430:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1c600:
                    pc=0x1c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c600() throws ExecutionException { /* 0x1c600 - 0x1c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c600:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -104;
                    r3 = r2 & 65535;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    r5 = r3 & 2;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r31;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r19;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r18;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r17;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c730;
                        continue;
                    }
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r17 = r4 + r0;
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c6f0;
                        continue;
                    }
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x1c64c;
                    pc=0x22350;
                    run_22200(); return;
                case 0x1c64c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c6e4;
                        continue;
                    }
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r0 | 32768;
                    r2 = r2 & 61440;
                    r19 = r2 ^ 8192;
                    r19 = (r19&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1c770;
                        continue;
                    }
                case 0x1c670:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r18 = r0 + 1024;
                    r2 = r2 | 2048;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x1c680:
                    r4 = r17 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1c690;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x1c690:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c714;
                        continue;
                    }
                    r3 = 2 << 16;
                    r3 = r3 + -24064;
                    writePages[(r17+60)>>>12][((r17+60)>>>2)&0x3ff] = r3;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r3 = r3 | 128;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r18;
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c7a4;
                        continue;
                    }
                case 0x1c6c4:
                    r31 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r19 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r18 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r16 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 104;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1c6e4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 & 65535;
                case 0x1c6f0:
                    r3 = r3 & 128;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c764;
                        continue;
                    }
                    r18 = r0 + 1024;
                case 0x1c700:
                    r2 = r2 | 2048;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1c680;
                    continue;
                case 0x1c714:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 & 512;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c6c4;
                        continue;
                    }
                    r2 = r2 | 2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x1c730:
                    r2 = r16 + 67;
                    r31 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r18 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r16 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 104;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1c764:
                    r18 = r0 + 64;
                    /* Next insn is delay slot */ 
                    pc=0x1c700;
                    continue;
                case 0x1c770:
                    r2 = 2 << 16;
                    r3 = readPages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff];
                    r2 = r2 + -4608;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1c670;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r18 = r0 + 1024;
                    r2 = r2 | 1024;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1024;
                    writePages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x1c680;
                    continue;
                case 0x1c7a4:
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1c7b4;
                    pc=0x22600;
                    run_22600(); return;
                case 0x1c7b4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c6c4;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 1;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x1c6c4;
                    continue;
                case 0x1c800:
                    pc=0x1c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c800() throws ExecutionException { /* 0x1c800 - 0x1ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c800:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32716)>>>12][((r28+-32716)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x1ca00:
                    pc=0x1ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ca00() throws ExecutionException { /* 0x1ca00 - 0x1cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ca00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32716)>>>12][((r28+-32716)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x1cc00:
                    pc=0x1cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1cc00() throws ExecutionException { /* 0x1cc00 - 0x1ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1cc00:
                    r2 = r5 + 11;
                    r29 = r29 + -64;
                    r3 = (r2&0xffffffffL) < (23&0xffffffffL) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r19 = r4 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cd04;
                        continue;
                    }
                    r17 = r0 + -8;
                    r17 = r2 & r17;
                    if(r17 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cd14;
                        continue;
                    }
                    r5 = ((r17 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cd14;
                        continue;
                    }
                case 0x1cc5c:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1cc68;
                    pc=0x1d800;
                    run_1d800(); return;
                case 0x1cc68:
                    r2 = (r17&0xffffffffL) < (504&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cd28;
                        continue;
                    }
                    r18 = 3 << 16;
                    r18 = r18 + -12448;
                    r2 = r18 + r17;
                    r16 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r7 = r17 >>> 3;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1d2d8;
                        run_1d200(); return;
                    }
                case 0x1cc90:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r3 & r2;
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r3;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r4;
                case 0x1ccb0:
                    r2 = r16 + r2;
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r3 = r3 | 1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1cccc;
                    pc=0x1da00;
                    run_1da00(); return;
                case 0x1cccc:
                    r2 = r16 + 8;
                case 0x1ccd0:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1cd04:
                    r17 = r0 + 16;
                    r5 = ((r17 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cc5c;
                        continue;
                    }
                case 0x1cd14:
                    r2 = r0 + 12;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1ccd0;
                    continue;
                case 0x1cd28:
                    r2 = r17 >>> 9;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cf4c;
                        run_1ce00(); return;
                    }
                    r3 = (r2&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d1b8;
                        run_1d000(); return;
                    }
                    r8 = r17 >>> 6;
                    r8 = r8 + 56;
                    r6 = r8 << 1;
                case 0x1cd4c:
                    r18 = 3 << 16;
                    r6 = r6 << 2;
                    r18 = r18 + -12448;
                    r6 = r18 + r6;
                    r16 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    if(r6 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x1cdd0;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r3 = r3 & r2;
                    r4 = r3 - r17;
                    r2 = r4 < 16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cf5c;
                        run_1ce00(); return;
                    }
                    r7 = r0 + -4;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cdc0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1cf68;
                    run_1ce00(); return;
                case 0x1cd9c:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 & r7;
                    r2 = r3 - r17;
                    r5 = r2 < 16 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cf5c;
                        run_1ce00(); return;
                    }
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cf68;
                        run_1ce00(); return;
                    }
                case 0x1cdc0:
                    r16 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    if(r6 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x1cd9c;
                        continue;
                    }
                case 0x1cdd0:
                    r7 = r8 + 1;
                case 0x1cdd4:
                    r9 = 3 << 16;
                    r16 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r9 = r9 + -12440;
                    if(r16 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x1d2b0;
                        run_1d200(); return;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r2 = r3 & r2;
                    r3 = r2 - r17;
                    r4 = r3 < 16 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d26c;
                        run_1d200(); return;
                    }
                case 0x1ce00:
                    pc=0x1ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ce00() throws ExecutionException { /* 0x1ce00 - 0x1d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ce00:
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r9;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r9;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ccb0;
                        run_1cc00(); return;
                    }
                    r3 = (r2&0xffffffffL) < (512&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d1e4;
                        run_1d000(); return;
                    }
                    r3 = r2 >>> 3;
                    r2 = r3 >> 2;
                    r4 = r0 + 1;
                    r4 = r4 << (r2&0x1f);
                    r3 = r3 << 3;
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r3 = r18 + r3;
                    r2 = r4 | r2;
                    r4 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r2;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r4;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r16;
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r16;
                case 0x1ce58:
                    r3 = r7 >> 2;
                    r4 = r0 + 1;
                    r4 = r4 << (r3&0x1f);
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cfa0;
                        continue;
                    }
                    r3 = r2 & r4;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ce98;
                        continue;
                    }
                    r3 = r0 + -4;
                    r7 = r7 & r3;
                case 0x1ce84:
                    r4 = r4 << 1;
                    r3 = r2 & r4;
                    r7 = r7 + 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ce84;
                        continue;
                    }
                case 0x1ce98:
                    r8 = r0 + -4;
                case 0x1ce9c:
                    r10 = r7 << 3;
                    r10 = r18 + r10;
                    r6 = r10 + r0;
                    r11 = r7 + r0;
                case 0x1ceac:
                    r16 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    if(r6 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x1cedc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1d2bc;
                    run_1d200(); return;
                case 0x1cec4:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d2f4;
                        run_1d200(); return;
                    }
                    r16 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    if(r6 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x1d2bc;
                        run_1d200(); return;
                    }
                case 0x1cedc:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 & r8;
                    r2 = r3 - r17;
                    r5 = r2 < 16 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cec4;
                        continue;
                    }
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r16 + r17;
                    r17 = r17 | 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r17;
                    writePages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff] = r4;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r5;
                    r4 = r2 | 1;
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r3;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r3;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r9;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r9;
                    r3 = r3 + r2;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1cf40;
                    pc=0x1da00;
                    run_1da00(); return;
                case 0x1cf40:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x1ccd0;
                    run_1cc00(); return;
                case 0x1cf4c:
                    r6 = r0 + 126;
                    r8 = r0 + 63;
                    /* Next insn is delay slot */ 
                    pc=0x1cd4c;
                    run_1cc00(); return;
                case 0x1cf5c:
                    r8 = r8 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x1cdd0;
                    run_1cc00(); return;
                case 0x1cf68:
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r16 + r3;
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r2 = r2 | 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1cf94;
                    pc=0x1da00;
                    run_1da00(); return;
                case 0x1cf94:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x1ccd0;
                    run_1cc00(); return;
                case 0x1cfa0:
                    r16 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r21 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r21 = r21 & r2;
                    r2 = ((r21 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cfd0;
                        continue;
                    }
                    r2 = r21 - r17;
                    r3 = r2 < 16 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d188;
                        run_1d000(); return;
                    }
                case 0x1cfd0:
                    r22 = readPages[(r28+-32580)>>>12][((r28+-32580)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1cfdc;
                    pc=0x223d0;
                    run_22200(); return;
                case 0x1cfdc:
                    r3 = readPages[(r28+-32712)>>>12][((r28+-32712)>>>2)&0x3ff];
                    r22 = r22 + 16;
                    r23 = r2 + r0;
                    r2 = r0 + -1;
                    r30 = r16 + r21;
                    r22 = r22 + r17;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1d00c;
                        run_1d000(); return;
                    }
                    r2 = r22 + -1;
                case 0x1d000:
                    pc=0x1d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d000() throws ExecutionException { /* 0x1d000 - 0x1d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d000:
                    r2 = r2 + r23;
                    r22 = r0 - r23;
                    r22 = r22 & r2;
                case 0x1d00c:
                    r4 = r19 + r0;
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1d01c;
                    pc=0x22310;
                    run_22200(); return;
                case 0x1d01c:
                    r20 = r2 + r0;
                    r2 = r0 + -1;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1d158;
                        continue;
                    }
                    r2 = ((r20 & 0xffffffffL) < (r30 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d354;
                        run_1d200(); return;
                    }
                case 0x1d038:
                    r3 = 3 << 16;
                    r2 = readPages[(r3+-10832)>>>12][((r3+-10832)>>>2)&0x3ff];
                    r4 = r23 + -1;
                    r2 = r22 + r2;
                    writePages[(r3+-10832)>>>12][((r3+-10832)>>>2)&0x3ff] = r2;
                    if(r30 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x1d4ac;
                        run_1d400(); return;
                    }
                case 0x1d054:
                    r6 = readPages[(r28+-32712)>>>12][((r28+-32712)>>>2)&0x3ff];
                    r5 = r0 + -1;
                    if(r6 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x1d4d0;
                        run_1d400(); return;
                    }
                    r30 = r20 - r30;
                    r2 = r2 + r30;
                    writePages[(r3+-10832)>>>12][((r3+-10832)>>>2)&0x3ff] = r2;
                case 0x1d070:
                    r2 = r20 & 7;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d410;
                        run_1d400(); return;
                    }
                    r5 = r0 + 8;
                    r2 = r5 - r2;
                    r20 = r20 + r2;
                case 0x1d088:
                    r22 = r20 + r22;
                    r2 = r2 + r23;
                    r4 = r22 & r4;
                    r22 = r2 - r4;
                    r5 = r22 + r0;
                    r4 = r19 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1d0ac;
                    pc=0x22310;
                    run_22200(); return;
                case 0x1d0ac:
                    r4 = r0 + -1;
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1d4fc;
                        run_1d400(); return;
                    }
                    r2 = r2 - r20;
                    r4 = r22 + r2;
                    r4 = r4 | 1;
                case 0x1d0c8:
                    r2 = readPages[(r3+-10832)>>>12][((r3+-10832)>>>2)&0x3ff];
                    writePages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff] = r20;
                    r2 = r22 + r2;
                    writePages[(r3+-10832)>>>12][((r3+-10832)>>>2)&0x3ff] = r2;
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r4;
                    if(r16 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x1d128;
                        continue;
                    }
                    r3 = (r21&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d444;
                        run_1d400(); return;
                    }
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r21 = r21 + -12;
                    r3 = r0 + -8;
                    r3 = r21 & r3;
                    r4 = r4 & 1;
                    r4 = r3 | r4;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r5 = r0 + 5;
                    r4 = r16 + r3;
                    r3 = (r3&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r5;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r5;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d4dc;
                        run_1d400(); return;
                    }
                case 0x1d128:
                    r3 = readPages[(r28+-32584)>>>12][((r28+-32584)>>>2)&0x3ff];
                    r3 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d140;
                        continue;
                    }
                    writePages[(r28+-32584)>>>12][((r28+-32584)>>>2)&0x3ff] = r2;
                case 0x1d140:
                    r3 = readPages[(r28+-32588)>>>12][((r28+-32588)>>>2)&0x3ff];
                    r3 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d158;
                        continue;
                    }
                    writePages[(r28+-32588)>>>12][((r28+-32588)>>>2)&0x3ff] = r2;
                case 0x1d158:
                    r16 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 & r2;
                case 0x1d16c:
                    r2 = r3 - r17;
                    r3 = ((r3 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d3d8;
                        run_1d200(); return;
                    }
                    r3 = r2 < 16 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d3d8;
                        run_1d200(); return;
                    }
                case 0x1d188:
                    r3 = r17 | 1;
                    r2 = r2 | 1;
                    r17 = r16 + r17;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    r4 = r19 + r0;
                    writePages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff] = r17;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1d1ac;
                    pc=0x1da00;
                    run_1da00(); return;
                case 0x1d1ac:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x1ccd0;
                    run_1cc00(); return;
                case 0x1d1b8:
                    r3 = (r2&0xffffffffL) < (21&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d330;
                        run_1d200(); return;
                    }
                    r3 = (r2&0xffffffffL) < (85&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d3f0;
                        run_1d200(); return;
                    }
                    r8 = r17 >>> 12;
                    r8 = r8 + 110;
                    r6 = r8 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x1cd4c;
                    run_1cc00(); return;
                case 0x1d1e4:
                    r3 = r2 >>> 9;
                    r4 = (r3&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d340;
                        run_1d200(); return;
                    }
                    r4 = (r3&0xffffffffL) < (21&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d47c;
                        run_1d400(); return;
                    }
                case 0x1d200:
                    pc=0x1d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d200() throws ExecutionException { /* 0x1d200 - 0x1d400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d200:
                    r4 = r3 + 91;
                    r5 = r4 << 1;
                case 0x1d208:
                    r5 = r5 << 2;
                    r5 = r18 + r5;
                    r3 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x1d41c;
                        run_1d400(); return;
                    }
                    r6 = r0 + -4;
                case 0x1d224:
                    r4 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = r4 & r6;
                    r4 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d24c;
                        continue;
                    }
                    r3 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    if(r5 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1d224;
                        continue;
                    }
                case 0x1d24c:
                    r4 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                case 0x1d254:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r4;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r16;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x1ce58;
                    run_1ce00(); return;
                case 0x1d26c:
                    r2 = r16 + r17;
                    r4 = r3 | 1;
                    r17 = r17 | 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r17;
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r2;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r2;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r4;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r9;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r9;
                    r2 = r2 + r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1d2a4;
                    pc=0x1da00;
                    run_1da00(); return;
                case 0x1d2a4:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x1ccd0;
                    run_1cc00(); return;
                case 0x1d2b0:
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1ce58;
                    run_1ce00(); return;
                case 0x1d2bc:
                    r11 = r11 + 1;
                    r2 = r11 & 3;
                    r6 = r6 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ceac;
                        run_1ce00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1d378;
                    continue;
                case 0x1d2d8:
                    r2 = r16 + 8;
                    r16 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r7 = r7 + 2;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x1cdd4;
                        run_1cc00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1cc90;
                    run_1cc00(); return;
                case 0x1d2f4:
                    r3 = r16 + r3;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r2 = r2 | 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1d324;
                    pc=0x1da00;
                    run_1da00(); return;
                case 0x1d324:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x1ccd0;
                    run_1cc00(); return;
                case 0x1d330:
                    r8 = r2 + 91;
                    r6 = r8 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x1cd4c;
                    run_1cc00(); return;
                case 0x1d340:
                    r4 = r2 >>> 6;
                    r4 = r4 + 56;
                    r5 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x1d208;
                    continue;
                case 0x1d354:
                    if(r16 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x1d158;
                        run_1d000(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1d038;
                    run_1d000(); return;
                case 0x1d364:
                    r2 = r10 + -8;
                    r10 = readPages[(r10+0)>>>12][((r10+0)>>>2)&0x3ff];
                    r7 = r7 + -1;
                    if(r10 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1d55c;
                        run_1d400(); return;
                    }
                case 0x1d378:
                    r2 = r7 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d364;
                        continue;
                    }
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r3 = ~(r0 | r4);
                    r2 = r3 & r2;
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r2;
                case 0x1d394:
                    r4 = r4 << 1;
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cfa0;
                        run_1ce00(); return;
                    }
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cfa0;
                        run_1ce00(); return;
                    }
                    r3 = r2 & r4;
                    r7 = r11 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ce9c;
                        run_1ce00(); return;
                    }
                case 0x1d3bc:
                    r4 = r4 << 1;
                    r3 = r2 & r4;
                    r7 = r7 + 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d3bc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1ce9c;
                    run_1ce00(); return;
                case 0x1d3d8:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1d3e4;
                    pc=0x1da00;
                    run_1da00(); return;
                case 0x1d3e4:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1ccd0;
                    run_1cc00(); return;
                case 0x1d3f0:
                    r3 = (r2&0xffffffffL) < (341&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d45c;
                        run_1d400(); return;
                    }
                    r8 = r17 >>> 15;
                case 0x1d400:
                    pc=0x1d400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d400() throws ExecutionException { /* 0x1d400 - 0x1d600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d400:
                    r8 = r8 + 119;
                    r6 = r8 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x1cd4c;
                    run_1cc00(); return;
                case 0x1d410:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1d088;
                    run_1d000(); return;
                case 0x1d41c:
                    r2 = r0 + 1;
                    r4 = r4 >> 2;
                    r4 = r2 << (r4&0x1f);
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r2 = r4 | r2;
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r2;
                    r4 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1d254;
                    run_1d200(); return;
                case 0x1d444:
                    r2 = r0 + 1;
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r2;
                    r16 = r20 + r0;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1d16c;
                    run_1d000(); return;
                case 0x1d45c:
                    r2 = (r2&0xffffffffL) < (1365&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d49c;
                        continue;
                    }
                    r8 = r17 >>> 18;
                    r8 = r8 + 124;
                    r6 = r8 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x1cd4c;
                    run_1cc00(); return;
                case 0x1d47c:
                    r4 = (r3&0xffffffffL) < (85&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d50c;
                        continue;
                    }
                    r4 = r2 >>> 12;
                    r4 = r4 + 110;
                    r5 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x1d208;
                    run_1d200(); return;
                case 0x1d49c:
                    r6 = r0 + 252;
                    r8 = r0 + 126;
                    /* Next insn is delay slot */ 
                    pc=0x1cd4c;
                    run_1cc00(); return;
                case 0x1d4ac:
                    r5 = r30 & r4;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d054;
                        run_1d000(); return;
                    }
                    r3 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r4 = r22 + r21;
                    r4 = r4 | 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x1d128;
                    run_1d000(); return;
                case 0x1d4d0:
                    writePages[(r28+-32712)>>>12][((r28+-32712)>>>2)&0x3ff] = r20;
                    /* Next insn is delay slot */ 
                    pc=0x1d070;
                    run_1d000(); return;
                case 0x1d4dc:
                    r4 = r19 + r0;
                    r5 = r16 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x1d4ec;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x1d4ec:
                    r2 = 3 << 16;
                    r2 = readPages[(r2+-10832)>>>12][((r2+-10832)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1d128;
                    run_1d000(); return;
                case 0x1d4fc:
                    r4 = r0 + 1;
                    r22 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1d0c8;
                    run_1d000(); return;
                case 0x1d50c:
                    r4 = (r3&0xffffffffL) < (341&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d52c;
                        continue;
                    }
                    r4 = r2 >>> 15;
                    r4 = r4 + 119;
                    r5 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x1d208;
                    run_1d200(); return;
                case 0x1d52c:
                    r3 = (r3&0xffffffffL) < (1365&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d54c;
                        continue;
                    }
                    r4 = r2 >>> 18;
                    r4 = r4 + 124;
                    r5 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x1d208;
                    run_1d200(); return;
                case 0x1d54c:
                    r5 = r0 + 252;
                    r4 = r0 + 126;
                    /* Next insn is delay slot */ 
                    pc=0x1d208;
                    run_1d200(); return;
                case 0x1d55c:
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1d394;
                    run_1d200(); return;
                case 0x1d600:
                    pc=0x1d600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d600() throws ExecutionException { /* 0x1d600 - 0x1d800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d600:
                    r3 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    r2 = r4 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d650;
                        continue;
                    }
                    r7 = r5 + r6;
                    r3 = ((r4 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d650;
                        continue;
                    }
                    r3 = r4 + r6;
                    r5 = r3 - r6;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d748;
                        continue;
                    }
                case 0x1d630:
                    r7 = r7 + -1;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r3 + -1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x1d630;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1d650:
                    r3 = (r6&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d750;
                        continue;
                    }
                    r3 = r2 | r5;
                    r3 = r3 & 3;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d764;
                        continue;
                    }
                    r7 = r5 + r0;
                    r3 = r2 + r0;
                    r4 = r6 + r0;
                case 0x1d678:
                    r8 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r7 = r7 + 16;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r8;
                    r8 = readPages[(r7+-12)>>>12][((r7+-12)>>>2)&0x3ff];
                    r3 = r3 + 16;
                    writePages[(r3+-12)>>>12][((r3+-12)>>>2)&0x3ff] = r8;
                    r8 = readPages[(r7+-8)>>>12][((r7+-8)>>>2)&0x3ff];
                    r4 = r4 + -16;
                    writePages[(r3+-8)>>>12][((r3+-8)>>>2)&0x3ff] = r8;
                    r8 = readPages[(r7+-4)>>>12][((r7+-4)>>>2)&0x3ff];
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r8;
                    r8 = (r4&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d678;
                        continue;
                    }
                    r4 = r6 + -16;
                    r4 = r4 >>> 4;
                    r4 = r4 + 1;
                    r4 = r4 << 4;
                    r10 = r6 & 15;
                    r3 = r2 + r4;
                    r5 = r5 + r4;
                    r4 = (r10&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d778;
                        continue;
                    }
                    r8 = r5 + r0;
                    r7 = r3 + r0;
                    r4 = r10 + r0;
                case 0x1d6e8:
                    r8 = r8 + 4;
                    r9 = readPages[(r8+-4)>>>12][((r8+-4)>>>2)&0x3ff];
                    r7 = r7 + 4;
                    r4 = r4 + -4;
                    writePages[(r7+-4)>>>12][((r7+-4)>>>2)&0x3ff] = r9;
                    r9 = (r4&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d6e8;
                        continue;
                    }
                    r4 = r10 + -4;
                    r4 = r4 >>> 2;
                    r4 = r4 + 1;
                    r4 = r4 << 2;
                    r6 = r6 & 3;
                    r3 = r3 + r4;
                    r5 = r5 + r4;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d770;
                        continue;
                    }
                case 0x1d72c:
                    r6 = r3 + r6;
                case 0x1d730:
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x1d730;
                        continue;
                    }
                case 0x1d748:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1d750:
                    r3 = r2 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d72c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1d770;
                    continue;
                case 0x1d764:
                    r3 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1d72c;
                    continue;
                case 0x1d770:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1d778:
                    r6 = r10 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d72c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1d770;
                    continue;
                case 0x1d800:
                    pc=0x1d800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d800() throws ExecutionException { /* 0x1d800 - 0x1da00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d800:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1da00:
                    pc=0x1da00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1da00() throws ExecutionException { /* 0x1da00 - 0x1dc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1da00:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1dc00:
                    pc=0x1dc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1dc00() throws ExecutionException { /* 0x1dc00 - 0x1de00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1dc00:
                    r29 = r29 + -32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    r6 = r4 + r0;
                    r4 = readPages[(r28+-32716)>>>12][((r28+-32716)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r5;
                    r5 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r7 = r29 + 36;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x1dc30;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x1dc30:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1de00:
                    pc=0x1de00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1de00() throws ExecutionException { /* 0x1de00 - 0x1e000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1de00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32716)>>>12][((r28+-32716)>>>2)&0x3ff];
                    r6 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x27a00;
                    run_27a00(); return;
                case 0x1e000:
                    pc=0x1e000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e000() throws ExecutionException { /* 0x1e000 - 0x1e200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e000:
                    r29 = r29 + -64;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = r5 + r0;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e024;
                    pc=0x10268;
                    run_10200(); return;
                case 0x1e024:
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = r2 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r2 = r29 + 16;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r0 + 2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-32716)>>>12][((r28+-32716)>>>2)&0x3ff];
                    r3 = 3 << 16;
                    r3 = r3 + -19296;
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    addr=r2+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r4 = r3 & 8192;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e088;
                        continue;
                    }
                    r3 = r3 | 8192;
                    r4 = readPages[(r2+100)>>>12][((r2+100)>>>2)&0x3ff];
                    addr=r2+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + -8193;
                    r3 = r4 & r3;
                    writePages[(r2+100)>>>12][((r2+100)>>>2)&0x3ff] = r3;
                case 0x1e088:
                    r5 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r29 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x1e09c;
                    pc=0x25000;
                    run_25000(); return;
                case 0x1e09c:
                    r3 = r0 + 10;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e0c4;
                        continue;
                    }
                case 0x1e0a8:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r17 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r16 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1e0c4:
                    r3 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x1e0a8;
                    continue;
                case 0x1e200:
                    pc=0x1e200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e200() throws ExecutionException { /* 0x1e200 - 0x1e400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e200:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32716)>>>12][((r28+-32716)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1e000;
                    run_1e000(); return;
                case 0x1e400:
                    pc=0x1e400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e400() throws ExecutionException { /* 0x1e400 - 0x1e600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e400:
                    addr=r4+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r0 + 9;
                    r3 = r3 & 9;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1e420;
                        continue;
                    }
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1e420:
                    /* Next insn is delay slot */ 
                    pc=0x1a000;
                    run_1a000(); return;
                case 0x1e600:
                    pc=0x1e600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e600() throws ExecutionException { /* 0x1e600 - 0x1e800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e600:
                    r29 = r29 + -40;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e638;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e7a0;
                        continue;
                    }
                case 0x1e638:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 65535;
                    r4 = r2 & 8192;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e66c;
                        continue;
                    }
                    r4 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    r2 = r0 + -8193;
                    r3 = r3 | 8192;
                    r2 = r4 & r2;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 65535;
                case 0x1e66c:
                    r4 = r2 & 32;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e77c;
                        continue;
                    }
                    r4 = r2 & 4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e73c;
                        continue;
                    }
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e6c4;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1e6b0;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e6b0;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x1e6b0:
                    r2 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e86c;
                        run_1e800(); return;
                    }
                case 0x1e6c4:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e898;
                        run_1e800(); return;
                    }
                case 0x1e6d4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r19 = tmp;
                    r18 = r19 & 65535;
                    r2 = r18 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e7b0;
                        continue;
                    }
                case 0x1e6ec:
                    r6 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = readPages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff];
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r7 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r6;
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1e70c;
                    return;
                case 0x1e70c:
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e764;
                        continue;
                    }
                    r2 = r0 + r0;
                case 0x1e71c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1e73c:
                    r4 = r2 & 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e8b0;
                        run_1e800(); return;
                    }
                    r2 = r2 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e82c;
                        run_1e800(); return;
                    }
                    r3 = r3 | 4;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x1e6c4;
                    continue;
                case 0x1e764:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e7f8;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 32;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x1e77c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1e7a0:
                    /* Next insn is delay slot */ 
                    r31=0x1e7a8;
                    pc=0x1a600;
                    run_1a600(); return;
                case 0x1e7a8:
                    /* Next insn is delay slot */ 
                    pc=0x1e638;
                    continue;
                case 0x1e7b0:
                    r2 = r0 + 1;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r5 = 2 << 16;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r5 + -7168;
                    /* Next insn is delay slot */ 
                    r31=0x1e7cc;
                    pc=0x1be00;
                    run_1be00(); return;
                case 0x1e7cc:
                    r18 = r18 & 9;
                    r2 = r0 + 9;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r19&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1e6ec;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e7f0;
                    pc=0x19a00;
                    run_19a00(); return;
                case 0x1e7f0:
                    /* Next insn is delay slot */ 
                    pc=0x1e6ec;
                    continue;
                case 0x1e7f8:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                case 0x1e800:
                    pc=0x1e800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e800() throws ExecutionException { /* 0x1e800 - 0x1ea00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e800:
                    r2 = r2 | 64;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1e82c:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e83c;
                    pc=0x19e00;
                    run_19e00(); return;
                case 0x1e83c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e77c;
                        run_1e600(); return;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    r3 = r3 & 65527;
                    r3 = r3 << 16;
                    r3 = r3 >> 16;
                    r3 = r3 | 4;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x1e6c4;
                    run_1e600(); return;
                case 0x1e86c:
                    r2 = readPages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff];
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1e898:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e8a8;
                    pc=0x1c600;
                    run_1c600(); return;
                case 0x1e8a8:
                    /* Next insn is delay slot */ 
                    pc=0x1e6d4;
                    run_1e600(); return;
                case 0x1e8b0:
                    r2 = r0 + 9;
                    r3 = r3 | 64;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x1e71c;
                    run_1e600(); return;
                case 0x1ea00:
                    pc=0x1ea00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ea00() throws ExecutionException { /* 0x1ea00 - 0x1ec00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ea00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    addr=r5+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1ea1c;
                    pc=0x22290;
                    run_22200(); return;
                case 0x1ea1c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ea44;
                        continue;
                    }
                    r3 = readPages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    writePages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff] = r3;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ea44:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 & 61439;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ec00:
                    pc=0x1ec00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ec00() throws ExecutionException { /* 0x1ec00 - 0x1ee00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ec00:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -40;
                    r3 = r2 & 256;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r19 = r4 + r0;
                    r16 = r5 + r0;
                    r18 = r6 + r0;
                    r17 = r7 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ec50;
                        continue;
                    }
                    addr=r5+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r6 = r0 + r0;
                    r7 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x1ec4c;
                    pc=0x22390;
                    run_22200(); return;
                case 0x1ec4c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                case 0x1ec50:
                    r3 = r0 + -4097;
                    r2 = r2 & r3;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r6 = r18 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r7 = r17 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x222d0;
                    run_22200(); return;
                case 0x1ee00:
                    pc=0x1ee00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ee00() throws ExecutionException { /* 0x1ee00 - 0x1f000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ee00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    addr=r5+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1ee1c;
                    pc=0x22390;
                    run_22200(); return;
                case 0x1ee1c:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1ee4c;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 | 4096;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ee4c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 & 61439;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1f000:
                    pc=0x1f000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f000() throws ExecutionException { /* 0x1f000 - 0x1f200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f000:
                    addr=r5+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x22250;
                    run_22200(); return;
                case 0x1f200:
                    pc=0x1f200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f200() throws ExecutionException { /* 0x1f200 - 0x1f400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f200:
                    r2 = r4 | r5;
                    r2 = r2 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f268;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x1f244;
                    continue;
                case 0x1f21c:
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1f254;
                        continue;
                    }
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r5 = r5 + 2;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f28c;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r6 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1f28c;
                        continue;
                    }
                case 0x1f244:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = r4 + 2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f21c;
                        continue;
                    }
                case 0x1f254:
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1f260:
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1f254;
                        continue;
                    }
                case 0x1f268:
                    r4 = r4 + 1;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f260;
                        continue;
                    }
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1f28c:
                    r2 = r6 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1f400:
                    pc=0x1f400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f400() throws ExecutionException { /* 0x1f400 - 0x1f600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f400:
                    r3 = r4 & 3;
                    r2 = r4 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f4c8;
                        continue;
                    }
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r9 = 65278 << 16;
                    r9 = r9 | 65279;
                    r7 = ~(r0 | r3);
                    r4 = 32896 << 16;
                    r3 = r3 + r9;
                    r7 = r7 & r3;
                    r4 = r4 | 32896;
                    r7 = r7 & r4;
                    r3 = r2 + r0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f464;
                        continue;
                    }
                case 0x1f440:
                    r3 = r3 + 4;
                    r7 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r8 = r7 + r9;
                    r7 = ~(r0 | r7);
                    r7 = r8 & r7;
                    r7 = r7 & r4;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f440;
                        continue;
                    }
                case 0x1f464:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f488;
                        continue;
                    }
                case 0x1f474:
                    r3 = r3 + 1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f474;
                        continue;
                    }
                case 0x1f488:
                    r8 = r5 + r6;
                    /* Next insn is delay slot */ 
                    pc=0x1f4b4;
                    continue;
                case 0x1f494:
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f4c0;
                        continue;
                    }
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f4d4;
                        continue;
                    }
                case 0x1f4b4:
                    r6 = r6 + -1;
                    if(r5 != r8) {
                        /* Next insn is delay slot */ 
                        pc=0x1f494;
                        continue;
                    }
                case 0x1f4c0:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1f4c8:
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1f464;
                    continue;
                case 0x1f4d4:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x1f4b4;
                    continue;
                case 0x1f600:
                    pc=0x1f600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f600() throws ExecutionException { /* 0x1f600 - 0x1f800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f600:
                    r29 = r29 + -8;
                    r11 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    writePages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x1f61c;
                    continue;
                case 0x1f618:
                    r2 = r3 + r0;
                case 0x1f61c:
                    r3 = r2 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r9 = r11 + r8;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r9 = r9 & 8;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f618;
                        continue;
                    }
                    r9 = r0 + 45;
                    if(r8 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x1f818;
                        run_1f800(); return;
                    }
                    r9 = r0 + 43;
                    if(r8 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x1f82c;
                        run_1f800(); return;
                    }
                    r25 = r0 + r0;
                case 0x1f65c:
                    r2 = r0 + -17;
                    r2 = r7 & r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f79c;
                        continue;
                    }
                    r2 = r0 + 48;
                    if(r8 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1f780;
                        continue;
                    }
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f79c;
                        continue;
                    }
                    r24 = r0 + 10;
                    r7 = r0 + 10;
                case 0x1f688:
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f7a8;
                        continue;
                    }
                case 0x1f690:
                    r13 = 32768 << 16;
                case 0x1f694:
                    if(r24 != r0) {
                        /* Next insn is delay slot */ 
                        if(r24!=0) {
                        hi = (int)((r13 & 0xffffffffL) % (r24 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r24 & 0xffffffffL));
                        }
                        pc=0x1f6a0;
                        continue;
                    }
                    if(r24!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r24 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r24 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x1f6a0:
                    r12 = r0 + r0;
                    r2 = r0 + r0;
                    r15 = r0 + 1;
                    r14 = r0 + -1;
                    r16 = hi;
                    r13 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x1f708;
                    continue;
                case 0x1f6c0:
                    r8 = r8 + -48;
                    r9 = r8 < r7 ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f748;
                        continue;
                    }
                case 0x1f6d0:
                    if(r12 == r14) {
                        /* Next insn is delay slot */ 
                        pc=0x1f6fc;
                        continue;
                    }
                    r9 = ((r13 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f7c4;
                        continue;
                    }
                    if(r2 == r13) {
                        /* Next insn is delay slot */ 
                        pc=0x1f7b8;
                        continue;
                    }
                case 0x1f6ec:
                    { long hilo = (long)(r2) * ((long)r24); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r12 = r0 + 1;
                    r2 = lo;
                    r2 = r8 + r2;
                case 0x1f6fc:
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                case 0x1f708:
                    r9 = r11 + r8;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r10 = r9 & 4;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f6c0;
                        continue;
                    }
                    r9 = r9 & 3;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f748;
                        continue;
                    }
                    if(r9 == r15) {
                        /* Next insn is delay slot */ 
                        pc=0x1f7d0;
                        continue;
                    }
                    r9 = r0 + 87;
                    r8 = r8 - r9;
                case 0x1f73c:
                    r9 = r8 < r7 ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f6d0;
                        continue;
                    }
                case 0x1f748:
                    r7 = r0 + -1;
                    if(r12 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x1f7e0;
                        continue;
                    }
                    if(r25 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f80c;
                        run_1f800(); return;
                    }
                case 0x1f75c:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f770;
                        continue;
                    }
                    if(r12 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f800;
                        run_1f800(); return;
                    }
                case 0x1f76c:
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r5;
                case 0x1f770:
                    r16 = readPages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff];
                    r29 = r29 + 8;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1f780:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r2 = r0 + 88;
                    r9 = r9 & 223;
                    if(r9 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1f84c;
                        run_1f800(); return;
                    }
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f864;
                        run_1f800(); return;
                    }
                case 0x1f79c:
                    r24 = r7 + r0;
                    if(r25 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f690;
                        continue;
                    }
                case 0x1f7a8:
                    r13 = 32767 << 16;
                    r13 = r13 | 65535;
                    /* Next insn is delay slot */ 
                    pc=0x1f694;
                    continue;
                case 0x1f7b8:
                    r9 = r16 < r8 ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f6ec;
                        continue;
                    }
                case 0x1f7c4:
                    r12 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x1f6fc;
                    continue;
                case 0x1f7d0:
                    r9 = r0 + 55;
                    r8 = r8 - r9;
                    /* Next insn is delay slot */ 
                    pc=0x1f73c;
                    continue;
                case 0x1f7e0:
                    if(r25 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f840;
                        run_1f800(); return;
                    }
                    r2 = 32767 << 16;
                    r2 = r2 | 65535;
                case 0x1f7f0:
                    r5 = r0 + 34;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r5;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f770;
                        continue;
                    }
                case 0x1f800:
                    pc=0x1f800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f800() throws ExecutionException { /* 0x1f800 - 0x1fa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f800:
                    r5 = r3 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x1f76c;
                    run_1f600(); return;
                case 0x1f80c:
                    r2 = r0 - r2;
                    /* Next insn is delay slot */ 
                    pc=0x1f75c;
                    run_1f600(); return;
                case 0x1f818:
                    r3 = r2 + 2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r25 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x1f65c;
                    run_1f600(); return;
                case 0x1f82c:
                    r3 = r2 + 2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r25 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1f65c;
                    run_1f600(); return;
                case 0x1f840:
                    r2 = 32768 << 16;
                    /* Next insn is delay slot */ 
                    pc=0x1f7f0;
                    run_1f600(); return;
                case 0x1f84c:
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r24 = r0 + 16;
                    r3 = r3 + 2;
                    r7 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x1f688;
                    run_1f600(); return;
                case 0x1f864:
                    r24 = r0 + 8;
                    r7 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x1f688;
                    run_1f600(); return;
                case 0x1fa00:
                    pc=0x1fa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1fa00() throws ExecutionException { /* 0x1fa00 - 0x1fc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1fa00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32716)>>>12][((r28+-32716)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x1fc00:
                    pc=0x1fc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1fc00() throws ExecutionException { /* 0x1fc00 - 0x1fe00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1fc00:
                    r29 = r29 + -1328;
                    writePages[(r29+1324)>>>12][((r29+1324)>>>2)&0x3ff] = r31;
                    writePages[(r29+1312)>>>12][((r29+1312)>>>2)&0x3ff] = r22;
                    writePages[(r29+1308)>>>12][((r29+1308)>>>2)&0x3ff] = r21;
                    r22 = r5 + r0;
                    r21 = r4 + r0;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r6;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r7;
                    writePages[(r29+1320)>>>12][((r29+1320)>>>2)&0x3ff] = r30;
                    writePages[(r29+1316)>>>12][((r29+1316)>>>2)&0x3ff] = r23;
                    writePages[(r29+1304)>>>12][((r29+1304)>>>2)&0x3ff] = r20;
                    writePages[(r29+1300)>>>12][((r29+1300)>>>2)&0x3ff] = r19;
                    writePages[(r29+1296)>>>12][((r29+1296)>>>2)&0x3ff] = r18;
                    writePages[(r29+1292)>>>12][((r29+1292)>>>2)&0x3ff] = r17;
                    writePages[(r29+1288)>>>12][((r29+1288)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x1fc44;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x1fc44:
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    writePages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1fc5c;
                    pc=0x10268;
                    run_10200(); return;
                case 0x1fc5c:
                    writePages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff] = r2;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fc78;
                        continue;
                    }
                    r2 = readPages[(r21+56)>>>12][((r21+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffec;
                        run_1fe00(); return;
                    }
                case 0x1fc78:
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 65535;
                    r4 = r2 & 8192;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fcac;
                        continue;
                    }
                    r4 = readPages[(r22+100)>>>12][((r22+100)>>>2)&0x3ff];
                    r2 = r0 + -8193;
                    r3 = r3 | 8192;
                    r2 = r4 & r2;
                    writePages[(r22+100)>>>12][((r22+100)>>>2)&0x3ff] = r2;
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 65535;
                case 0x1fcac:
                    r4 = r2 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fe58;
                        run_1fe00(); return;
                    }
                    r4 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fe58;
                        run_1fe00(); return;
                    }
                    r2 = r2 & 26;
                    r4 = r0 + 10;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1fe88;
                        run_1fe00(); return;
                    }
                case 0x1fcd8:
                    r3 = r29 + 40;
                    r2 = 3 << 16;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r3;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r0;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r0;
                    writePages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff] = r0;
                    writePages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff] = r0;
                    writePages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff] = r0;
                    writePages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff] = r0;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r0;
                    writePages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff] = r0;
                    r8 = r3 + r0;
                    r19 = r2 + -14160;
                case 0x1fd0c:
                    r3 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x204a4;
                        run_20400(); return;
                    }
                case 0x1fd24:
                    r3 = r0 + 37;
                    r16 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1fd44;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1fdb0;
                    continue;
                case 0x1fd3c:
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1fd58;
                        continue;
                    }
                case 0x1fd44:
                    r16 = r16 + 1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fd3c;
                        continue;
                    }
                case 0x1fd58:
                    r3 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    r17 = r16 - r3;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fdb0;
                        continue;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    r2 = r2 + r17;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r2 = r2 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r17;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ff80;
                        run_1fe00(); return;
                    }
                    r8 = r8 + 8;
                case 0x1fda0:
                    r3 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    r3 = r3 + r17;
                    writePages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff] = r3;
                case 0x1fdb0:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffa8;
                        run_1fe00(); return;
                    }
                    r16 = r16 + 1;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r0 + r0;
                    r30 = r0 + -1;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r0;
                    r17 = r0 + r0;
                    r6 = r0 + 42;
                    r7 = r0 + r0;
                case 0x1fde0:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r3 = r16 + 1;
                case 0x1fde8:
                    r2 = r18 + -32;
                    r4 = (r2&0xffffffffL) < (89&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20a10;
                        run_20a00(); return;
                    }
                    r4 = 3 << 16;
                    r2 = r2 << 2;
                case 0x1fe00:
                    pc=0x1fe00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1fe00() throws ExecutionException { /* 0x1fe00 - 0x20000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1fe00:
                    r4 = r4 + -14532;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x1fe18:
                    r17 = r17 | 16;
                case 0x1fe1c:
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1fde0;
                    run_1fc00(); return;
                case 0x1fe28:
                    r4 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r7 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r7 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x20a00;
                        run_20a00(); return;
                    }
                    r7 = r0 - r7;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r2;
                case 0x1fe48:
                    r17 = r17 | 4;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1fde0;
                    run_1fc00(); return;
                case 0x1fe58:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1fe68;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1fe68:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ff48;
                        continue;
                    }
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 10;
                    r2 = r3 & 65535;
                    r2 = r2 & 26;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1fcd8;
                        run_1fc00(); return;
                    }
                case 0x1fe88:
                    addr=r22+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fcd8;
                        run_1fc00(); return;
                    }
                    addr=r29+1078;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r22+28)>>>12][((r22+28)>>>2)&0x3ff];
                    r4 = r0 + -3;
                    writePages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r22+36)>>>12][((r22+36)>>>2)&0x3ff];
                    r3 = r3 & r4;
                    addr=r29+1076;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r22+100)>>>12][((r22+100)>>>2)&0x3ff];
                    r2 = r29 + 40;
                    r6 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    r7 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r2;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r2;
                    r4 = r21 + r0;
                    r2 = r0 + 1024;
                    r5 = r29 + 1064;
                    writePages[(r29+1164)>>>12][((r29+1164)>>>2)&0x3ff] = r3;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r2;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r2;
                    writePages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x1fef4;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x1fef4:
                    r16 = r2 + r0;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ff18;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r29 + 1064;
                    /* Next insn is delay slot */ 
                    r31=0x1ff10;
                    pc=0x19e00;
                    run_19e00(); return;
                case 0x1ff10:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21f78;
                        run_21e00(); return;
                    }
                case 0x1ff18:
                    addr=r29+1076;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ff3c;
                        continue;
                    }
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x1ff3c:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1ff4c;
                    continue;
                case 0x1ff48:
                    r2 = r0 + -1;
                case 0x1ff4c:
                    r31 = readPages[(r29+1324)>>>12][((r29+1324)>>>2)&0x3ff];
                    r30 = readPages[(r29+1320)>>>12][((r29+1320)>>>2)&0x3ff];
                    r23 = readPages[(r29+1316)>>>12][((r29+1316)>>>2)&0x3ff];
                    r22 = readPages[(r29+1312)>>>12][((r29+1312)>>>2)&0x3ff];
                    r21 = readPages[(r29+1308)>>>12][((r29+1308)>>>2)&0x3ff];
                    r20 = readPages[(r29+1304)>>>12][((r29+1304)>>>2)&0x3ff];
                    r19 = readPages[(r29+1300)>>>12][((r29+1300)>>>2)&0x3ff];
                    r18 = readPages[(r29+1296)>>>12][((r29+1296)>>>2)&0x3ff];
                    r17 = readPages[(r29+1292)>>>12][((r29+1292)>>>2)&0x3ff];
                    r16 = readPages[(r29+1288)>>>12][((r29+1288)>>>2)&0x3ff];
                    r29 = r29 + 1328;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ff80:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x1ff94;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x1ff94:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        continue;
                    }
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x1fda0;
                    run_1fc00(); return;
                case 0x1ffa8:
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x1ffcc;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x1ffcc:
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ff48;
                        continue;
                    }
                    r2 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1ff4c;
                    continue;
                case 0x1ffec:
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1fff8;
                    pc=0x1a600;
                    run_1a600(); return;
                case 0x1fff8:
                    /* Next insn is delay slot */ 
                    pc=0x1fc78;
                    run_1fc00(); return;
                case 0x20000:
                    pc=0x20000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20000() throws ExecutionException { /* 0x20000 - 0x20200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20000:
                    r5 = r0 + 43;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1fde0;
                    run_1fc00(); return;
                case 0x20010:
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    r16 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r20 = r3 + 4;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21aa4;
                        run_21a00(); return;
                    }
                    r4 = r16 + r0;
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x21984;
                        run_21800(); return;
                    }
                    r5 = r0 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x20050;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x20050:
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21c38;
                        run_21c00(); return;
                    }
                    r2 = r2 - r16;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    r2 = r30 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2187c;
                        run_21800(); return;
                    }
                case 0x20070:
                    r2 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x219a0;
                        run_21800(); return;
                    }
                case 0x20080:
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                case 0x20094:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x200ac;
                        continue;
                    }
                case 0x2009c:
                    r2 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                case 0x200ac:
                    r4 = r17 & 2;
                    writePages[(r29+1224)>>>12][((r29+1224)>>>2)&0x3ff] = r4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x200cc;
                        continue;
                    }
                    r5 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r5 = r5 + 2;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r5;
                case 0x200cc:
                    r2 = r17 & 132;
                    writePages[(r29+1228)>>>12][((r29+1228)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20a64;
                        run_20a00(); return;
                    }
                    r4 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r5 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r20 = r4 - r5;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x20a64;
                        run_20a00(); return;
                    }
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x219ac;
                        run_21800(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r19;
                    r23 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x2012c;
                    continue;
                case 0x20118:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20188;
                        continue;
                    }
                case 0x2012c:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r19;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r23;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20118;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x20164;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x20164:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2012c;
                        continue;
                    }
                case 0x20188:
                    r3 = r3 + 1;
                    r4 = readPages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff];
                    r2 = r20 + r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x210e4;
                        run_21000(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r8 = r8 + 8;
                case 0x201b8:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x201f4;
                        continue;
                    }
                    r3 = r29 + 1206;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20f60;
                        run_20e00(); return;
                    }
                    r8 = r8 + 8;
                case 0x201f4:
                    r3 = readPages[(r29+1224)>>>12][((r29+1224)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20238;
                        run_20200(); return;
                    }
                case 0x20200:
                    pc=0x20200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20200() throws ExecutionException { /* 0x20200 - 0x20400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20200:
                    r3 = r29 + 1204;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 2;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20f34;
                        run_20e00(); return;
                    }
                    r8 = r8 + 8;
                case 0x20238:
                    r4 = readPages[(r29+1228)>>>12][((r29+1228)>>>2)&0x3ff];
                    r3 = r0 + 128;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x20dcc;
                        run_20c00(); return;
                    }
                case 0x20248:
                    r3 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    r20 = r30 - r3;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x20318;
                        continue;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2170c;
                        run_21600(); return;
                    }
                    r5 = 3 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + -14176;
                    r30 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x20294;
                    continue;
                case 0x20280:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x202f0;
                        continue;
                    }
                case 0x20294:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r30;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20280;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x202cc;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x202cc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20294;
                        continue;
                    }
                case 0x202f0:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20f08;
                        run_20e00(); return;
                    }
                    r8 = r8 + 8;
                case 0x20318:
                    r3 = r17 & 256;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20c64;
                        run_20c00(); return;
                    }
                    r3 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20b68;
                        run_20a00(); return;
                    }
                case 0x20350:
                    r8 = r8 + 8;
                case 0x20354:
                    r17 = r17 & 4;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20450;
                        run_20400(); return;
                    }
                    r3 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r4 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r16 = r3 - r4;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x20450;
                        run_20400(); return;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21ae8;
                        run_21a00(); return;
                    }
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r19;
                    r17 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x203ac;
                    continue;
                case 0x20398:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20408;
                        run_20400(); return;
                    }
                case 0x203ac:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r6 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r19;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r17;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20398;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x203e4;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x203e4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                case 0x20400:
                    pc=0x20400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20400() throws ExecutionException { /* 0x20400 - 0x20600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20400:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x203ac;
                        run_20200(); return;
                    }
                case 0x20408:
                    r3 = r3 + 1;
                    r5 = readPages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff];
                    r2 = r2 + r16;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r5;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20450;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x20444;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x20444:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                case 0x20450:
                    r3 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r5 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r4 = r3 < r5 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2046c;
                        continue;
                    }
                    r3 = r5 + r0;
                case 0x2046c:
                    r4 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    r4 = r4 + r3;
                    writePages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff] = r4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20b94;
                        run_20a00(); return;
                    }
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r0;
                    r8 = r29 + 40;
                case 0x2048c:
                    r3 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fd24;
                        run_1fc00(); return;
                    }
                case 0x204a4:
                    r16 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1fdb0;
                    run_1fc00(); return;
                case 0x204b0:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fe1c;
                        run_1fe00(); return;
                    }
                    r5 = r0 + 32;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1fde0;
                    run_1fc00(); return;
                case 0x204c8:
                    r17 = r17 | 1;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1fde0;
                    run_1fc00(); return;
                case 0x204d8:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r4 = r3 + 1;
                    if(r18 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x21efc;
                        run_21e00(); return;
                    }
                    r2 = r18 + -48;
                    r3 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r30 = r0 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2052c;
                        continue;
                    }
                case 0x204fc:
                    r4 = r4 + 1;
                    r3 = r30 << 1;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r30 = r30 << 3;
                    r30 = r3 + r30;
                    r30 = r2 + r30;
                    r2 = r18 + -48;
                    r3 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x204fc;
                        continue;
                    }
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x218d8;
                        run_21800(); return;
                    }
                case 0x2052c:
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1fde8;
                    run_1fc00(); return;
                case 0x20538:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2098c;
                        run_20800(); return;
                    }
                case 0x20550:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                case 0x2056c:
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2057c;
                        continue;
                    }
                    r5 = r0 + -129;
                    r17 = r17 & r5;
                case 0x2057c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20bc0;
                        run_20a00(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20bc0;
                        run_20a00(); return;
                    }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20fb4;
                        run_20e00(); return;
                    }
                    r2 = r17 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20fb4;
                        run_20e00(); return;
                    }
                    r2 = r0 + 48;
                    addr=r29+1103;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    r16 = r29 + 1103;
                case 0x205b4:
                    r2 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    r4 = r2 < r30 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x205cc;
                        continue;
                    }
                    r2 = r30 + r0;
                case 0x205cc:
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x20094;
                    run_20000(); return;
                case 0x205dc:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x209d0;
                        run_20800(); return;
                    }
                case 0x205f4:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                case 0x20600:
                    pc=0x20600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20600() throws ExecutionException { /* 0x20600 - 0x20800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20600:
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2056c;
                    run_20400(); return;
                case 0x20618:
                    r7 = r0 + r0;
                    r2 = r18 + -48;
                case 0x20620:
                    r3 = r3 + 1;
                    r4 = r7 << 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r7 = r7 << 3;
                    r7 = r4 + r7;
                    r7 = r7 + r2;
                    r2 = r18 + -48;
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20620;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1fde8;
                    run_1fc00(); return;
                case 0x20650:
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x208bc;
                        run_20800(); return;
                    }
                case 0x20668:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                case 0x2067c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x21434;
                        run_21400(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x2056c;
                    run_20400(); return;
                case 0x20694:
                    r17 = r17 | 64;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1fde0;
                    run_1fc00(); return;
                case 0x206a4:
                    r17 = r17 | 128;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1fde0;
                    run_1fc00(); return;
                case 0x206b4:
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r0 + 48;
                    addr=r29+1204;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + 120;
                    addr=r29+1205;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r17 = r17 | 2;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r3 = 3 << 16;
                    r3 = r3 + -14564;
                    writePages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff] = r3;
                    r4 = r0 + 2;
                    r18 = r0 + 120;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2056c;
                    run_20400(); return;
                case 0x20708:
                    r2 = r17 & 8;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21668;
                        run_21600(); return;
                    }
                    r4 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r3 = r4 + 7;
                case 0x2072c:
                    r2 = r0 + -8;
                    r2 = r3 & r2;
                    r3 = r2 + 8;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    writePages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff] = f0;
                    f12 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    writePages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff] = f1;
                    f13 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x20764;
                    pc=0x28400;
                    run_28400(); return;
                case 0x20764:
                    r3 = r0 + 1;
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x21450;
                        run_21400(); return;
                    }
                    f0 = r0;
                    f2 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x21b44;
                        run_21a00(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                case 0x2079c:
                    r2 = r18 < 72 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x218c8;
                        run_21800(); return;
                    }
                    r16 = 3 << 16;
                    r16 = r16 + -14600;
                case 0x207b0:
                    r2 = r0 + -129;
                    r17 = r17 & r2;
                    r4 = r0 + 3;
                    r2 = r0 + 3;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r4;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x20094;
                    run_20000(); return;
                case 0x207d8:
                    r17 = r17 | 8;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1fde0;
                    run_1fc00(); return;
                case 0x207e8:
                    r2 = 3 << 16;
                    r2 = r2 + -14584;
                    writePages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff] = r2;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                case 0x20800:
                    pc=0x20800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20800() throws ExecutionException { /* 0x20800 - 0x20a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20800:
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20904;
                        continue;
                    }
                case 0x2080c:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                case 0x20820:
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20fc4;
                        run_20e00(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20fc4;
                        run_20e00(); return;
                    }
                    r3 = r0 + 48;
                    addr=r29+1204;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1205;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r17 = r17 | 2;
                    r4 = r0 + 2;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2056c;
                    run_20400(); return;
                case 0x20858:
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    addr=r29+1064;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                case 0x20878:
                    r4 = r0 + 1;
                    r5 = r0 + 1;
                    r3 = r0 + r0;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r4;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r5;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    r16 = r29 + 1064;
                    /* Next insn is delay slot */ 
                    pc=0x200ac;
                    run_20000(); return;
                case 0x208a0:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20668;
                        run_20600(); return;
                    }
                case 0x208bc:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2169c;
                        run_21600(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x2067c;
                    run_20600(); return;
                case 0x208e0:
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    r3 = 3 << 16;
                    r3 = r3 + -14564;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2080c;
                        continue;
                    }
                case 0x20904:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21654;
                        run_21600(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x20820;
                    continue;
                case 0x20928:
                    r2 = r17 & 16;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20a34;
                        run_20a00(); return;
                    }
                    r17 = r17 & 64;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20a34;
                        run_20a00(); return;
                    }
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x1fd0c;
                    run_1fc00(); return;
                case 0x20978:
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20550;
                        run_20400(); return;
                    }
                case 0x2098c:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2167c;
                        run_21600(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r4 = r0 + r0;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2056c;
                    run_20400(); return;
                case 0x209bc:
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x205f4;
                        run_20400(); return;
                    }
                case 0x209d0:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x216b0;
                        run_21600(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r4 = r0 + 1;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2056c;
                    run_20400(); return;
                case 0x20a00:
                    pc=0x20a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20a00() throws ExecutionException { /* 0x20a00 - 0x20c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20a00:
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r2;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1fde0;
                    run_1fc00(); return;
                case 0x20a10:
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffa8;
                        run_1fe00(); return;
                    }
                    addr=r29+1064;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x20878;
                    run_20800(); return;
                case 0x20a34:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x1fd0c;
                    run_1fc00(); return;
                case 0x20a64:
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x201b8;
                    run_20000(); return;
                case 0x20a70:
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r2 = r2 + 1;
                    r3 = r4 < 2 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20eb0;
                        run_20e00(); return;
                    }
                case 0x20a94:
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2138c;
                        run_21200(); return;
                    }
                    r8 = r8 + 8;
                case 0x20ab4:
                    r4 = readPages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r5 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r5;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x213bc;
                        run_21200(); return;
                    }
                    r8 = r8 + 8;
                case 0x20ae4:
                    f0 = r0;
                    f2 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x21114;
                        run_21000(); return;
                    }
                    r5 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    r4 = r5 + -1;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r2 = r2 + r4;
                case 0x20b20:
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20ed8;
                        run_20e00(); return;
                    }
                case 0x20b38:
                    r8 = r8 + 8;
                case 0x20b3c:
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r4 = r29 + 1188;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r5;
                    r2 = r5 + r2;
                case 0x20b50:
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20350;
                        run_20200(); return;
                    }
                case 0x20b68:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x20b7c;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x20b7c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x20354;
                    run_20200(); return;
                case 0x20b94:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x20ba8;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x20ba8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r0;
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2048c;
                    run_20400(); return;
                case 0x20bc0:
                    r5 = r0 + 1;
                    if(r4 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x20f8c;
                        run_20e00(); return;
                    }
                    r6 = r29 + 1104;
                    r5 = r0 + 2;
                    r16 = r6 + r0;
                    if(r4 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x20c14;
                        run_20c00(); return;
                    }
                    r5 = readPages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff];
                case 0x20be4:
                    r4 = r2 & 15;
                    r4 = r5 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r16 = r16 + -1;
                    r2 = r2 >>> 4;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20be4;
                        continue;
                    }
                case 0x20c00:
                    pc=0x20c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20c00() throws ExecutionException { /* 0x20c00 - 0x20e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20c00:
                case 0x20c04:
                    r6 = r6 - r16;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x205b4;
                    run_20400(); return;
                case 0x20c14:
                    r4 = r2 & 7;
                    r16 = r16 + -1;
                    r4 = r4 + 48;
                    r2 = r2 >>> 3;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20c14;
                        continue;
                    }
                    r2 = r17 & 1;
                    r5 = r16 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20c04;
                        continue;
                    }
                    r2 = r0 + 48;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x20c04;
                        continue;
                    }
                    r16 = r16 + -1;
                    r6 = r6 - r16;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x205b4;
                    run_20400(); return;
                case 0x20c64:
                    r18 = r18 < 102 ? 1 : 0;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20a70;
                        run_20a00(); return;
                    }
                    f0 = r0;
                    f2 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x20fd8;
                        run_20e00(); return;
                    }
                    r3 = 3 << 16;
                    r3 = r3 + -14536;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21720;
                        run_21600(); return;
                    }
                    r8 = r8 + 8;
                case 0x20ccc:
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r3 = r3 < r4 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20cf0;
                        continue;
                    }
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20354;
                        run_20200(); return;
                    }
                case 0x20cf0:
                    r3 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21918;
                        run_21800(); return;
                    }
                    r8 = r8 + 8;
                case 0x20d2c:
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r16 = r3 + -1;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x20354;
                        run_20200(); return;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x211b0;
                        run_21000(); return;
                    }
                    r5 = 3 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + -14176;
                    r18 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x20d78;
                    continue;
                case 0x20d64:
                    r8 = r8 + 8;
                case 0x20d68:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x211bc;
                        run_21000(); return;
                    }
                case 0x20d78:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20d64;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x20db0;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x20db0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x20d68;
                    continue;
                case 0x20dcc:
                    r3 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r4 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r20 = r3 - r4;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x20248;
                        run_20200(); return;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21bb8;
                        run_21a00(); return;
                    }
                    r4 = 3 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r4 + -14176;
                    r7 = r0 + 16;
                case 0x20e00:
                    pc=0x20e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20e00() throws ExecutionException { /* 0x20e00 - 0x21000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20e00:
                    /* Next insn is delay slot */ 
                    pc=0x20e1c;
                    continue;
                case 0x20e08:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20e80;
                        continue;
                    }
                case 0x20e1c:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r7;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20e08;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    writePages[(r29+1280)>>>12][((r29+1280)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x20e58;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x20e58:
                    r7 = readPages[(r29+1280)>>>12][((r29+1280)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20e1c;
                        continue;
                    }
                case 0x20e80:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21408;
                        run_21400(); return;
                    }
                    r8 = r8 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x20248;
                    run_20200(); return;
                case 0x20eb0:
                    r3 = r17 & 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20a94;
                        run_20a00(); return;
                    }
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20b38;
                        run_20a00(); return;
                    }
                case 0x20ed8:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x20eec;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x20eec:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x20b3c;
                    run_20a00(); return;
                case 0x20f08:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x20f1c;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x20f1c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x20318;
                    run_20200(); return;
                case 0x20f34:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x20f48;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x20f48:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x20238;
                    run_20200(); return;
                case 0x20f60:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x20f74;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x20f74:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x201f4;
                    run_20000(); return;
                case 0x20f8c:
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x211d0;
                        run_21000(); return;
                    }
                    r2 = r2 + 48;
                    r4 = r0 + 1;
                    addr=r29+1103;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r4;
                    r16 = r29 + 1103;
                    /* Next insn is delay slot */ 
                    pc=0x205b4;
                    run_20400(); return;
                case 0x20fb4:
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r0;
                    r16 = r29 + 1104;
                    /* Next insn is delay slot */ 
                    pc=0x205b4;
                    run_20400(); return;
                case 0x20fc4:
                    r4 = r0 + 2;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2056c;
                    run_20400(); return;
                case 0x20fd8:
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2174c;
                        run_21600(); return;
                    }
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r4 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r18 = r16 + r3;
                    r20 = r18 - r16;
                    r3 = r4 < r20 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21008;
                        run_21000(); return;
                    }
                case 0x21000:
                    pc=0x21000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21000() throws ExecutionException { /* 0x21000 - 0x21200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21000:
                    r20 = r4 + r0;
                case 0x21008:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2103c;
                        continue;
                    }
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + r20;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x219cc;
                        run_21800(); return;
                    }
                    r8 = r8 + 8;
                case 0x2103c:
                    if(r20 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x219c0;
                        run_21800(); return;
                    }
                case 0x21044:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r20 = r3 - r20;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x21238;
                        run_21200(); return;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x216d0;
                        run_21600(); return;
                    }
                    r5 = 3 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + -14176;
                    r30 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x21090;
                    continue;
                case 0x2107c:
                    r8 = r8 + 8;
                case 0x21080:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x216dc;
                        run_21600(); return;
                    }
                case 0x21090:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r30;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2107c;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x210c8;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x210c8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x21080;
                    continue;
                case 0x210e4:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x210f8;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x210f8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x201b8;
                    run_20000(); return;
                case 0x21114:
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r16 = r4 + -1;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x20b3c;
                        run_20a00(); return;
                    }
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x213ec;
                        run_21200(); return;
                    }
                    r4 = 3 << 16;
                    r23 = r4 + -14176;
                    r18 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x2115c;
                    continue;
                case 0x21148:
                    r8 = r8 + 8;
                case 0x2114c:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x213f4;
                        run_21200(); return;
                    }
                case 0x2115c:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21148;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x21194;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x21194:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2114c;
                    continue;
                case 0x211b0:
                    r4 = 3 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r4 + -14176;
                case 0x211bc:
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    r2 = r2 + r16;
                    /* Next insn is delay slot */ 
                    pc=0x20b50;
                    run_20a00(); return;
                case 0x211d0:
                    r6 = r29 + 1104;
                    r16 = r6 + r0;
                    r4 = r0 + 10;
                case 0x211dc:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        if(r4!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                        }
                        pc=0x211e8;
                        continue;
                    }
                    if(r4!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x211e8:
                    r16 = r16 + -1;
                    r5 = hi;
                    r5 = r5 + 48;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = lo;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x211dc;
                        continue;
                    }
                case 0x21200:
                    pc=0x21200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21200() throws ExecutionException { /* 0x21200 - 0x21400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21200:
                    r6 = r6 - r16;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x205b4;
                    run_20400(); return;
                case 0x21214:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x21228;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x21228:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                case 0x21238:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r5 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r16 = r16 + r3;
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r4 = r3 < r5 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21264;
                        continue;
                    }
                    r4 = r17 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21298;
                        continue;
                    }
                case 0x21264:
                    r4 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    r5 = readPages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + r5;
                    r4 = r4 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r5;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x219f8;
                        run_21800(); return;
                    }
                    r8 = r8 + 8;
                case 0x21298:
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r18 = r18 - r16;
                    r3 = r4 - r3;
                    r4 = r18 < r3 ? 1 : 0;
                    r20 = r3 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x212b8;
                        continue;
                    }
                    r20 = r18 + r0;
                case 0x212b8:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x212ec;
                        continue;
                    }
                    r4 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + r20;
                    r4 = r4 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21a6c;
                        run_21a00(); return;
                    }
                    r8 = r8 + 8;
                case 0x212ec:
                    if(r20 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x21a60;
                        run_21a00(); return;
                    }
                case 0x212f4:
                    r16 = r3 - r20;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x20354;
                        run_20200(); return;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x211b0;
                        run_21000(); return;
                    }
                    r5 = 3 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + -14176;
                    r18 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x21338;
                    continue;
                case 0x21324:
                    r8 = r8 + 8;
                case 0x21328:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x211bc;
                        run_21000(); return;
                    }
                case 0x21338:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21324;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x21370;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x21370:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x21328;
                    continue;
                case 0x2138c:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x213a0;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x213a0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x20ab4;
                    run_20a00(); return;
                case 0x213bc:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x213d0;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x213d0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x20ae4;
                    run_20a00(); return;
                case 0x213ec:
                    r5 = 3 << 16;
                    r23 = r5 + -14176;
                case 0x213f4:
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    r2 = r2 + r16;
                case 0x21400:
                    pc=0x21400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21400() throws ExecutionException { /* 0x21400 - 0x21600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21400:
                    /* Next insn is delay slot */ 
                    pc=0x20b20;
                    run_20a00(); return;
                case 0x21408:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2141c;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x2141c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x20248;
                    run_20200(); return;
                case 0x21434:
                    r3 = r0 + 45;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 - r2;
                    r3 = r0 + 45;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x2056c;
                    run_20400(); return;
                case 0x21450:
                    f12 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    f13 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x21464;
                    pc=0x28400;
                    run_28400(); return;
                case 0x21464:
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21888;
                        run_21800(); return;
                    }
                    r9 = r0 + -33;
                    r2 = r0 + -1;
                    r20 = r18 & r9;
                    if(r30 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x21df4;
                        run_21c00(); return;
                    }
                    r2 = r0 + 71;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x21d14;
                        run_21c00(); return;
                    }
                case 0x21490:
                    r2 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    r23 = r17 | 256;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x21d68;
                        run_21c00(); return;
                    }
                    f0 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r0;
                    f1 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    writePages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff] = f0;
                    writePages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff] = f1;
                case 0x214b8:
                    r2 = r0 + 102;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x21b68;
                        run_21a00(); return;
                    }
                    r2 = r0 + 70;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x21b68;
                        run_21a00(); return;
                    }
                    r2 = r0 + 69;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x21d5c;
                        run_21c00(); return;
                    }
                    r5 = r30 + r0;
                case 0x214e0:
                    r2 = r0 + 2;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r29 + 1200;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r29 + 1196;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r7 = readPages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff];
                    r2 = r29 + 1180;
                    r6 = readPages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r4 = r21 + r0;
                    writePages[(r29+1280)>>>12][((r29+1280)>>>2)&0x3ff] = r5;
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x21520;
                    pc=0x23200;
                    run_23200(); return;
                case 0x21520:
                    r16 = r2 + r0;
                    r2 = r0 + 103;
                    r5 = readPages[(r29+1280)>>>12][((r29+1280)>>>2)&0x3ff];
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x21544;
                        continue;
                    }
                    r2 = r0 + 71;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x21550;
                        continue;
                    }
                case 0x21544:
                    r2 = r17 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21e00;
                        run_21e00(); return;
                    }
                case 0x21550:
                    r2 = r0 + 70;
                    r4 = r16 + r5;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x21bd8;
                        run_21a00(); return;
                    }
                case 0x21560:
                    f0 = r0;
                    f2 = readPages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x21bcc;
                        run_21a00(); return;
                    }
                    r2 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x215bc;
                        continue;
                    }
                    r5 = r0 + 48;
                case 0x2159c:
                    r3 = r2 + 1;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2159c;
                        continue;
                    }
                case 0x215bc:
                    r2 = r2 - r16;
                    writePages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff] = r2;
                    r2 = r0 + 71;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x21b18;
                        run_21a00(); return;
                    }
                    r2 = r18 < 102 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21fa0;
                        run_21e00(); return;
                    }
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r2 = r0 + 102;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r3;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x21e0c;
                        run_21e00(); return;
                    }
                case 0x215f0:
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r4 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r2 = r4 < r3 ? 1 : 0;
                case 0x21600:
                    pc=0x21600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21600() throws ExecutionException { /* 0x21600 - 0x21800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21600:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21d90;
                        run_21c00(); return;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21dc8;
                        run_21c00(); return;
                    }
                    r2 = r4 + r0;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x21fbc;
                        run_21e00(); return;
                    }
                case 0x21620:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r18 = r0 + 103;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                case 0x2162c:
                    r5 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21af8;
                        run_21a00(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    r17 = r23 + r0;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x20094;
                    run_20000(); return;
                case 0x21654:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x20820;
                    run_20800(); return;
                case 0x21668:
                    r2 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r3 = r2 + 7;
                    /* Next insn is delay slot */ 
                    pc=0x2072c;
                    run_20600(); return;
                case 0x2167c:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r4 = r0 + r0;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2056c;
                    run_20400(); return;
                case 0x2169c:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x2067c;
                    run_20600(); return;
                case 0x216b0:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r4 = r0 + 1;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2056c;
                    run_20400(); return;
                case 0x216d0:
                    r4 = 3 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r4 + -14176;
                case 0x216dc:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21214;
                        run_21200(); return;
                    }
                    r8 = r8 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x21238;
                    run_21200(); return;
                case 0x2170c:
                    r4 = 3 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r4 + -14176;
                    /* Next insn is delay slot */ 
                    pc=0x202f0;
                    run_20200(); return;
                case 0x21720:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x21734;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x21734:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x20ccc;
                    run_20c00(); return;
                case 0x2174c:
                    r4 = 3 << 16;
                    r4 = r4 + -14536;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    r4 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x218e8;
                        run_21800(); return;
                    }
                    r8 = r8 + 8;
                    r18 = r3 + r0;
                case 0x21788:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x217ac;
                        continue;
                    }
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x217ac;
                        continue;
                    }
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20354;
                        run_20200(); return;
                    }
                case 0x217ac:
                    r3 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21d28;
                        run_21c00(); return;
                    }
                    r8 = r8 + 8;
                case 0x217e8:
                    r18 = r0 - r18;
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2196c;
                        run_21800(); return;
                    }
                    r4 = r18 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21a28;
                        run_21a00(); return;
                    }
                case 0x21800:
                    pc=0x21800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21800() throws ExecutionException { /* 0x21800 - 0x21a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21800:
                    r5 = 3 << 16;
                    r23 = r5 + -14176;
                    r20 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x21828;
                    continue;
                case 0x21814:
                    r8 = r8 + 8;
                case 0x21818:
                    r18 = r18 + -16;
                    r4 = r18 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21a30;
                        run_21a00(); return;
                    }
                case 0x21828:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21814;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x21860;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x21860:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x21818;
                    continue;
                case 0x2187c:
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r30;
                    /* Next insn is delay slot */ 
                    pc=0x20070;
                    run_20000(); return;
                case 0x21888:
                    r2 = r18 < 72 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21b58;
                        run_21a00(); return;
                    }
                    r16 = 3 << 16;
                    r16 = r16 + -14592;
                case 0x2189c:
                    r2 = r0 + -129;
                    r17 = r17 & r2;
                    r5 = r0 + 3;
                    r2 = r0 + 3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r5;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x20094;
                    run_20000(); return;
                case 0x218c8:
                    r16 = 3 << 16;
                    r16 = r16 + -14596;
                    /* Next insn is delay slot */ 
                    pc=0x207b0;
                    run_20600(); return;
                case 0x218d8:
                    r30 = r0 + -1;
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1fde8;
                    run_1fc00(); return;
                case 0x218e8:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x218fc;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x218fc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    r18 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x21788;
                    run_21600(); return;
                case 0x21918:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2192c;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x2192c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x20d2c;
                    run_20c00(); return;
                case 0x21944:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x21958;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x21958:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                case 0x2196c:
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r2 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x20b50;
                    run_20a00(); return;
                case 0x21984:
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x21990;
                    pc=0x10268;
                    run_10200(); return;
                case 0x21990:
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x20080;
                        run_20000(); return;
                    }
                case 0x219a0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x20080;
                    run_20000(); return;
                case 0x219ac:
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x20188;
                    run_20000(); return;
                case 0x219c0:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x21044;
                    run_21000(); return;
                case 0x219cc:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x219e0;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x219e0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2103c;
                    run_21000(); return;
                case 0x219f8:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                case 0x21a00:
                    pc=0x21a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21a00() throws ExecutionException { /* 0x21a00 - 0x21c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21a00:
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x21a0c;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x21a0c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x21298;
                    run_21200(); return;
                case 0x21a28:
                    r4 = 3 << 16;
                    r23 = r4 + -14176;
                case 0x21a30:
                    r3 = r3 + 1;
                    r2 = r2 + r18;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21944;
                        run_21800(); return;
                    }
                    r8 = r8 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x2196c;
                    run_21800(); return;
                case 0x21a60:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x212f4;
                    run_21200(); return;
                case 0x21a6c:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x21a80;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x21a80:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r5 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = r5 - r3;
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x212ec;
                    run_21200(); return;
                case 0x21aa4:
                    r3 = (r30&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    r2 = r30 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21ab8;
                        continue;
                    }
                    r2 = r0 + 6;
                case 0x21ab8:
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x21ef0;
                        run_21e00(); return;
                    }
                case 0x21ac4:
                    r16 = 3 << 16;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r20;
                    r3 = r0 + r0;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    r16 = r16 + -14544;
                    /* Next insn is delay slot */ 
                    pc=0x200ac;
                    run_20000(); return;
                case 0x21ae8:
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x20408;
                    run_20400(); return;
                case 0x21af8:
                    r3 = r0 + 45;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    r17 = r23 + r0;
                    r3 = r0 + 45;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2009c;
                    run_20000(); return;
                case 0x21b18:
                    r2 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r3 = r2 < -3 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21c58;
                        run_21c00(); return;
                    }
                    r3 = r30 < r2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21c58;
                        run_21c00(); return;
                    }
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x215f0;
                    run_21400(); return;
                case 0x21b44:
                    r2 = r0 + 45;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + 45;
                    /* Next insn is delay slot */ 
                    pc=0x2079c;
                    run_20600(); return;
                case 0x21b58:
                    r16 = 3 << 16;
                    r16 = r16 + -14588;
                    /* Next insn is delay slot */ 
                    pc=0x2189c;
                    run_21800(); return;
                case 0x21b68:
                    r2 = r0 + 3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r29 + 1200;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r29 + 1196;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r7 = readPages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff];
                    r2 = r29 + 1180;
                    r6 = readPages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r30;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r4 = r21 + r0;
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x21ba4;
                    pc=0x23200;
                    run_23200(); return;
                case 0x21ba4:
                    r16 = r2 + r0;
                    r5 = r30 + r0;
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x21550;
                    run_21400(); return;
                case 0x21bb8:
                    r5 = 3 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + -14176;
                    /* Next insn is delay slot */ 
                    pc=0x20e80;
                    run_20e00(); return;
                case 0x21bcc:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x215bc;
                    run_21400(); return;
                case 0x21bd8:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 48;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x21bfc;
                        continue;
                    }
                case 0x21be8:
                    r2 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r4 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x21560;
                    run_21400(); return;
                case 0x21bfc:
                    f0 = r0;
                case 0x21c00:
                    pc=0x21c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21c00() throws ExecutionException { /* 0x21c00 - 0x21e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21c00:
                    f2 = readPages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x21be8;
                        run_21a00(); return;
                    }
                    r2 = r0 + 1;
                    r2 = r2 - r5;
                    writePages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff] = r2;
                    r4 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x21560;
                    run_21400(); return;
                case 0x21c38:
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r30;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r30;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x20094;
                    run_20000(); return;
                case 0x21c58:
                    r18 = r18 + -2;
                case 0x21c5c:
                    r2 = r2 + -1;
                    writePages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff] = r2;
                    addr=r29+1188;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x21f3c;
                        run_21e00(); return;
                    }
                    r3 = r0 + 43;
                    addr=r29+1189;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x21c78:
                    r3 = r2 < 10 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21e38;
                        run_21e00(); return;
                    }
                    r2 = r2 + 48;
                    r3 = r0 + 48;
                    addr=r29+1191;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1190;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r29 + 1192;
                    r4 = r29 + 1188;
                case 0x21c9c:
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r4 = r2 - r4;
                    r3 = r3 + r4;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r4;
                    r2 = r3 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21ce8;
                        continue;
                    }
                case 0x21cc0:
                    r3 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    r2 = r3 + r0;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x21d04;
                        continue;
                    }
                case 0x21cdc:
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x2162c;
                    run_21600(); return;
                case 0x21ce8:
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21cc0;
                        continue;
                    }
                    r2 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x21cdc;
                        continue;
                    }
                case 0x21d04:
                    r2 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x2162c;
                    run_21600(); return;
                case 0x21d14:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21490;
                        run_21400(); return;
                    }
                    r30 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x21490;
                    run_21400(); return;
                case 0x21d28:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x21d3c;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x21d3c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffcc;
                        run_1fe00(); return;
                    }
                    r18 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x217e8;
                    run_21600(); return;
                case 0x21d5c:
                    r5 = r30 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x214e0;
                    run_21400(); return;
                case 0x21d68:
                    r3 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    r4 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    r2 = r3 ^ r2;
                    r5 = r0 + 45;
                    writePages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff] = r2;
                    writePages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff] = r4;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x214b8;
                    run_21400(); return;
                case 0x21d90:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x21f2c;
                        run_21e00(); return;
                    }
                    r2 = r0 + 1;
                case 0x21da4:
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x21de4;
                        continue;
                    }
                case 0x21dbc:
                    r18 = r0 + 103;
                    /* Next insn is delay slot */ 
                    pc=0x2162c;
                    run_21600(); return;
                case 0x21dc8:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    r2 = r3 + r0;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x21dbc;
                        continue;
                    }
                case 0x21de4:
                    r2 = r0 + r0;
                    r18 = r0 + 103;
                    /* Next insn is delay slot */ 
                    pc=0x2162c;
                    run_21600(); return;
                case 0x21df4:
                    r30 = r0 + 6;
                    /* Next insn is delay slot */ 
                    pc=0x21490;
                    run_21400(); return;
                case 0x21e00:
                    pc=0x21e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21e00() throws ExecutionException { /* 0x21e00 - 0x22000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21e00:
                    r2 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x215bc;
                    run_21400(); return;
                case 0x21e0c:
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x21f50;
                        continue;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21ecc;
                        continue;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21ecc;
                        continue;
                    }
                    r2 = r3 + r0;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x2162c;
                    run_21600(); return;
                case 0x21e38:
                    r6 = r29 + 1187;
                    r3 = r6 + r0;
                    r4 = r0 + 10;
                case 0x21e44:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r4; lo = r2/r4;
                        pc=0x21e50;
                        continue;
                    }
                    hi = r2%r4; lo = r2/r4;
                    throw new ExecutionException("Break");
                case 0x21e50:
                    r3 = r3 + -1;
                    r5 = hi;
                    r5 = r5 + 48;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = lo;
                    r5 = r2 < 10 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21e44;
                        continue;
                    }
                    r2 = r2 + 48;
                    r5 = r2 << 24;
                    r4 = r3 + -1;
                    r5 = r5 >> 24;
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21fac;
                        continue;
                    }
                    r2 = r29 + 1190;
                    /* Next insn is delay slot */ 
                    pc=0x21ea0;
                    continue;
                case 0x21e9c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x21ea0:
                    r2 = r2 + 1;
                    r4 = r4 + 1;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x21e9c;
                        continue;
                    }
                    r4 = r29 + 1188;
                    r2 = r4 - r3;
                    r3 = r29 + 1190;
                    r2 = r3 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x21c9c;
                    run_21c00(); return;
                case 0x21ecc:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r2 = r30 + 1;
                    r2 = r3 + r2;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2162c;
                        run_21600(); return;
                    }
                case 0x21ee4:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2162c;
                    run_21600(); return;
                case 0x21ef0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x21ac4;
                    run_21a00(); return;
                case 0x21efc:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r30 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r2 = r3 + 4;
                    r3 = r4 + r0;
                    if(r30 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x20a00;
                        run_20a00(); return;
                    }
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r2;
                    r30 = r0 + -1;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1fde0;
                    run_1fc00(); return;
                case 0x21f2c:
                    r2 = r0 + 2;
                    r2 = r2 - r3;
                    /* Next insn is delay slot */ 
                    pc=0x21da4;
                    run_21c00(); return;
                case 0x21f3c:
                    r3 = r0 + 45;
                    r2 = r0 - r2;
                    addr=r29+1189;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x21c78;
                    run_21c00(); return;
                case 0x21f50:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21f84;
                        continue;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21f84;
                        continue;
                    }
                    r3 = r0 + 1;
                    r2 = r0 + 1;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x2162c;
                    run_21600(); return;
                case 0x21f78:
                    r16 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x1ff18;
                    run_1fe00(); return;
                case 0x21f84:
                    r30 = r30 + 2;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r30;
                    r2 = r30 + r0;
                    if(r30 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2162c;
                        run_21600(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x21ee4;
                    continue;
                case 0x21fa0:
                    r2 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x21c5c;
                    run_21c00(); return;
                case 0x21fac:
                    r2 = r29 + 1190;
                    r4 = r29 + 1188;
                    /* Next insn is delay slot */ 
                    pc=0x21c9c;
                    run_21c00(); return;
                case 0x21fbc:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x21620;
                    run_21600(); return;
                case 0x22000:
                    pc=0x22000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22000() throws ExecutionException { /* 0x22000 - 0x22200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22000:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = readPages[(r28+-32716)>>>12][((r28+-32716)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22034;
                        continue;
                    }
                    r3 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22144;
                        continue;
                    }
                case 0x22034:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r6 = tmp;
                    r2 = r6 & 65535;
                    r3 = r2 & 8;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x220a4;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x220d4;
                        continue;
                    }
                case 0x2205c:
                    r4 = r2 & 1;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22104;
                        continue;
                    }
                    r2 = r2 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22154;
                        continue;
                    }
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                case 0x22080:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2211c;
                        continue;
                    }
                case 0x22088:
                    r2 = r0 + r0;
                case 0x2208c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x220a4:
                    r3 = r2 & 16;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x221b0;
                        continue;
                    }
                    r2 = r2 & 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22164;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                case 0x220c0:
                    r2 = r6 | 8;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 & 65535;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2205c;
                        continue;
                    }
                case 0x220d4:
                    r5 = r2 & 640;
                    r4 = r0 + 512;
                    if(r5 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2205c;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x220f4;
                    pc=0x1c600;
                    run_1c600(); return;
                case 0x220f4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2205c;
                    continue;
                case 0x22104:
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    r2 = r0 - r2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22088;
                        continue;
                    }
                case 0x2211c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + r0;
                    r4 = r3 & 128;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2208c;
                        continue;
                    }
                    r3 = r3 | 64;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x2208c;
                    continue;
                case 0x22144:
                    /* Next insn is delay slot */ 
                    r31=0x2214c;
                    pc=0x1a600;
                    run_1a600(); return;
                case 0x2214c:
                    /* Next insn is delay slot */ 
                    pc=0x22034;
                    continue;
                case 0x22154:
                    r2 = r0 + r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x22080;
                    continue;
                case 0x22164:
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22194;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x22190;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2218c;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x2218c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r6 = tmp;
                case 0x22190:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x22194:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r0 + -37;
                    r6 = r6 & r2;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x220c0;
                    continue;
                case 0x221b0:
                    r2 = r0 + 9;
                    r6 = r6 | 64;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r6&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x2208c;
                    continue;
                case 0x22200:
                    pc=0x22200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22200() throws ExecutionException { /* 0x22200 - 0x22400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22200:
                    r2 = r0 + 1;
                    pc = 0x22204;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x22208;
                        return;
                    }
                case 0x22208:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22210:
                    r2 = r0 + 3;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x22224;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x22228;
                        return;
                    }
                case 0x22228:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22240;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22240:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x22400;
                    run_22400(); return;
                case 0x22250:
                    r2 = r0 + 4;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x22264;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x22268;
                        return;
                    }
                case 0x22268:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22280;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22280:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x22400;
                    run_22400(); return;
                case 0x22290:
                    r2 = r0 + 5;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x222a4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x222a8;
                        return;
                    }
                case 0x222a8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x222c0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x222c0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x22400;
                    run_22400(); return;
                case 0x222d0:
                    r2 = r0 + 6;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x222e4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x222e8;
                        return;
                    }
                case 0x222e8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22300;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22300:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x22400;
                    run_22400(); return;
                case 0x22310:
                    r2 = r0 + 7;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x22324;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x22328;
                        return;
                    }
                case 0x22328:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22340;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22340:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x22400;
                    run_22400(); return;
                case 0x22350:
                    r2 = r0 + 8;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x22364;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x22368;
                        return;
                    }
                case 0x22368:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22380;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22380:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x22400;
                    run_22400(); return;
                case 0x22390:
                    r2 = r0 + 10;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x223a4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x223a8;
                        return;
                    }
                case 0x223a8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x223c0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x223c0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x22400;
                    run_22400(); return;
                case 0x223d0:
                    r2 = r0 + 19;
                    pc = 0x223d4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x223d8;
                        return;
                    }
                case 0x223d8:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x223e0:
                    r2 = r0 + 37;
                    pc = 0x223e4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x223e8;
                        return;
                    }
                case 0x223e8:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x223f0:
                    r2 = r0 + 38;
                    pc = 0x223f4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x223f8;
                        return;
                    }
                case 0x223f8:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22400:
                    pc=0x22400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22400() throws ExecutionException { /* 0x22400 - 0x22600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22400:
                    r5 = r0 - r5;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r5;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22600:
                    pc=0x22600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22600() throws ExecutionException { /* 0x22600 - 0x22800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22600:
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x25600;
                    run_25600(); return;
                case 0x22800:
                    pc=0x22800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22800() throws ExecutionException { /* 0x22800 - 0x22a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22800:
                    r29 = r29 + -48;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r17;
                    r2 = readPages[(r16+328)>>>12][((r16+328)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22930;
                        continue;
                    }
                case 0x22824:
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r8 = r3 < 32 ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x228ac;
                        continue;
                    }
                    r2 = 2 << 16;
                    r2 = r2 + -14336;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22864;
                        continue;
                    }
                case 0x22848:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r17 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r16 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22864:
                    r4 = r0 + 400;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r6;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x2287c;
                    pc=0x1c800;
                    run_1c800(); return;
                case 0x2287c:
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r7 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22848;
                        continue;
                    }
                    r3 = readPages[(r16+328)>>>12][((r16+328)>>>2)&0x3ff];
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r0;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    writePages[(r16+328)>>>12][((r16+328)>>>2)&0x3ff] = r2;
                    r3 = r0 + r0;
                    writePages[(r2+392)>>>12][((r2+392)>>>2)&0x3ff] = r0;
                    writePages[(r2+396)>>>12][((r2+396)>>>2)&0x3ff] = r0;
                case 0x228ac:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x228e8;
                        continue;
                    }
                case 0x228b4:
                    r4 = r3 + 1;
                    r3 = r3 + 2;
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r3 = r3 << 2;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r4;
                    r2 = r2 + r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r5;
                    r17 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r16 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x228e8:
                    r4 = r3 << 2;
                    r4 = r2 + r4;
                    writePages[(r4+136)>>>12][((r4+136)>>>2)&0x3ff] = r6;
                    r8 = readPages[(r2+392)>>>12][((r2+392)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r6 = r6 << (r3&0x1f);
                    r8 = r8 | r6;
                    writePages[(r2+392)>>>12][((r2+392)>>>2)&0x3ff] = r8;
                    writePages[(r4+264)>>>12][((r4+264)>>>2)&0x3ff] = r7;
                    r4 = r0 + 2;
                    if(r17 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x228b4;
                        continue;
                    }
                    r4 = readPages[(r2+396)>>>12][((r2+396)>>>2)&0x3ff];
                    r6 = r4 | r6;
                    writePages[(r2+396)>>>12][((r2+396)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x228b4;
                    continue;
                case 0x22930:
                    r2 = r16 + 332;
                    writePages[(r16+328)>>>12][((r16+328)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x22824;
                    continue;
                case 0x22a00:
                    pc=0x22a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22a00() throws ExecutionException { /* 0x22a00 - 0x22c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22a00:
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r29 = r29 + -64;
                    r2 = r2 + 328;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r4;
                    r19 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r20 = r0 + 1;
                    r21 = r0 + -1;
                case 0x22a48:
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r23 = readPages[(r2+328)>>>12][((r2+328)>>>2)&0x3ff];
                    if(r23 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22acc;
                        continue;
                    }
                    r30 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x22a64:
                    r3 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r16 = r3 + -1;
                    if(r16 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x22abc;
                        continue;
                    }
                    r18 = r3 + 1;
                    r17 = r23 + 136;
                    r4 = r16 << 2;
                    r18 = r18 << 2;
                    r17 = r17 + r4;
                    r18 = r23 + r18;
                case 0x22a90:
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22b00;
                        continue;
                    }
                    r3 = readPages[(r17+128)>>>12][((r17+128)>>>2)&0x3ff];
                    if(r3 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x22b00;
                        continue;
                    }
                case 0x22aa8:
                    r16 = r16 + -1;
                    r17 = r17 + -4;
                    r18 = r18 + -4;
                    if(r16 != r21) {
                        /* Next insn is delay slot */ 
                        pc=0x22a90;
                        continue;
                    }
                case 0x22abc:
                    r2 = 2 << 16;
                    r2 = r2 + -13824;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22bb4;
                        continue;
                    }
                case 0x22acc:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22b00:
                    r4 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r3 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r4 = r4 + -1;
                    if(r4 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x22b94;
                        continue;
                    }
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r0;
                case 0x22b18:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22aa8;
                        continue;
                    }
                    r5 = readPages[(r23+392)>>>12][((r23+392)>>>2)&0x3ff];
                    r4 = r20 << (r16&0x1f);
                    r5 = r4 & r5;
                    r22 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22b84;
                        continue;
                    }
                    r5 = readPages[(r23+396)>>>12][((r23+396)>>>2)&0x3ff];
                    r4 = r4 & r5;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22ba0;
                        continue;
                    }
                    r4 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r5 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x22b5c;
                    return;
                case 0x22b5c:
                    r3 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    if(r3 != r22) {
                        /* Next insn is delay slot */ 
                        pc=0x22a48;
                        continue;
                    }
                    r3 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    if(r3 == r23) {
                        /* Next insn is delay slot */ 
                        pc=0x22aa8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x22a48;
                    continue;
                case 0x22b84:
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x22b8c;
                    return;
                case 0x22b8c:
                    /* Next insn is delay slot */ 
                    pc=0x22b5c;
                    continue;
                case 0x22b94:
                    writePages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x22b18;
                    continue;
                case 0x22ba0:
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x22bac;
                    return;
                case 0x22bac:
                    /* Next insn is delay slot */ 
                    pc=0x22b5c;
                    continue;
                case 0x22bb4:
                    r3 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22bfc;
                        continue;
                    }
                    r3 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22c10;
                        run_22c00(); return;
                    }
                    r4 = r23 + r0;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x22be4;
                    pc=0x1ca00;
                    run_1ca00(); return;
                case 0x22be4:
                    r23 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                case 0x22bec:
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22a64;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x22acc;
                    continue;
                case 0x22bfc:
                    r3 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                case 0x22c00:
                    pc=0x22c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22c00() throws ExecutionException { /* 0x22c00 - 0x22e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22c00:
                    r30 = r23 + r0;
                    r23 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x22bec;
                    run_22a00(); return;
                case 0x22c10:
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x22c00;
                    continue;
                case 0x22e00:
                    pc=0x22e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22e00() throws ExecutionException { /* 0x22e00 - 0x23000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22e00:
                    r29 = r29 + -48;
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    r2 = r2 < r17 ? 1 : 0;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r20 = r4 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23074;
                        run_23000(); return;
                    }
                    r17 = r17 + -1;
                    r12 = r17 << 2;
                    r16 = r5 + 20;
                    r18 = r16 + r12;
                    r19 = r4 + 20;
                    r12 = r19 + r12;
                    r22 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r2 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                    r22 = r22 + 1;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        if(r22!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                        }
                        pc=0x22e6c;
                        continue;
                    }
                    if(r22!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x22e6c:
                    r22 = lo;
                    r21 = lo;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22f68;
                        continue;
                    }
                    r6 = r16 + r0;
                    r3 = r19 + r0;
                    r4 = r0 + r0;
                    r2 = r0 + r0;
                case 0x22e8c:
                    r6 = r6 + 4;
                    r11 = readPages[(r6+-4)>>>12][((r6+-4)>>>2)&0x3ff];
                    r8 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r10 = r11 & 65535;
                    { long hilo = (long)(r22) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r11 = r11 >>> 16;
                    r3 = r3 + 4;
                    r10 = lo;
                    r10 = r4 + r10;
                    r4 = r10 >>> 16;
                    { long hilo = (long)(r22) * ((long)r11); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r7 = r10 & 65535;
                    r7 = r2 - r7;
                    r11 = lo;
                    r9 = r4 + r11;
                    r11 = r8 & 65535;
                    r7 = r7 + r11;
                    r4 = r9 >>> 16;
                    r8 = r8 >>> 16;
                    r9 = r9 & 65535;
                    r2 = r7 >> 16;
                    r8 = r8 - r9;
                    r8 = r8 + r2;
                    r2 = r8 >> 16;
                    r7 = r7 & 65535;
                    r8 = r8 << 16;
                    r7 = r8 | r7;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r7;
                    r7 = ((r18 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22e8c;
                        continue;
                    }
                    r2 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22f68;
                        continue;
                    }
                    r2 = r12 + -4;
                    r3 = ((r19 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22f64;
                        continue;
                    }
                    r3 = readPages[(r12+-4)>>>12][((r12+-4)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22f50;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x22f64;
                    continue;
                case 0x22f40:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22f64;
                        continue;
                    }
                case 0x22f50:
                    r2 = r2 + -4;
                    r3 = ((r19 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r17 = r17 + -1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22f40;
                        continue;
                    }
                case 0x22f64:
                    writePages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff] = r17;
                case 0x22f68:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x22f74;
                    pc=0x27400;
                    run_27400(); return;
                case 0x22f74:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x23044;
                        run_23000(); return;
                    }
                    r21 = r22 + 1;
                    r3 = r19 + r0;
                    r8 = r0 + r0;
                case 0x22f88:
                    r16 = r16 + 4;
                    r7 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r5 = r7 & 65535;
                    r2 = r6 & 65535;
                    r5 = r8 - r5;
                    r5 = r5 + r2;
                    r6 = r6 >>> 16;
                    r7 = r7 >>> 16;
                    r2 = r5 >> 16;
                    r6 = r6 - r7;
                    r6 = r6 + r2;
                    r8 = r6 >> 16;
                    r5 = r5 & 65535;
                    r6 = r6 << 16;
                    r5 = r6 | r5;
                    r3 = r3 + 4;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r5;
                    r5 = ((r18 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22f88;
                        continue;
                    }
                    r3 = r17 << 2;
                    r3 = r19 + r3;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23044;
                        run_23000(); return;
                    }
                    r2 = r3 + -4;
                    r4 = ((r19 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23040;
                        run_23000(); return;
                    }
                case 0x23000:
                    pc=0x23000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23000() throws ExecutionException { /* 0x23000 - 0x23200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23000:
                    r3 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2302c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x23040;
                    continue;
                case 0x2301c:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23040;
                        continue;
                    }
                case 0x2302c:
                    r2 = r2 + -4;
                    r3 = ((r19 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r17 = r17 + -1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2301c;
                        continue;
                    }
                case 0x23040:
                    writePages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff] = r17;
                case 0x23044:
                    r2 = r21 + r0;
                case 0x23048:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23074:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x23048;
                    continue;
                case 0x23200:
                    pc=0x23200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23200() throws ExecutionException { /* 0x23200 - 0x23400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23200:
                    r5 = readPages[(r4+64)>>>12][((r4+64)>>>2)&0x3ff];
                    r29 = r29 + -128;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r17;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r16;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r31;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r30;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r23;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r22;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r21;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r20;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r19;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r18;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = f20;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = f21;
                    r16 = r4 + r0;
                    r17 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r7;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r6;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23270;
                        continue;
                    }
                    r2 = readPages[(r4+68)>>>12][((r4+68)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    r2 = r3 << (r2&0x1f);
                    writePages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x2326c;
                    pc=0x26200;
                    run_26200(); return;
                case 0x2326c:
                    writePages[(r16+64)>>>12][((r16+64)>>>2)&0x3ff] = r0;
                case 0x23270:
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2337c;
                        continue;
                    }
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                case 0x23288:
                    r2 = 32752 << 16;
                    r3 = r18 & r2;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23324;
                        continue;
                    }
                    f20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    f0 = r0;
                    f21 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x233a0;
                        continue;
                    }
                    r9 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    writePages[(r9+0)>>>12][((r9+0)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2396c;
                        run_23800(); return;
                    }
                    r2 = 3 << 16;
                    r2 = r2 + -14535;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = 3 << 16;
                    r2 = r2 + -14536;
                case 0x232e8:
                    f20 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r31 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r30 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r23 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r22 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r21 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r20 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r19 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r18 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r17 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r16 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    f21 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r29 = r29 + 128;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23324:
                    r8 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r9 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r0 + 9999;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r2;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2390c;
                        run_23800(); return;
                    }
                case 0x2333c:
                    r2 = 3 << 16;
                    r2 = r2 + -14132;
                case 0x23344:
                    r3 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x232e8;
                        continue;
                    }
                    addr=r2+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23930;
                        run_23800(); return;
                    }
                    r3 = r2 + 3;
                case 0x23368:
                    r8 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x232e8;
                    continue;
                case 0x2337c:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = 32767 << 16;
                    r18 = r18 | 65535;
                    r2 = r0 + 1;
                    r18 = r18 & r3;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    pc=0x23288;
                    continue;
                case 0x233a0:
                    r2 = r29 + 24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r7 = f20;
                    r2 = r29 + 28;
                    r6 = f21;
                    r4 = r16 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x233c4;
                    pc=0x27800;
                    run_27800(); return;
                case 0x233c4:
                    r4 = r18 >>> 20;
                    r17 = r2 + r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2393c;
                        run_23800(); return;
                    }
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r5 + r4;
                    r2 = r4 < -1041 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23ff0;
                        run_23e00(); return;
                    }
                    r2 = r0 + -1010;
                    r2 = r2 - r4;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = r18 << (r2&0x1f);
                case 0x23400:
                    pc=0x23400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23400() throws ExecutionException { /* 0x23400 - 0x23600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23400:
                    r2 = r4 + 1042;
                    r2 = r6 >>> (r2&0x1f);
                    r18 = r18 | r2;
                case 0x2340c:
                    f0 = r18;
                    { long l = Double.doubleToLongBits(((double)f0)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    if(r18 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x24598;
                        run_24400(); return;
                    }
                case 0x23420:
                    r2 = f3;
                    r6 = 65040 << 16;
                    r3 = f2;
                    r2 = r6 + r2;
                    r4 = r4 + -1;
                    r19 = r0 + 1;
                case 0x23438:
                    f4 = r3;
                    f0 = readPages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff];
                    f5 = r2;
                    f1 = readPages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff];
                    f6 = r4;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f0 = readPages[(r28+-32684)>>>12][((r28+-32684)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32688)>>>12][((r28+-32688)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f0 = readPages[(r28+-32676)>>>12][((r28+-32676)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32680)>>>12][((r28+-32680)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f0 = readPages[(r28+-32668)>>>12][((r28+-32668)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(((double)f6)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r28+-32672)>>>12][((r28+-32672)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r2 = fcsr;
                    r2 = fcsr;
                    r1 = r2 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f0 = (int)(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL))); break; // Round towards zero
                        case 2: f0 = (int)Math.ceil((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r2;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = f0;
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x23f84;
                        run_23e00(); return;
                    }
                case 0x234dc:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = (r8&0xffffffffL) < (23&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23f4c;
                        run_23e00(); return;
                    }
                    r3 = 3 << 16;
                    r2 = r8 << 3;
                    r3 = r3 + -14064;
                    r2 = r2 + r3;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f2 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x24008;
                        run_24000(); return;
                    }
                    r8 = r8 + -1;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r8;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                case 0x23530:
                    r4 = r5 - r4;
                    r23 = r4 + -1;
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x23f74;
                        run_23e00(); return;
                    }
                    r18 = r0 + r0;
                case 0x23544:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    if(r8 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x23f5c;
                        run_23e00(); return;
                    }
                    r23 = r23 + r8;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r8;
                    r22 = r0 + r0;
                case 0x23560:
                    r3 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r2 = (r3&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2397c;
                        run_23800(); return;
                    }
                    r2 = r3 < 6 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x249f8;
                        run_24800(); return;
                    }
                    r3 = r3 + -4;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r3;
                    r8 = r0 + r0;
                case 0x2358c:
                    r9 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    if(r9 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x245b4;
                        run_24400(); return;
                    }
                    r2 = r9 < 4 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2442c;
                        run_24400(); return;
                    }
                    r3 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x241fc;
                        run_24000(); return;
                    }
                    r2 = r0 + 5;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23980;
                        run_23800(); return;
                    }
                    r3 = r0 + 1;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r3;
                case 0x235cc:
                    r9 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r3 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r9 = r9 + r3;
                    r30 = r9 + 1;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r9;
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x24618;
                        run_24600(); return;
                    }
                    r6 = r30 + r0;
                case 0x235f0:
                    r2 = (r6&0xffffffffL) < (24&0xffffffffL) ? 1 : 0;
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24a04;
                        run_24a00(); return;
                    }
                case 0x23600:
                    pc=0x23600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23600() throws ExecutionException { /* 0x23600 - 0x23800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23600:
                    r3 = r0 + 1;
                    r2 = r0 + 4;
                case 0x23608:
                    r2 = r2 << 1;
                    r4 = r2 + 20;
                    r4 = ((r6 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    r5 = r3 + r0;
                    r3 = r3 + 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23608;
                        continue;
                    }
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r5;
                    r21 = r6 + r0;
                case 0x2362c:
                    r4 = r16 + r0;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r8;
                    r21 = (r21&0xffffffffL) < (15&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    r31=0x23640;
                    pc=0x26000;
                    run_26000(); return;
                case 0x23640:
                    r20 = r2 + r0;
                    writePages[(r16+64)>>>12][((r16+64)>>>2)&0x3ff] = r2;
                    r8 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x239b4;
                        run_23800(); return;
                    }
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x239b4;
                        run_23800(); return;
                    }
                    f8 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    f9 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r8 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2462c;
                        run_24600(); return;
                    }
                    r3 = r8 & 15;
                    r2 = 3 << 16;
                    r3 = r3 << 3;
                    r2 = r2 + -14064;
                    r2 = r3 + r2;
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r8 >> 4;
                    r3 = r2 & 16;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x245e0;
                        run_24400(); return;
                    }
                    r3 = 3 << 16;
                    f0 = readPages[(r3+-14068)>>>12][((r3+-14068)>>>2)&0x3ff];
                    r2 = r2 & 15;
                    f1 = readPages[(r3+-14072)>>>12][((r3+-14072)>>>2)&0x3ff];
                    r8 = r0 + 3;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x236b8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x236f8;
                        continue;
                    }
                    r3 = 3 << 16;
                    r3 = r3 + -14104;
                case 0x236c8:
                    r4 = r2 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x236e8;
                        continue;
                    }
                    f4 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    f5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                case 0x236e8:
                    r2 = r2 >> 1;
                    r3 = r3 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x236c8;
                        continue;
                    }
                case 0x236f8:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))/(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x236fc:
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2372c;
                        continue;
                    }
                    f2 = readPages[(r28+-32660)>>>12][((r28+-32660)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x248b4;
                        run_24800(); return;
                    }
                case 0x2372c:
                    f4 = r8;
                    r2 = 64704 << 16;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f2 = readPages[(r28+-32644)>>>12][((r28+-32644)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32648)>>>12][((r28+-32648)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f7 = (int)(l >>> 32); f6 = (int)l; }
                    r8 = f7;
                    r9 = f6;
                    r8 = r2 + r8;
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24500;
                        run_24400(); return;
                    }
                    r2 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r4 = r30 + r0;
                case 0x2376c:
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r5 = r4 + -1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24774;
                        run_24600(); return;
                    }
                    r3 = 3 << 16;
                    r5 = r5 << 3;
                    r3 = r3 + -14064;
                    r3 = r5 + r3;
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f4 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f5 = readPages[(r28+-32632)>>>12][((r28+-32632)>>>2)&0x3ff];
                    r6 = fcsr;
                    r6 = fcsr;
                    r1 = r6 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f6 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f6 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f6 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f6 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r6;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))/(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f4 = r9;
                    r7 = f6;
                    f5 = r8;
                    r5 = r7 + 48;
                    r5 = r5 << 24;
                    r5 = r5 >> 24;
                    r3 = r20 + 1;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    { long l = Double.doubleToLongBits(((double)f6)); f5 = (int)(l >>> 32); f4 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x238c0;
                        run_23800(); return;
                    }
                case 0x23800:
                    pc=0x23800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23800() throws ExecutionException { /* 0x23800 - 0x23a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23800:
                    f10 = readPages[(r28+-32660)>>>12][((r28+-32660)>>>2)&0x3ff];
                    f11 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f11&0xffffffffL) << 32) | (f10&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x24980;
                        run_24800(); return;
                    }
                    r5 = r4 < 2 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24568;
                        run_24400(); return;
                    }
                    f6 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r4 = r20 + r4;
                    f7 = readPages[(r28+-32656)>>>12][((r28+-32656)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x23864;
                    continue;
                case 0x23848:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f11&0xffffffffL) << 32) | (f10&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x24980;
                        run_24800(); return;
                    }
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x24568;
                        run_24400(); return;
                    }
                case 0x23864:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r3 = r3 + 1;
                    r8 = fcsr;
                    r8 = fcsr;
                    r1 = r8 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f12 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f12 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f12 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f12 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r8;
                    { long l = Double.doubleToLongBits(((double)f12)); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r9 = f12;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r5 = r9 + 48;
                    r5 = r5 << 24;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    r5 = r5 >> 24;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x23848;
                        continue;
                    }
                case 0x238c0:
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                case 0x238c4:
                    r4 = r16 + r0;
                    r5 = r17 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x238d8;
                    pc=0x26200;
                    run_26200(); return;
                case 0x238d8:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r2 = r8 + 1;
                    r9 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r9+0)>>>12][((r9+0)>>>2)&0x3ff] = r2;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24420;
                        run_24400(); return;
                    }
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x232e8;
                    run_23200(); return;
                case 0x2390c:
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r18 = r18 & r2;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2333c;
                        run_23200(); return;
                    }
                    r2 = 3 << 16;
                    r2 = r2 + -14144;
                    /* Next insn is delay slot */ 
                    pc=0x23344;
                    run_23200(); return;
                case 0x23930:
                    r3 = r2 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x23368;
                    run_23200(); return;
                case 0x2393c:
                    r2 = f21;
                    r6 = 15 << 16;
                    r6 = r6 | 65535;
                    r5 = 16368 << 16;
                    r6 = r2 & r6;
                    r2 = r6 | r5;
                    r3 = f20;
                    r4 = r4 + -1023;
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x23438;
                    run_23400(); return;
                case 0x2396c:
                    r2 = 3 << 16;
                    r2 = r2 + -14536;
                    /* Next insn is delay slot */ 
                    pc=0x232e8;
                    run_23200(); return;
                case 0x2397c:
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r0;
                case 0x23980:
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23994;
                    pc=0x26000;
                    run_26000(); return;
                case 0x23994:
                    r8 = r0 + -1;
                    r9 = r0 + 1;
                    r20 = r2 + r0;
                    writePages[(r16+64)>>>12][((r16+64)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r0;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r8;
                    r30 = r0 + -1;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r9;
                case 0x239b4:
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x23b7c;
                        run_23a00(); return;
                    }
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r3 = r8 < 15 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23b7c;
                        run_23a00(); return;
                    }
                    r3 = 3 << 16;
                    r2 = r8 << 3;
                    r3 = r3 + -14064;
                    r2 = r2 + r3;
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r9 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r9 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x24228;
                        run_24200(); return;
                    }
                case 0x239fc:
                    f6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                case 0x23a00:
                    pc=0x23a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23a00() throws ExecutionException { /* 0x23a00 - 0x23c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23a00:
                    f7 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))/(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r2 = fcsr;
                    r2 = fcsr;
                    r1 = r2 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f10 = (int)Math.floor((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f10 = (int)(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL))); break; // Round towards zero
                        case 2: f10 = (int)Math.ceil((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f10 = (int)Math.floor((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r2;
                    { long l = Double.doubleToLongBits(((double)f10)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r4 = f10;
                    r3 = r20 + 1;
                    r2 = r4 + 48;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r30 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23b00;
                        continue;
                    }
                    f6 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    f8 = r0;
                    f7 = readPages[(r28+-32656)>>>12][((r28+-32656)>>>2)&0x3ff];
                    f9 = r0;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))==(Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x238c4;
                        run_23800(); return;
                    }
                    r2 = r20 + 2;
                    r30 = r20 + r30;
                    /* Next insn is delay slot */ 
                    pc=0x23aac;
                    continue;
                case 0x23a94:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = r2 + 1;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))==(Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x238c4;
                        run_23800(); return;
                    }
                case 0x23aac:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))/(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r3 = r2 + r0;
                    r4 = fcsr;
                    r4 = fcsr;
                    r1 = r4 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f10 = (int)Math.floor((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f10 = (int)(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL))); break; // Round towards zero
                        case 2: f10 = (int)Math.ceil((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f10 = (int)Math.floor((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r4;
                    { long l = Double.doubleToLongBits(((double)f10)); f5 = (int)(l >>> 32); f4 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r5 = f10;
                    r4 = r5 + 48;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r2 != r30) {
                        /* Next insn is delay slot */ 
                        pc=0x23a94;
                        continue;
                    }
                case 0x23b00:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x23b38;
                        continue;
                    }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x238c4;
                        run_23800(); return;
                    }
                    r4 = f10;
                    r2 = r4 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x238c4;
                        run_23800(); return;
                    }
                case 0x23b38:
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x23b3c:
                    r4 = r0 + 57;
                    /* Next insn is delay slot */ 
                    pc=0x23b58;
                    continue;
                case 0x23b48:
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x246b4;
                        run_24600(); return;
                    }
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r3 = r2 + r0;
                case 0x23b58:
                    r2 = r3 + -1;
                    if(r5 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x23b48;
                        continue;
                    }
                    r4 = r5 + 1;
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x238c4;
                    run_23800(); return;
                case 0x23b7c:
                    r8 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23fb8;
                        run_23e00(); return;
                    }
                    r9 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r9 = r9 < 2 ? 1 : 0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r9;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x242fc;
                        run_24200(); return;
                    }
                    r3 = r30 + -1;
                    r2 = r22 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x245c0;
                        run_24400(); return;
                    }
                    r3 = r22 - r3;
                case 0x23bb8:
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x24878;
                        run_24800(); return;
                    }
                    r21 = r18 + r0;
                    r2 = r30 + r0;
                case 0x23bc8:
                    r4 = r16 + r0;
                    r5 = r0 + 1;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    r18 = r18 + r2;
                    r23 = r23 + r2;
                    /* Next insn is delay slot */ 
                    r31=0x23be4;
                    pc=0x26a00;
                    run_26a00(); return;
                case 0x23be4:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r19 = r2 + r0;
                case 0x23bec:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23c18;
                        run_23c00(); return;
                    }
                    if(r23 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x23c18;
                        run_23c00(); return;
                    }
                    r4 = r21 < r23 ? 1 : 0;
                case 0x23c00:
                    pc=0x23c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23c00() throws ExecutionException { /* 0x23c00 - 0x23e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23c00:
                    r2 = r23 + r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x241f0;
                        run_24000(); return;
                    }
                case 0x23c0c:
                    r18 = r18 - r2;
                    r21 = r21 - r2;
                    r23 = r23 - r2;
                case 0x23c18:
                    if(r22 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x23c94;
                        continue;
                    }
                    r9 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24578;
                        run_24400(); return;
                    }
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x23c88;
                        continue;
                    }
                    r6 = r3 + r0;
                    r5 = r19 + r0;
                    r4 = r16 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x23c50;
                    pc=0x27000;
                    run_27000(); return;
                case 0x23c50:
                    r5 = r2 + r0;
                    r6 = r17 + r0;
                    r4 = r16 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23c68;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x23c68:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x23c7c;
                    pc=0x26200;
                    run_26200(); return;
                case 0x23c7c:
                    r2 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r17 = r2 + r0;
                case 0x23c88:
                    r6 = r22 - r3;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x242a4;
                        run_24200(); return;
                    }
                case 0x23c94:
                    r4 = r16 + r0;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x23ca4;
                    pc=0x26a00;
                    run_26a00(); return;
                case 0x23ca4:
                    r3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = r2 + r0;
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x23ccc;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23cc8;
                    pc=0x27000;
                    run_27000(); return;
                case 0x23cc8:
                    r22 = r2 + r0;
                case 0x23ccc:
                    r7 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x241a0;
                        run_24000(); return;
                    }
                case 0x23cdc:
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r0;
                case 0x23ce0:
                    r7 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x243f0;
                        run_24200(); return;
                    }
                    r2 = r0 + 1;
                case 0x23cf4:
                    r2 = r2 + r23;
                    r2 = r2 & 31;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23fd8;
                        run_23e00(); return;
                    }
                    r3 = r0 + 32;
                    r3 = r3 - r2;
                    r4 = r3 < 5 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x249dc;
                        run_24800(); return;
                    }
                    r3 = r0 + 28;
                    r2 = r3 - r2;
                    r18 = r18 + r2;
                    r21 = r21 + r2;
                    r23 = r23 + r2;
                case 0x23d2c:
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x23d4c;
                        continue;
                    }
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23d48;
                    pc=0x27200;
                    run_27200(); return;
                case 0x23d48:
                    r17 = r2 + r0;
                case 0x23d4c:
                    if(r23 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x23d6c;
                        continue;
                    }
                    r5 = r22 + r0;
                    r4 = r16 + r0;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23d68;
                    pc=0x27200;
                    run_27200(); return;
                case 0x23d68:
                    r22 = r2 + r0;
                case 0x23d6c:
                    r8 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24148;
                        run_24000(); return;
                    }
                case 0x23d7c:
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x24444;
                        run_24400(); return;
                    }
                case 0x23d84:
                    r9 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24014;
                        run_24000(); return;
                    }
                    if(r21 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x23db4;
                        continue;
                    }
                    r5 = r19 + r0;
                    r4 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23db0;
                    pc=0x27200;
                    run_27200(); return;
                case 0x23db0:
                    r19 = r2 + r0;
                case 0x23db4:
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x246d8;
                        run_24600(); return;
                    }
                    r21 = r19 + r0;
                case 0x23dc8:
                    r8 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r30 = r20 + r30;
                    r8 = r8 & 1;
                    r18 = r20 + 1;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r8;
                case 0x23de0:
                    r9 = r18 + -1;
                    r4 = r17 + r0;
                    r5 = r22 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x23df8;
                    pc=0x22e00;
                    run_22e00(); return;
                case 0x23df8:
                    r4 = r17 + r0;
                    r5 = r19 + r0;
                case 0x23e00:
                    pc=0x23e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23e00() throws ExecutionException { /* 0x23e00 - 0x24000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23e00:
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r23 = r2 + 48;
                    /* Next insn is delay slot */ 
                    r31=0x23e10;
                    pc=0x27400;
                    run_27400(); return;
                case 0x23e10:
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    r6 = r21 + r0;
                    r30 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23e28;
                    pc=0x27600;
                    run_27600(); return;
                case 0x23e28:
                    r3 = r2 + r0;
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x243d4;
                        run_24200(); return;
                    }
                    r5 = r3 + r0;
                    r4 = r17 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x23e50;
                    pc=0x27400;
                    run_27400(); return;
                case 0x23e50:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = r3 + r0;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x23e68;
                    pc=0x26200;
                    run_26200(); return;
                case 0x23e68:
                    r2 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23e98;
                        continue;
                    }
                    r3 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23e98;
                        continue;
                    }
                    r8 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24390;
                        run_24200(); return;
                    }
                case 0x23e98:
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x24324;
                        run_24200(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23ec8;
                        continue;
                    }
                    r8 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23ec8;
                        continue;
                    }
                    r9 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24324;
                        run_24200(); return;
                    }
                case 0x23ec8:
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x24728;
                        run_24600(); return;
                    }
                    r8 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = r18 + r0;
                    addr=r18+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r18 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x24754;
                        run_24600(); return;
                    }
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23efc;
                    pc=0x26400;
                    run_26400(); return;
                case 0x23efc:
                    r17 = r2 + r0;
                    r4 = r16 + r0;
                    r5 = r19 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    if(r19 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x243b8;
                        run_24200(); return;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x23f20;
                    pc=0x26400;
                    run_26400(); return;
                case 0x23f20:
                    r5 = r21 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23f3c;
                    pc=0x26400;
                    run_26400(); return;
                case 0x23f3c:
                    r21 = r2 + r0;
                    r18 = r18 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x23de0;
                    run_23c00(); return;
                case 0x23f4c:
                    r3 = r0 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x23530;
                    run_23400(); return;
                case 0x23f5c:
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    r18 = r18 - r9;
                    r22 = r0 - r9;
                    /* Next insn is delay slot */ 
                    pc=0x23560;
                    run_23400(); return;
                case 0x23f74:
                    r18 = r0 - r23;
                    r23 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x23544;
                    run_23400(); return;
                case 0x23f84:
                    f4 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(((double)f4)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))==(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x234dc;
                        run_23400(); return;
                    }
                    r3 = f4;
                    r3 = r3 + -1;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x234dc;
                    run_23400(); return;
                case 0x23fb8:
                    r8 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r3 = r22 + r0;
                    r8 = r8 < 2 ? 1 : 0;
                    r21 = r18 + r0;
                    r19 = r0 + r0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    pc=0x23bec;
                    run_23a00(); return;
                case 0x23fd8:
                    r2 = r0 + 28;
                case 0x23fdc:
                    r18 = r18 + r2;
                    r21 = r21 + r2;
                    r23 = r23 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x23d2c;
                    run_23c00(); return;
                case 0x23ff0:
                    r18 = r0 + -1042;
                    r7 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = r18 - r4;
                    r18 = r7 << (r18&0x1f);
                case 0x24000:
                    pc=0x24000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24000() throws ExecutionException { /* 0x24000 - 0x24200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24000:
                    /* Next insn is delay slot */ 
                    pc=0x2340c;
                    run_23400(); return;
                case 0x24008:
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x23530;
                    run_23400(); return;
                case 0x24014:
                    r18 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2403c;
                    continue;
                case 0x24020:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x24038;
                    pc=0x26400;
                    run_26400(); return;
                case 0x24038:
                    r17 = r2 + r0;
                case 0x2403c:
                    r4 = r17 + r0;
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2404c;
                    pc=0x22e00;
                    run_22e00(); return;
                case 0x2404c:
                    r18 = r18 + 1;
                    r23 = r2 + 48;
                    r2 = r18 - r20;
                    r2 = r2 < r30 ? 1 : 0;
                    addr=r18+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24020;
                        continue;
                    }
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x24318;
                        run_24200(); return;
                    }
                case 0x24070:
                    r3 = r20 + r30;
                    r18 = r0 + r0;
                case 0x24078:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 1;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x24090;
                    pc=0x27200;
                    run_27200(); return;
                case 0x24090:
                    r4 = r2 + r0;
                    r5 = r22 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x240a4;
                    pc=0x27400;
                    run_27400(); return;
                case 0x240a4:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x242c0;
                        run_24200(); return;
                    }
                case 0x240b0:
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                case 0x240b4:
                    r5 = r0 + 57;
                    /* Next insn is delay slot */ 
                    pc=0x240d0;
                    continue;
                case 0x240c0:
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x244b4;
                        run_24400(); return;
                    }
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r2 + r0;
                case 0x240d0:
                    r2 = r3 + -1;
                    if(r4 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x240c0;
                        continue;
                    }
                    r4 = r4 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x240e4:
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x240f8;
                    pc=0x26200;
                    run_26200(); return;
                case 0x240f8:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x238c4;
                        run_23800(); return;
                    }
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24128;
                        continue;
                    }
                    if(r18 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x24128;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x24124;
                    pc=0x26200;
                    run_26200(); return;
                case 0x24124:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                case 0x24128:
                    r4 = r16 + r0;
                    r5 = r19 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x2413c;
                    pc=0x26200;
                    run_26200(); return;
                case 0x2413c:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x238c4;
                    run_23800(); return;
                case 0x24148:
                    r4 = r17 + r0;
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x24158;
                    pc=0x27400;
                    run_27400(); return;
                case 0x24158:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x23d7c;
                        run_23c00(); return;
                    }
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r9 = r9 + -1;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x24184;
                    pc=0x26400;
                    run_26400(); return;
                case 0x24184:
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x249a8;
                        run_24800(); return;
                    }
                    r30 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x23d7c;
                    run_23c00(); return;
                case 0x241a0:
                    r8 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23cdc;
                        run_23c00(); return;
                    }
                    r2 = 15 << 16;
                    r9 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r2 | 65535;
                    r2 = r2 & r9;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23cdc;
                        run_23c00(); return;
                    }
                    r2 = 32752 << 16;
                    r2 = r2 & r9;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23cdc;
                        run_23c00(); return;
                    }
                    r3 = r0 + 1;
                    r18 = r18 + 1;
                    r23 = r23 + 1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x23ce0;
                    run_23c00(); return;
                case 0x241f0:
                    r2 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x23c0c;
                    run_23c00(); return;
                case 0x241fc:
                    r9 = r0 + 1;
                case 0x24200:
                    pc=0x24200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24200() throws ExecutionException { /* 0x24200 - 0x24400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24200:
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r9;
                case 0x24204:
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x245f0;
                        run_24400(); return;
                    }
                    r6 = r4 + r0;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r4;
                    r30 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x235f0;
                    run_23400(); return;
                case 0x24228:
                    if(r30 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x239fc;
                        run_23800(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24558;
                        run_24400(); return;
                    }
                    f0 = readPages[(r28+-32636)>>>12][((r28+-32636)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    f1 = readPages[(r28+-32640)>>>12][((r28+-32640)>>>2)&0x3ff];
                    r19 = r0 + r0;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f0 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    f1 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<=(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x24494;
                        run_24400(); return;
                    }
                case 0x2426c:
                    r9 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r3 = r20 + r0;
                    r9 = ~(r0 | r9);
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r9;
                case 0x2427c:
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x24290;
                    pc=0x26200;
                    run_26200(); return;
                case 0x24290:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24128;
                        run_24000(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x238c4;
                    run_23800(); return;
                case 0x242a4:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x242b4;
                    pc=0x27000;
                    run_27000(); return;
                case 0x242b4:
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x23c94;
                    run_23c00(); return;
                case 0x242c0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x242d4;
                        continue;
                    }
                    r23 = r23 & 1;
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x240b0;
                        run_24000(); return;
                    }
                case 0x242d4:
                    r5 = r0 + 48;
                    /* Next insn is delay slot */ 
                    pc=0x242e4;
                    continue;
                case 0x242e0:
                    r3 = r4 + r0;
                case 0x242e4:
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r4 = r3 + -1;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x242e0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x240e4;
                    run_24000(); return;
                case 0x242fc:
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24888;
                        run_24800(); return;
                    }
                    r2 = r2 + 1075;
                    r3 = r22 + r0;
                    r21 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x23bc8;
                    run_23a00(); return;
                case 0x24318:
                    r30 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x24070;
                    run_24000(); return;
                case 0x24324:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x24374;
                        continue;
                    }
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x24340;
                    pc=0x27200;
                    run_27200(); return;
                case 0x24340:
                    r4 = r2 + r0;
                    r5 = r22 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x24354;
                    pc=0x27400;
                    run_27400(); return;
                case 0x24354:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2498c;
                        run_24800(); return;
                    }
                case 0x2435c:
                    r2 = r0 + 57;
                    if(r23 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2491c;
                        run_24800(); return;
                    }
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r23 = r3 + 49;
                case 0x24374:
                    r7 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = r19 + r0;
                    r3 = r7 + 1;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x240e4;
                    run_24000(); return;
                case 0x24390:
                    r2 = r0 + 57;
                    if(r23 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2491c;
                        run_24800(); return;
                    }
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x24374;
                        continue;
                    }
                    r9 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r23 = r9 + 49;
                    /* Next insn is delay slot */ 
                    pc=0x24374;
                    continue;
                case 0x243b8:
                    /* Next insn is delay slot */ 
                    r31=0x243c0;
                    pc=0x26400;
                    run_26400(); return;
                case 0x243c0:
                    r19 = r2 + r0;
                    r21 = r2 + r0;
                    r18 = r18 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x23de0;
                    run_23c00(); return;
                case 0x243d4:
                    r4 = r16 + r0;
                    r5 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x243e4;
                    pc=0x26200;
                    run_26200(); return;
                case 0x243e4:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x23e98;
                    run_23e00(); return;
                case 0x243f0:
                    r2 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r2 = r2 << 2;
                case 0x24400:
                    pc=0x24400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24400() throws ExecutionException { /* 0x24400 - 0x24600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24400:
                    r2 = r22 + r2;
                    r4 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x24410;
                    pc=0x26600;
                    run_26600(); return;
                case 0x24410:
                    r3 = r0 + 32;
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=0x23cf4;
                    run_23c00(); return;
                case 0x24420:
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x232e8;
                    run_23200(); return;
                case 0x2442c:
                    r2 = r0 + 2;
                    if(r9 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23980;
                        run_23800(); return;
                    }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x24204;
                    run_24200(); return;
                case 0x24444:
                    r8 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r2 = r8 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23d84;
                        run_23c00(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2426c;
                        run_24200(); return;
                    }
                    r5 = r22 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 5;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x24478;
                    pc=0x26400;
                    run_26400(); return;
                case 0x24478:
                    r5 = r2 + r0;
                    r4 = r17 + r0;
                    r22 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2448c;
                    pc=0x27400;
                    run_27400(); return;
                case 0x2448c:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2426c;
                        run_24200(); return;
                    }
                case 0x24494:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r0 + 49;
                    r8 = r8 + 1;
                    r3 = r20 + 1;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    pc=0x2427c;
                    run_24200(); return;
                case 0x244b4:
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r0 + 49;
                    r9 = r9 + 1;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r9;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x240e4;
                    run_24000(); return;
                case 0x244d0:
                    f4 = r8;
                    r2 = 64704 << 16;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f2 = readPages[(r28+-32644)>>>12][((r28+-32644)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32648)>>>12][((r28+-32648)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f7 = (int)(l >>> 32); f6 = (int)l; }
                    r8 = f7;
                    r9 = f6;
                    r8 = r2 + r8;
                case 0x24500:
                    f2 = readPages[(r28+-32636)>>>12][((r28+-32636)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32640)>>>12][((r28+-32640)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f2 = r9;
                    f3 = r8;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x24764;
                        run_24600(); return;
                    }
                    r4 = 32768 << 16;
                    f2 = r9;
                    r2 = r4 ^ r8;
                    f3 = r2;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x24568;
                        continue;
                    }
                case 0x24558:
                    r22 = r0 + r0;
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2426c;
                    run_24200(); return;
                case 0x24568:
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = f8;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = f9;
                    /* Next insn is delay slot */ 
                    pc=0x239b4;
                    run_23800(); return;
                case 0x24578:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2458c;
                    pc=0x27000;
                    run_27000(); return;
                case 0x2458c:
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x23c94;
                    run_23c00(); return;
                case 0x24598:
                    f0 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    /* Next insn is delay slot */ 
                    pc=0x23420;
                    run_23400(); return;
                case 0x245b4:
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x235cc;
                    run_23400(); return;
                case 0x245c0:
                    r7 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = r3 - r22;
                    r7 = r7 + r22;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r7;
                    r22 = r3 + r0;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x23bb8;
                    run_23a00(); return;
                case 0x245e0:
                    f0 = f8;
                    f1 = f9;
                    r8 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x236b8;
                    run_23600(); return;
                case 0x245f0:
                    r3 = r0 + 1;
                    r4 = r0 + 1;
                    r21 = r0 + 1;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r3;
                case 0x24600:
                    pc=0x24600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24600() throws ExecutionException { /* 0x24600 - 0x24800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24600:
                    r30 = r0 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r4;
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2362c;
                    run_23600(); return;
                case 0x24618:
                    r21 = r30 + r0;
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2362c;
                    run_23600(); return;
                case 0x2462c:
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r0 - r9;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x248a4;
                        run_24800(); return;
                    }
                    r4 = r2 & 15;
                    r3 = 3 << 16;
                    r4 = r4 << 3;
                    r3 = r3 + -14064;
                    r3 = r4 + r3;
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r2 = r2 >> 4;
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x249d0;
                        run_24800(); return;
                    }
                    r3 = 3 << 16;
                    r3 = r3 + -14104;
                    r8 = r0 + 2;
                case 0x2467c:
                    r4 = r2 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2469c;
                        continue;
                    }
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x2469c:
                    r2 = r2 >> 1;
                    r3 = r3 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2467c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x236fc;
                    run_23600(); return;
                case 0x246b4:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r4 = r0 + 48;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r8 = r8 + 1;
                    r4 = r0 + 49;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r8;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x238c4;
                    run_23800(); return;
                case 0x246d8:
                    r5 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x246e8;
                    pc=0x26000;
                    run_26000(); return;
                case 0x246e8:
                    r6 = readPages[(r19+16)>>>12][((r19+16)>>>2)&0x3ff];
                    r18 = r2 + r0;
                    r6 = r6 + 2;
                    r4 = r2 + 12;
                    r5 = r19 + 12;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x24708;
                    pc=0x223e0;
                    run_22200(); return;
                case 0x24708:
                    r4 = r16 + r0;
                    r5 = r18 + r0;
                    r6 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x2471c;
                    pc=0x27200;
                    run_27200(); return;
                case 0x2471c:
                    r21 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x23dc8;
                    run_23c00(); return;
                case 0x24728:
                    r2 = r0 + 57;
                    if(r23 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2491c;
                        run_24800(); return;
                    }
                    r9 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r23 = r23 + 1;
                    r18 = r19 + r0;
                    r3 = r9 + 1;
                    addr=r9+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x240e4;
                    run_24000(); return;
                case 0x24754:
                    r18 = r19 + r0;
                    r19 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x24078;
                    run_24000(); return;
                case 0x24764:
                    r22 = r0 + r0;
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x24494;
                    run_24400(); return;
                case 0x24774:
                    r3 = 3 << 16;
                    r6 = r5 << 3;
                    r3 = r3 + -14064;
                    r3 = r6 + r3;
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f4 = r9;
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f5 = r8;
                    r3 = r20 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f11 = (int)(l >>> 32); f10 = (int)l; }
                    r6 = fcsr;
                    r6 = fcsr;
                    r1 = r6 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f4 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f4 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f4 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f4 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r6;
                    r7 = f4;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r6 = r7 + 48;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r0 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r4 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x24844;
                        run_24800(); return;
                    }
                    f6 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r4 = r20 + r4;
                    f7 = readPages[(r28+-32656)>>>12][((r28+-32656)>>>2)&0x3ff];
                    r6 = r3 + r0;
                case 0x247f4:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r6 = r6 + 1;
                    r8 = fcsr;
                case 0x24800:
                    pc=0x24800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24800() throws ExecutionException { /* 0x24800 - 0x24a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24800:
                    r8 = fcsr;
                    r1 = r8 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f4 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f4 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f4 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f4 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r8;
                    r9 = f4;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r10 = r9 + 48;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    addr=r6+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r6 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x247f4;
                        run_24600(); return;
                    }
                    r3 = r3 + r5;
                case 0x24844:
                    f2 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32632)>>>12][((r28+-32632)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f11&0xffffffffL) << 32) | (f10&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x24940;
                        continue;
                    }
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x23b3c;
                    run_23a00(); return;
                case 0x24878:
                    r21 = r18 - r30;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x23bc8;
                    run_23a00(); return;
                case 0x24888:
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r0 + 54;
                    r2 = r3 - r2;
                    r21 = r18 + r0;
                    r3 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x23bc8;
                    run_23a00(); return;
                case 0x248a4:
                    f0 = f8;
                    f1 = f9;
                    r8 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x236fc;
                    run_23600(); return;
                case 0x248b4:
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x244d0;
                        run_24400(); return;
                    }
                    r9 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    if(r9 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x24568;
                        run_24400(); return;
                    }
                    f6 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    f7 = readPages[(r28+-32656)>>>12][((r28+-32656)>>>2)&0x3ff];
                    f4 = r8;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r3 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r4 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = r3 + -1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f2 = readPages[(r28+-32644)>>>12][((r28+-32644)>>>2)&0x3ff];
                    r3 = 64704 << 16;
                    f3 = readPages[(r28+-32648)>>>12][((r28+-32648)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f7 = (int)(l >>> 32); f6 = (int)l; }
                    r8 = f7;
                    r9 = f6;
                    r8 = r3 + r8;
                    /* Next insn is delay slot */ 
                    pc=0x2376c;
                    run_23600(); return;
                case 0x2491c:
                    r8 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r0 + 57;
                    r18 = r19 + r0;
                    r3 = r8 + 1;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r21 + r0;
                    r4 = r0 + 57;
                    /* Next insn is delay slot */ 
                    pc=0x240b4;
                    run_24000(); return;
                case 0x24940:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f11&0xffffffffL) << 32) | (f10&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x24568;
                        run_24400(); return;
                    }
                    r6 = r0 + 48;
                    /* Next insn is delay slot */ 
                    pc=0x24964;
                    continue;
                case 0x24960:
                    r3 = r5 + r0;
                case 0x24964:
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r5 = r3 + -1;
                    if(r4 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x24960;
                        continue;
                    }
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x238c4;
                    run_23800(); return;
                case 0x24980:
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x23b3c;
                    run_23a00(); return;
                case 0x2498c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24374;
                        run_24200(); return;
                    }
                    r2 = r23 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24374;
                        run_24200(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2435c;
                    run_24200(); return;
                case 0x249a8:
                    r5 = r19 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x249c0;
                    pc=0x26400;
                    run_26400(); return;
                case 0x249c0:
                    r19 = r2 + r0;
                    r30 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x23d7c;
                    run_23c00(); return;
                case 0x249d0:
                    r8 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x236fc;
                    run_23600(); return;
                case 0x249dc:
                    r4 = r0 + 4;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x23d2c;
                        run_23c00(); return;
                    }
                    r3 = r0 + 60;
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=0x23fdc;
                    run_23e00(); return;
                case 0x249f8:
                    r8 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x2358c;
                    run_23400(); return;
                case 0x24a00:
                    pc=0x24a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24a00() throws ExecutionException { /* 0x24a00 - 0x24c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24a00:
                case 0x24a04:
                    r21 = r6 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2362c;
                    run_23600(); return;
                case 0x24c00:
                    pc=0x24c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24c00() throws ExecutionException { /* 0x24c00 - 0x24e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24c00:
                    r2 = readPages[(r28+-32716)>>>12][((r28+-32716)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24e00:
                    pc=0x24e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24e00() throws ExecutionException { /* 0x24e00 - 0x25000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24e00:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r0 + 114;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x24e98;
                        continue;
                    }
                    r3 = r0 + 119;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x24e84;
                        continue;
                    }
                    r3 = r0 + 97;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x24e3c;
                        continue;
                    }
                    r2 = r0 + 22;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24e3c:
                    r7 = r0 + 520;
                    r4 = r0 + 1;
                    r2 = r0 + 264;
                case 0x24e48:
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24e74;
                        continue;
                    }
                    r8 = r0 + 43;
                    if(r3 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x24eac;
                        continue;
                    }
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x24eac;
                        continue;
                    }
                case 0x24e74:
                    r4 = r4 | r7;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24e84:
                    r7 = r0 + 1536;
                    r4 = r0 + 1;
                    r2 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x24e48;
                    continue;
                case 0x24e98:
                    r7 = r0 + r0;
                    r4 = r0 + r0;
                    r2 = r0 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x24e48;
                    continue;
                case 0x24eac:
                    r3 = r0 + -29;
                    r4 = r0 + 2;
                    r2 = r2 & r3;
                    r4 = r4 | r7;
                    r2 = r2 | 16;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25000:
                    pc=0x25000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25000() throws ExecutionException { /* 0x25000 - 0x25200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25000:
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r29 = r29 + -64;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r19 = r6 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x250d4;
                        continue;
                    }
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r21 = r4 + r0;
                    r3 = r2 & 8;
                    r16 = r5 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2510c;
                        continue;
                    }
                    r3 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2510c;
                        continue;
                    }
                    r3 = r2 & 2;
                    r17 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25138;
                        continue;
                    }
                case 0x25074:
                    r20 = r0 + r0;
                    r18 = r0 + r0;
                case 0x2507c:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x251fc;
                        continue;
                    }
                    r2 = (r18&0xffffffffL) < (1025&0xffffffffL) ? 1 : 0;
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r7 = r18 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2509c;
                        continue;
                    }
                    r7 = r0 + 1024;
                case 0x2509c:
                    r2 = readPages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x250b0;
                    return;
                case 0x250b0:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2523c;
                        run_25200(); return;
                    }
                    r3 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r20 = r20 + r2;
                    r18 = r18 - r2;
                    r2 = r3 - r2;
                    writePages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2507c;
                        continue;
                    }
                case 0x250d4:
                    r2 = r0 + r0;
                case 0x250d8:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2510c:
                    r4 = r21 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2511c;
                    pc=0x22000;
                    run_22000(); return;
                case 0x2511c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x255ec;
                        run_25400(); return;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r17 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r3 = r2 & 2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25074;
                        continue;
                    }
                case 0x25138:
                    r3 = r2 & 1;
                    r22 = r0 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25258;
                        run_25200(); return;
                    }
                    r18 = r0 + r0;
                case 0x2514c:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x251e8;
                        continue;
                    }
                case 0x25154:
                    r3 = r2 & 512;
                    r20 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25338;
                        run_25200(); return;
                    }
                    r3 = ((r18 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25400;
                        run_25400(); return;
                    }
                    r3 = r2 & 1152;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25484;
                        run_25400(); return;
                    }
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r23 = r20 + r0;
                    r30 = r20 + r0;
                    r20 = r18 + r0;
                case 0x2518c:
                    r5 = r22 + r0;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2519c;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x2519c:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r30 = r2 - r30;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r30;
                    r3 = r2 + r23;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    r2 = r18 + r0;
                case 0x251bc:
                    r22 = r22 + r2;
                    r18 = r18 - r2;
                    r2 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r20 = r2 - r20;
                    writePages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff] = r20;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x250d4;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25154;
                        continue;
                    }
                case 0x251e8:
                    r22 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r18 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r17 = r17 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x2514c;
                    continue;
                case 0x251fc:
                    r20 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                case 0x25200:
                    pc=0x25200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25200() throws ExecutionException { /* 0x25200 - 0x25400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25200:
                    r18 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r17 = r17 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x2507c;
                    run_25000(); return;
                case 0x25210:
                    /* Next insn is delay slot */ 
                    r31=0x25218;
                    pc=0x27c00;
                    run_27c00(); return;
                case 0x25218:
                    r30 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25510;
                        run_25400(); return;
                    }
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x25234;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x25234:
                    r2 = r0 + 12;
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r2;
                case 0x2523c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x250d8;
                    run_25000(); return;
                case 0x25258:
                    r3 = r0 + r0;
                    r30 = r0 + r0;
                    r18 = r0 + r0;
                case 0x25264:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25320;
                        continue;
                    }
                case 0x2526c:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25454;
                        run_25400(); return;
                    }
                case 0x25274:
                    r2 = ((r18 & 0xffffffffL) < (r22 & 0xffffffffL)) ? 1 : 0;
                    r23 = r22 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25288;
                        continue;
                    }
                    r23 = r18 + r0;
                case 0x25288:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r20 = r23 + r0;
                    r2 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r7 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x252b8;
                        continue;
                    }
                    r8 = r6 + r7;
                    r2 = r8 < r23 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2553c;
                        run_25400(); return;
                    }
                case 0x252b8:
                    r2 = r23 < r7 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x253a0;
                        continue;
                    }
                    r2 = readPages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff];
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x252e0;
                    return;
                case 0x252e0:
                    r20 = r2 + r0;
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2523c;
                        continue;
                    }
                case 0x252f0:
                    r22 = r22 - r20;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x253dc;
                        continue;
                    }
                case 0x252fc:
                    r2 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r30 = r30 + r20;
                    r18 = r18 - r20;
                    r20 = r2 - r20;
                    writePages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff] = r20;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x250d4;
                        run_25000(); return;
                    }
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2526c;
                        continue;
                    }
                case 0x25320:
                    r30 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r18 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r3 = r0 + r0;
                    r17 = r17 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x25264;
                    continue;
                case 0x25338:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2535c;
                        continue;
                    }
                    r2 = ((r20 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25590;
                        run_25400(); return;
                    }
                case 0x2535c:
                    r7 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r2 = ((r18 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25418;
                        run_25400(); return;
                    }
                    r2 = readPages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff];
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x25388;
                    return;
                case 0x25388:
                    r20 = r2 + r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2523c;
                        continue;
                    }
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x251bc;
                    run_25000(); return;
                case 0x253a0:
                    r6 = r23 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x253b4;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x253b4:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r22 = r22 - r20;
                    r2 = r2 - r23;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r23 = r2 + r23;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r23;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x252fc;
                        continue;
                    }
                case 0x253dc:
                    r4 = r21 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x253ec;
                    pc=0x19e00;
                    run_19e00(); return;
                case 0x253ec:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2523c;
                        continue;
                    }
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x252fc;
                    continue;
                case 0x25400:
                    pc=0x25400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25400() throws ExecutionException { /* 0x25400 - 0x25600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25400:
                    r30 = r18 + r0;
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r20 = r18 + r0;
                    r23 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2518c;
                    run_25000(); return;
                case 0x25418:
                    r5 = r22 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x25428;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x25428:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r20 = r18 + r0;
                    r2 = r2 - r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r2 + r18;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x251bc;
                    run_25000(); return;
                case 0x25454:
                    r4 = r30 + r0;
                    r5 = r0 + 10;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x25468;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x25468:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x255dc;
                        continue;
                    }
                    r22 = r2 + 1;
                    r22 = r22 - r30;
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x25274;
                    run_25200(); return;
                case 0x25484:
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r6 = r4 << 1;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r6 + r4;
                    r20 = r4 >>> 31;
                    r23 = r3 - r5;
                    r4 = r20 + r4;
                    r6 = r23 + 1;
                    r20 = r4 >> 1;
                    r6 = r6 + r18;
                    r4 = ((r20 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x255d0;
                        continue;
                    }
                    r20 = r6 + r0;
                case 0x254c0:
                    r2 = r2 & 1024;
                    r4 = r21 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25210;
                        run_25200(); return;
                    }
                    r5 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x254dc;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x254dc:
                    r30 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25234;
                        run_25200(); return;
                    }
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x254fc;
                    pc=0x223e0;
                    run_22200(); return;
                case 0x254fc:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r0 + -1153;
                    r2 = r2 & r3;
                    r2 = r2 | 128;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x25510:
                    r4 = r30 + r23;
                    r3 = r20 - r23;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r30;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r20;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r4;
                    r30 = r18 + r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    r20 = r18 + r0;
                    r23 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2518c;
                    run_25000(); return;
                case 0x2553c:
                    r6 = r8 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x25554;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x25554:
                    r8 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 + r8;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x25574;
                    pc=0x19e00;
                    run_19e00(); return;
                case 0x25574:
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r8 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2523c;
                        run_25200(); return;
                    }
                    r20 = r8 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x252f0;
                    run_25200(); return;
                case 0x25590:
                    r5 = r22 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x255a0;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x255a0:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 + r20;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x255bc;
                    pc=0x19e00;
                    run_19e00(); return;
                case 0x255bc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2523c;
                        run_25200(); return;
                    }
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x251bc;
                    run_25000(); return;
                case 0x255d0:
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x254c0;
                    continue;
                case 0x255dc:
                    r22 = r18 + 1;
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x25274;
                    run_25200(); return;
                case 0x255ec:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x250d8;
                    run_25000(); return;
                case 0x25600:
                    pc=0x25600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25600() throws ExecutionException { /* 0x25600 - 0x25800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25600:
                    /* Next insn is delay slot */ 
                    pc=0x28e00;
                    run_28e00(); return;
                case 0x25800:
                    pc=0x25800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25800() throws ExecutionException { /* 0x25800 - 0x25a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25800:
                    r2 = 3 << 16;
                    r2 = r2 + -11416;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25a00:
                    pc=0x25a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25a00() throws ExecutionException { /* 0x25a00 - 0x25c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25a00:
                    r2 = readPages[(r28+-32624)>>>12][((r28+-32624)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25c00:
                    pc=0x25c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25c00() throws ExecutionException { /* 0x25c00 - 0x25e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25c00:
                    r2 = 3 << 16;
                    r2 = r2 + -11384;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25e00:
                    pc=0x25e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25e00() throws ExecutionException { /* 0x25e00 - 0x26000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25e00:
                    r2 = r4 & 3;
                    r7 = r5 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25e5c;
                        continue;
                    }
                    r2 = r6 + -1;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25e40;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x25eb0;
                    continue;
                case 0x25e24:
                    r4 = r4 + 1;
                    r3 = r4 & 3;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25e60;
                        continue;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25eb0;
                        continue;
                    }
                    r2 = r2 + -1;
                case 0x25e40:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x25e24;
                        continue;
                    }
                case 0x25e50:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25e5c:
                    r2 = r6 + r0;
                case 0x25e60:
                    r3 = (r2&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25ebc;
                        continue;
                    }
                case 0x25e6c:
                    r5 = r2 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25eb0;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x25e50;
                        continue;
                    }
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x25ea4;
                    continue;
                case 0x25e94:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r2 + 1;
                    if(r3 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x25e50;
                        continue;
                    }
                case 0x25ea4:
                    r4 = r4 + 1;
                    if(r2 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x25e94;
                        continue;
                    }
                case 0x25eb0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25ebc:
                    r5 = r5 & 255;
                    r3 = r5 << 8;
                    r3 = r3 | r5;
                    r9 = r3 << 16;
                    r8 = 65278 << 16;
                    r6 = 32896 << 16;
                    r9 = r9 | r3;
                    r8 = r8 | 65279;
                    r6 = r6 | 32896;
                case 0x25ee0:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r9 ^ r3;
                    r5 = r3 + r8;
                    r3 = ~(r0 | r3);
                    r3 = r5 & r3;
                    r3 = r3 & r6;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25e6c;
                        continue;
                    }
                    r2 = r2 + -4;
                    r3 = (r2&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r4 = r4 + 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25ee0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x25e6c;
                    continue;
                case 0x26000:
                    pc=0x26000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26000() throws ExecutionException { /* 0x26000 - 0x26200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26000:
                    r2 = readPages[(r4+76)>>>12][((r4+76)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r16 = r4 + r0;
                    r17 = r5 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26070;
                        continue;
                    }
                case 0x26028:
                    r3 = r17 << 2;
                    r3 = r2 + r3;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26098;
                        continue;
                    }
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r4;
                case 0x2604c:
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r0;
                case 0x26054:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26070:
                    r5 = r0 + 4;
                    r6 = r0 + 33;
                    /* Next insn is delay slot */ 
                    r31=0x26080;
                    pc=0x29000;
                    run_29000(); return;
                case 0x26080:
                    writePages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26028;
                        continue;
                    }
                case 0x2608c:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x26054;
                    continue;
                case 0x26098:
                    r18 = r0 + 1;
                    r18 = r18 << (r17&0x1f);
                    r6 = r18 + 5;
                    r4 = r16 + r0;
                    r5 = r0 + 1;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x260b8;
                    pc=0x29000;
                    run_29000(); return;
                case 0x260b8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2608c;
                        continue;
                    }
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r17;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    pc=0x2604c;
                    continue;
                case 0x26200:
                    pc=0x26200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26200() throws ExecutionException { /* 0x26200 - 0x26400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26200:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26228;
                        continue;
                    }
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r3 = readPages[(r4+76)>>>12][((r4+76)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r3 + r2;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r5;
                case 0x26228:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26400:
                    pc=0x26400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26400() throws ExecutionException { /* 0x26400 - 0x26600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26400:
                    r29 = r29 + -48;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    r18 = r4 + r0;
                    r17 = r5 + r0;
                    r3 = r5 + 20;
                    r8 = r0 + r0;
                case 0x2642c:
                    r11 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    r9 = r11 & 65535;
                    { long hilo = (long)(r9) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r11 = r11 >>> 16;
                    r3 = r3 + 4;
                    r9 = lo;
                    r9 = r9 + r7;
                    r7 = r9 >>> 16;
                    { long hilo = (long)(r11) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r9 = r9 & 65535;
                    r11 = lo;
                    r10 = r7 + r11;
                    r7 = r10 >>> 16;
                    r10 = r10 << 16;
                    r9 = r10 + r9;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r9;
                    r9 = r8 < r16 ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2642c;
                        continue;
                    }
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x264b0;
                        continue;
                    }
                    r2 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r2 = r16 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x264d4;
                        continue;
                    }
                case 0x26498:
                    r2 = r16 + 4;
                    r2 = r2 << 2;
                    r2 = r17 + r2;
                    r16 = r16 + 1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r7;
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r16;
                case 0x264b0:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x264d4:
                    r5 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r5 = r5 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x264ec;
                    pc=0x26000;
                    run_26000(); return;
                case 0x264ec:
                    r6 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r5 = r17 + 12;
                    r6 = r6 + 2;
                    r4 = r2 + 12;
                    r6 = r6 << 2;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2650c;
                    pc=0x223e0;
                    run_22200(); return;
                case 0x2650c:
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r3 = readPages[(r18+76)>>>12][((r18+76)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r3 + r2;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r17;
                    r17 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x26498;
                    continue;
                case 0x26600:
                    pc=0x26600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26600() throws ExecutionException { /* 0x26600 - 0x26800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26600:
                    r2 = 65535 << 16;
                    r2 = r4 & r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26684;
                        continue;
                    }
                    r4 = r4 << 16;
                    r2 = r0 + 16;
                case 0x26618:
                    r3 = 65280 << 16;
                    r3 = r4 & r3;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26630;
                        continue;
                    }
                    r2 = r2 + 8;
                    r4 = r4 << 8;
                case 0x26630:
                    r3 = 61440 << 16;
                    r3 = r4 & r3;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26648;
                        continue;
                    }
                    r2 = r2 + 4;
                    r4 = r4 << 4;
                case 0x26648:
                    r3 = 49152 << 16;
                    r3 = r4 & r3;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26660;
                        continue;
                    }
                    r2 = r2 + 2;
                    r4 = r4 << 2;
                case 0x26660:
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2667c;
                        continue;
                    }
                    r3 = 16384 << 16;
                    r4 = r4 & r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26690;
                        continue;
                    }
                    r2 = r0 + 32;
                case 0x2667c:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26684:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x26618;
                    continue;
                case 0x26690:
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26800:
                    pc=0x26800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26800() throws ExecutionException { /* 0x26800 - 0x26a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26800:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r3 & 7;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26840;
                        continue;
                    }
                    r2 = r3 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x268d0;
                        continue;
                    }
                    r2 = r3 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x268dc;
                        continue;
                    }
                    r3 = r3 >>> 2;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26840:
                    r2 = r3 & 65535;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x268b0;
                        continue;
                    }
                    r2 = r0 + r0;
                case 0x26850:
                    r5 = r3 & 255;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26864;
                        continue;
                    }
                    r2 = r2 + 8;
                    r3 = r3 >>> 8;
                case 0x26864:
                    r5 = r3 & 15;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26878;
                        continue;
                    }
                    r2 = r2 + 4;
                    r3 = r3 >>> 4;
                case 0x26878:
                    r5 = r3 & 3;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2688c;
                        continue;
                    }
                    r2 = r2 + 2;
                    r3 = r3 >>> 2;
                case 0x2688c:
                    r5 = r3 & 1;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x268c4;
                        continue;
                    }
                    r3 = r3 >>> 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x268c0;
                        continue;
                    }
                    r2 = r0 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x268b0:
                    r3 = r3 >>> 16;
                    r2 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x26850;
                    continue;
                case 0x268c0:
                    r2 = r2 + 1;
                case 0x268c4:
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x268d0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x268dc:
                    r3 = r3 >>> 1;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26a00:
                    pc=0x26a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26a00() throws ExecutionException { /* 0x26a00 - 0x26c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26a00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    r5 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x26a1c;
                    pc=0x26000;
                    run_26000(); return;
                case 0x26a1c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r16;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r4;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26c00:
                    pc=0x26c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26c00() throws ExecutionException { /* 0x26c00 - 0x26e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26c00:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r19 = readPages[(r6+16)>>>12][((r6+16)>>>2)&0x3ff];
                    r18 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    r2 = r18 < r19 ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r17 = r5 + r0;
                    r20 = r6 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26c4c;
                        continue;
                    }
                    r2 = r18 + r0;
                    r17 = r6 + r0;
                    r18 = r19 + r0;
                    r20 = r5 + r0;
                    r19 = r2 + r0;
                case 0x26c4c:
                    r2 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r16 = r18 + r19;
                    r2 = r2 < r16 ? 1 : 0;
                    r5 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26c68;
                        continue;
                    }
                    r5 = r5 + 1;
                case 0x26c68:
                    /* Next insn is delay slot */ 
                    r31=0x26c70;
                    pc=0x26000;
                    run_26000(); return;
                case 0x26c70:
                    r13 = r2 + 20;
                    r14 = r16 << 2;
                    r14 = r13 + r14;
                    r4 = ((r13 & 0xffffffffL) < (r14 & 0xffffffffL)) ? 1 : 0;
                    r3 = r13 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26ca0;
                        continue;
                    }
                case 0x26c8c:
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    r3 = r3 + 4;
                    r4 = ((r3 & 0xffffffffL) < (r14 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26c8c;
                        continue;
                    }
                case 0x26ca0:
                    r12 = r20 + 20;
                    r15 = r19 << 2;
                    r15 = r12 + r15;
                    r24 = r17 + 20;
                    r11 = r18 << 2;
                    r3 = ((r12 & 0xffffffffL) < (r15 & 0xffffffffL)) ? 1 : 0;
                    r11 = r24 + r11;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26e04;
                        run_26e00(); return;
                    }
                case 0x26cc4:
                    r9 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                    r8 = r9 & 65535;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26d60;
                        continue;
                    }
                    r4 = r13 + r0;
                    r3 = r24 + r0;
                    r9 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x26cf0;
                    continue;
                case 0x26cec:
                    r4 = r7 + r0;
                case 0x26cf0:
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r7 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r5 = r6 & 65535;
                    { long hilo = (long)(r5) * ((long)r8); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r6 = r6 >>> 16;
                    r10 = r7 & 65535;
                    r7 = r7 >>> 16;
                    r3 = r3 + 4;
                    r5 = lo;
                    r5 = r5 + r10;
                    r5 = r5 + r9;
                    { long hilo = (long)(r6) * ((long)r8); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r9 = r5 >>> 16;
                    r5 = r5 & 65535;
                    r6 = lo;
                    r6 = r6 + r7;
                    r6 = r6 + r9;
                    r9 = r6 >>> 16;
                    r6 = r6 << 16;
                    r5 = r6 | r5;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r5;
                    r5 = ((r3 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    r7 = r4 + 4;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26cec;
                        continue;
                    }
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r9;
                    r9 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                case 0x26d60:
                    r9 = r9 >>> 16;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26df0;
                        continue;
                    }
                    r4 = readPages[(r13+0)>>>12][((r13+0)>>>2)&0x3ff];
                    r5 = r13 + r0;
                    r7 = r4 + r0;
                    r3 = r24 + r0;
                    r10 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x26d8c;
                    continue;
                case 0x26d88:
                    r5 = r8 + r0;
                case 0x26d8c:
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r6 = tmp;
                    r7 = r7 >>> 16;
                    { long hilo = (long)(r6) * ((long)r9); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = r4 & 65535;
                    r3 = r3 + 4;
                    r8 = r5 + 4;
                    r6 = lo;
                    r6 = r6 + r7;
                    r6 = r6 + r10;
                    r7 = r6 << 16;
                    r4 = r7 | r4;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r4;
                    addr=r3+-4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    r7 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    { long hilo = (long)(r4) * ((long)r9); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = r7 & 65535;
                    r6 = r6 >>> 16;
                    r4 = lo;
                    r4 = r4 + r10;
                    r4 = r4 + r6;
                    r6 = ((r3 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    r10 = r4 >>> 16;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26d88;
                        continue;
                    }
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r4;
                case 0x26df0:
                    r12 = r12 + 4;
                    r3 = ((r12 & 0xffffffffL) < (r15 & 0xffffffffL)) ? 1 : 0;
                    r13 = r13 + 4;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26cc4;
                        continue;
                    }
                case 0x26e00:
                    pc=0x26e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26e00() throws ExecutionException { /* 0x26e00 - 0x27000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26e00:
                case 0x26e04:
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x26e44;
                        continue;
                    }
                    r4 = readPages[(r14+-4)>>>12][((r14+-4)>>>2)&0x3ff];
                    r3 = r14 + -4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26e38;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x26e44;
                    continue;
                case 0x26e24:
                    r3 = r3 + -4;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26e44;
                        continue;
                    }
                case 0x26e38:
                    r16 = r16 + -1;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26e24;
                        continue;
                    }
                case 0x26e44:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r16;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27000:
                    pc=0x27000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27000() throws ExecutionException { /* 0x27000 - 0x27200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27000:
                    r29 = r29 + -40;
                    r2 = r6 & 3;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r19 = r4 + r0;
                    r18 = r5 + r0;
                    r16 = r6 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27124;
                        continue;
                    }
                case 0x27030:
                    r16 = r16 >> 2;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x270cc;
                        continue;
                    }
                    r17 = readPages[(r19+72)>>>12][((r19+72)>>>2)&0x3ff];
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27154;
                        continue;
                    }
                case 0x2704c:
                    r3 = r16 & 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27084;
                        continue;
                    }
                case 0x27058:
                    r16 = r16 >> 1;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x270cc;
                        continue;
                    }
                case 0x27064:
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x270f0;
                        continue;
                    }
                    r17 = r2 + r0;
                case 0x27078:
                    r3 = r16 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27058;
                        continue;
                    }
                case 0x27084:
                    r4 = r19 + r0;
                    r5 = r18 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27098;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x27098:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27118;
                        continue;
                    }
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r4 = readPages[(r19+76)>>>12][((r19+76)>>>2)&0x3ff];
                    r3 = r3 << 2;
                    r3 = r4 + r3;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r16 = r16 >> 1;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r4;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r18;
                    r18 = r2 + r0;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27064;
                        continue;
                    }
                case 0x270cc:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x270f0:
                    r5 = r17 + r0;
                    r6 = r17 + r0;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27104;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x27104:
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27078;
                    continue;
                case 0x27118:
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27058;
                    continue;
                case 0x27124:
                    r2 = r2 + -1;
                    r3 = 3 << 16;
                    r3 = r3 + -14116;
                    r2 = r2 << 2;
                    r2 = r2 + r3;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27148;
                    pc=0x26400;
                    run_26400(); return;
                case 0x27148:
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27030;
                    continue;
                case 0x27154:
                    r4 = r19 + r0;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x27164;
                    pc=0x26000;
                    run_26000(); return;
                case 0x27164:
                    r17 = r2 + r0;
                    r2 = r0 + 625;
                    writePages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r2;
                    writePages[(r19+72)>>>12][((r19+72)>>>2)&0x3ff] = r17;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x2704c;
                    continue;
                case 0x27200:
                    pc=0x27200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27200() throws ExecutionException { /* 0x27200 - 0x27400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27200:
                    r29 = r29 + -48;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r18 = r5 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    r20 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r6 >> 5;
                    r20 = r17 + r20;
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r20 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = r4 + r0;
                    r4 = r2 < r16 ? 1 : 0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    r21 = r6 + r0;
                    r5 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27264;
                        continue;
                    }
                case 0x27250:
                    r2 = r2 << 1;
                    r7 = r2 < r16 ? 1 : 0;
                    r5 = r5 + 1;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27250;
                        continue;
                    }
                case 0x27264:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27270;
                    pc=0x26000;
                    run_26000(); return;
                case 0x27270:
                    r7 = r2 + 20;
                    if(r17 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x272a0;
                        continue;
                    }
                    r8 = r7 + r0;
                    r3 = r0 + r0;
                case 0x27284:
                    r8 = r8 + 4;
                    r3 = r3 + 1;
                    writePages[(r8+-4)>>>12][((r8+-4)>>>2)&0x3ff] = r0;
                    if(r3 != r17) {
                        /* Next insn is delay slot */ 
                        pc=0x27284;
                        continue;
                    }
                    r3 = r3 << 2;
                    r7 = r7 + r3;
                case 0x272a0:
                    r10 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r3 = r18 + 20;
                    r10 = r10 << 2;
                    r6 = r21 & 31;
                    r10 = r3 + r10;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2735c;
                        continue;
                    }
                    r4 = r0 + 32;
                    r4 = r4 - r6;
                    r9 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x272d4;
                    continue;
                case 0x272d0:
                    r7 = r8 + r0;
                case 0x272d4:
                    r11 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    r11 = r11 << (r6&0x1f);
                    r9 = r9 | r11;
                    writePages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff] = r9;
                    r9 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    r11 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    r8 = r7 + 4;
                    r9 = r9 >>> (r4&0x1f);
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x272d0;
                        continue;
                    }
                    writePages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff] = r9;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27310;
                        continue;
                    }
                    r16 = r20 + 2;
                case 0x27310:
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r4 = readPages[(r19+76)>>>12][((r19+76)>>>2)&0x3ff];
                    r3 = r3 << 2;
                    r3 = r4 + r3;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = r16 + -1;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r16;
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r4;
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r18;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2735c:
                    r3 = r3 + 4;
                    r6 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    r7 = r7 + 4;
                    writePages[(r7+-4)>>>12][((r7+-4)>>>2)&0x3ff] = r6;
                    r6 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27310;
                        continue;
                    }
                    r3 = r3 + 4;
                    r6 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    r7 = r7 + 4;
                    writePages[(r7+-4)>>>12][((r7+-4)>>>2)&0x3ff] = r6;
                    r6 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2735c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x27310;
                    continue;
                case 0x27400:
                    pc=0x27400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27400() throws ExecutionException { /* 0x27400 - 0x27600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27400:
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r3 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    r2 = r2 - r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27478;
                        continue;
                    }
                    r3 = r3 << 2;
                    r4 = r4 + 20;
                    r5 = r5 + 20;
                    r2 = r4 + r3;
                    r5 = r5 + r3;
                    /* Next insn is delay slot */ 
                    pc=0x27440;
                    continue;
                case 0x27434:
                    r3 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27474;
                        continue;
                    }
                case 0x27440:
                    r2 = r2 + -4;
                    r5 = r5 + -4;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r6 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x27434;
                        continue;
                    }
                    r3 = ((r3 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27480;
                        continue;
                    }
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27474:
                    r2 = r0 + r0;
                case 0x27478:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27480:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27600:
                    pc=0x27600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27600() throws ExecutionException { /* 0x27600 - 0x27800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27600:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    r16 = r5 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r17 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27634;
                    pc=0x27400;
                    run_27400(); return;
                case 0x27634:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x277a4;
                        continue;
                    }
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2778c;
                        continue;
                    }
                    r19 = r0 + r0;
                case 0x27648:
                    r5 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27658;
                    pc=0x26000;
                    run_26000(); return;
                case 0x27658:
                    r10 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r13 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r4 = r16 + 20;
                    r12 = r10 << 2;
                    r7 = r17 + 20;
                    r13 = r13 << 2;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r19;
                    r12 = r4 + r12;
                    r13 = r7 + r13;
                    r3 = r2 + 20;
                    r5 = r0 + r0;
                case 0x27684:
                    r8 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r9 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r6 = r8 & 65535;
                    r5 = r6 + r5;
                    r11 = r9 & 65535;
                    r6 = r5 - r11;
                    r8 = r8 >>> 16;
                    r9 = r9 >>> 16;
                    r5 = r6 >> 16;
                    r8 = r8 - r9;
                    r8 = r8 + r5;
                    r7 = r7 + 4;
                    r5 = r8 >> 16;
                    r6 = r6 & 65535;
                    r8 = r8 << 16;
                    r6 = r8 | r6;
                    r3 = r3 + 4;
                    r8 = ((r7 & 0xffffffffL) < (r13 & 0xffffffffL)) ? 1 : 0;
                    r4 = r4 + 4;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r6;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27684;
                        continue;
                    }
                    r7 = ((r4 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    r9 = r3 + r0;
                    r11 = r4 + r0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27748;
                        continue;
                    }
                case 0x276f0:
                    r8 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    r6 = r8 & 65535;
                    r6 = r6 + r5;
                    r7 = r6 >> 16;
                    r8 = r8 >>> 16;
                    r7 = r7 + r8;
                    r5 = r7 >> 16;
                    r6 = r6 & 65535;
                    r7 = r7 << 16;
                    r6 = r7 | r6;
                    r3 = r3 + 4;
                    r7 = ((r4 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r6;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x276f0;
                        continue;
                    }
                    r3 = ~(r0 | r11);
                    r3 = r3 + r12;
                    r3 = r3 >>> 2;
                    r3 = r3 + 1;
                    r3 = r3 << 2;
                    r3 = r9 + r3;
                case 0x27748:
                    r3 = r3 + -4;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27768;
                        continue;
                    }
                case 0x27754:
                    r3 = r3 + -4;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r10 = r10 + -1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27754;
                        continue;
                    }
                case 0x27768:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r10;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2778c:
                    r2 = r16 + r0;
                    r19 = r0 + 1;
                    r16 = r17 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27648;
                    continue;
                case 0x277a4:
                    r4 = r18 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x277b4;
                    pc=0x26000;
                    run_26000(); return;
                case 0x277b4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27800:
                    pc=0x27800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27800() throws ExecutionException { /* 0x27800 - 0x27a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27800:
                    r29 = r29 + -48;
                    r5 = r0 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    r16 = r6 + r0;
                    r17 = r7 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2782c;
                    pc=0x26000;
                    run_26000(); return;
                case 0x2782c:
                    r18 = r2 + r0;
                    r19 = r16 << 1;
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r19 = r19 >>> 21;
                    r2 = r2 & r16;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27854;
                        continue;
                    }
                    r3 = 16 << 16;
                    r2 = r2 | r3;
                case 0x27854:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x278f4;
                        continue;
                    }
                    r4 = r29 + 20;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r31=0x27870;
                    pc=0x26800;
                    run_26800(); return;
                case 0x27870:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27964;
                        continue;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r3;
                case 0x27884:
                    writePages[(r18+24)>>>12][((r18+24)>>>2)&0x3ff] = r16;
                    r3 = r0 + 2;
                    r16 = (r16&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r16 = r3 - r16;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r16;
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27920;
                        continue;
                    }
                case 0x278a0:
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = r2 + -1074;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r16 << 2;
                    r2 = r18 + r2;
                    r4 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r16 = r16 << 5;
                    /* Next insn is delay slot */ 
                    r31=0x278c4;
                    pc=0x26600;
                    run_26600(); return;
                case 0x278c4:
                    r3 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r16 - r2;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x278f4:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x27900;
                    pc=0x26800;
                    run_26800(); return;
                case 0x27900:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r2 + 32;
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r3;
                    r16 = r0 + 1;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x278a0;
                        continue;
                    }
                case 0x27920:
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r19 + -1075;
                    r19 = r19 + r2;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r19;
                    r3 = r0 + 53;
                    r2 = r3 - r2;
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r3 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27964:
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r0 - r2;
                    r4 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r16 << (r3&0x1f);
                    r3 = r3 | r4;
                    r16 = r16 >>> (r2&0x1f);
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x27884;
                    continue;
                case 0x27a00:
                    pc=0x27a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27a00() throws ExecutionException { /* 0x27a00 - 0x27c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27a00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27a28;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27ac8;
                        continue;
                    }
                case 0x27a28:
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x27a74;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                case 0x27a54:
                    r3 = r2 + 1;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27a74:
                    r3 = readPages[(r6+24)>>>12][((r6+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27ae8;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x27a54;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = r0 + 10;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x28c00;
                    run_28c00(); return;
                case 0x27ac8:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x27ad8;
                    pc=0x1a600;
                    run_1a600(); return;
                case 0x27ad8:
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x27a28;
                    continue;
                case 0x27ae8:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x28c00;
                    run_28c00(); return;
                case 0x27c00:
                    pc=0x27c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27c00() throws ExecutionException { /* 0x27c00 - 0x27e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27c00:
                    r29 = r29 + -56;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r30;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r23;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r16 = r5 + r0;
                    r20 = r6 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27f4c;
                        run_27e00(); return;
                    }
                    r21 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27c48;
                    pc=0x1d800;
                    run_1d800(); return;
                case 0x27c48:
                    r3 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r2 = r20 + 11;
                    r17 = r0 + -4;
                    r4 = (r2&0xffffffffL) < (23&0xffffffffL) ? 1 : 0;
                    r19 = r16 + -8;
                    r17 = r3 & r17;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27d8c;
                        continue;
                    }
                    r4 = r0 + 16;
                    r18 = r0 + 16;
                case 0x27c70:
                    r2 = ((r18 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27da0;
                        continue;
                    }
                    r2 = r17 < r4 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27de0;
                        continue;
                    }
                    r23 = 3 << 16;
                    r23 = r23 + -12448;
                    r5 = readPages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff];
                    r2 = r19 + r17;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x27f84;
                        run_27e00(); return;
                    }
                    r6 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r7 = r0 + -2;
                    r7 = r6 & r7;
                    r7 = r2 + r7;
                    r7 = readPages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff];
                    r7 = r7 & 1;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27db4;
                        continue;
                    }
                    r6 = r0 + r0;
                    r2 = r0 + r0;
                case 0x27ccc:
                    r3 = r3 & 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27ea4;
                        run_27e00(); return;
                    }
                    r22 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    r3 = r0 + -4;
                    r22 = r19 - r22;
                    r7 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r3 = r7 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28098;
                        run_28000(); return;
                    }
                    r3 = r3 + r17;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x280a4;
                        run_28000(); return;
                    }
                    r23 = r6 + r3;
                    r5 = r23 < r4 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27e94;
                        run_27e00(); return;
                    }
                    r3 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r3;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r2;
                case 0x27d28:
                    r2 = readPages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff];
                    r3 = readPages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff];
                    r6 = r17 + -4;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    r19 = r22 + 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28070;
                        run_28000(); return;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27fe4;
                        run_27e00(); return;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff] = r2;
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x281c0;
                        run_28000(); return;
                    }
                    r3 = r22 + 16;
                    r16 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x27fe8;
                    run_27e00(); return;
                case 0x27d8c:
                    r18 = r0 + -8;
                    r18 = r2 & r18;
                    r4 = r18 + r0;
                    if(r18 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x27c70;
                        continue;
                    }
                case 0x27da0:
                    r2 = r0 + 12;
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27e20;
                    run_27e00(); return;
                case 0x27db4:
                    r7 = r0 + -4;
                    r6 = r6 & r7;
                    r7 = r6 + r17;
                    r8 = r7 < r4 ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27ccc;
                        continue;
                    }
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r17 = r7 + r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r4;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r2;
                case 0x27de0:
                    r6 = r17 - r18;
                    r2 = (r6&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27e54;
                        run_27e00(); return;
                    }
                    r3 = r3 & 1;
                    r3 = r3 | r17;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r3;
                    r17 = r19 + r17;
                case 0x27e00:
                    pc=0x27e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27e00() throws ExecutionException { /* 0x27e00 - 0x28000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27e00:
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r2 = r2 | 1;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r2;
                case 0x27e10:
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27e1c;
                    pc=0x1da00;
                    run_1da00(); return;
                case 0x27e1c:
                    r2 = r16 + r0;
                case 0x27e20:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27e54:
                    r3 = r3 & 1;
                    r5 = r19 + r18;
                    r2 = r6 | 1;
                    r18 = r3 | r18;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r18;
                    r6 = r5 + r6;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 | 1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r2;
                    r5 = r5 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x27e8c;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x27e8c:
                    /* Next insn is delay slot */ 
                    pc=0x27e10;
                    continue;
                case 0x27e94:
                    r23 = r3 + r0;
                case 0x27e98:
                    r4 = r23 < r4 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27d28;
                        run_27c00(); return;
                    }
                case 0x27ea4:
                    r5 = r20 + r0;
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27eb4;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x27eb4:
                    r20 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2828c;
                        run_28200(); return;
                    }
                    r3 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r4 = r2 + -8;
                    r2 = r0 + -2;
                    r2 = r3 & r2;
                    r2 = r19 + r2;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x281a8;
                        run_28000(); return;
                    }
                    r6 = r17 + -4;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28058;
                        run_28000(); return;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27fb0;
                        continue;
                    }
                    r2 = r20 + r0;
                    r3 = r16 + r0;
                case 0x27f00:
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r4;
                    r3 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                case 0x27f24:
                    r4 = r21 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27f34;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x27f34:
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27f40;
                    pc=0x1da00;
                    run_1da00(); return;
                case 0x27f40:
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27e20;
                    continue;
                case 0x27f4c:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = r6 + r0;
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x27f84:
                    r6 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r6 = r6 & r2;
                    r2 = r6 + r17;
                    r7 = r18 + 16;
                    r7 = r2 < r7 ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2801c;
                        run_28000(); return;
                    }
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27ccc;
                    run_27c00(); return;
                case 0x27fb0:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r2;
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28174;
                        run_28000(); return;
                    }
                    r2 = r20 + 8;
                    r3 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x27f00;
                    continue;
                case 0x27fe4:
                    r3 = r19 + r0;
                case 0x27fe8:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r17 = r23 + r0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                case 0x28000:
                    pc=0x28000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28000() throws ExecutionException { /* 0x28000 - 0x28200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28000:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r16 = r19 + r0;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r19 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27de0;
                    run_27c00(); return;
                case 0x2801c:
                    r2 = r2 - r18;
                    r19 = r19 + r18;
                    r2 = r2 | 1;
                    writePages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff] = r19;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 & 1;
                    r18 = r18 | r2;
                    writePages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    r31=0x2804c;
                    pc=0x1da00;
                    run_1da00(); return;
                case 0x2804c:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27e20;
                    run_27e00(); return;
                case 0x28058:
                    r4 = r20 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28068;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x28068:
                    /* Next insn is delay slot */ 
                    pc=0x27f24;
                    run_27e00(); return;
                case 0x28070:
                    r4 = r19 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28080;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x28080:
                    r16 = r19 + r0;
                    r3 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r17 = r23 + r0;
                    r19 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27de0;
                    run_27c00(); return;
                case 0x28098:
                    r23 = r3 + r17;
                    /* Next insn is delay slot */ 
                    pc=0x27e98;
                    run_27e00(); return;
                case 0x280a4:
                    r30 = r6 + r3;
                    r2 = r18 + 16;
                    r2 = r30 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27e94;
                        run_27e00(); return;
                    }
                    r2 = readPages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff];
                    r3 = readPages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff];
                    r6 = r17 + -4;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    r19 = r22 + 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28240;
                        run_28200(); return;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28234;
                        run_28200(); return;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff] = r2;
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28258;
                        run_28200(); return;
                    }
                    r3 = r22 + 16;
                    r16 = r16 + 8;
                case 0x28114:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r2;
                case 0x28138:
                    r2 = r30 - r18;
                    r3 = r22 + r18;
                    r2 = r2 | 1;
                    writePages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff] = r3;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 & 1;
                    r18 = r18 | r2;
                    writePages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    r31=0x28168;
                    pc=0x1da00;
                    run_1da00(); return;
                case 0x28168:
                    r2 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27e20;
                    run_27e00(); return;
                case 0x28174:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r20+12)>>>12][((r20+12)>>>2)&0x3ff] = r2;
                    r2 = r0 + 36;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x281f4;
                        continue;
                    }
                    r2 = r20 + 16;
                    r3 = r16 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x27f00;
                    run_27e00(); return;
                case 0x281a8:
                    r4 = readPages[(r20+-4)>>>12][((r20+-4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r2 = r4 & r2;
                    r17 = r17 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x27de0;
                    run_27c00(); return;
                case 0x281c0:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r22+20)>>>12][((r22+20)>>>2)&0x3ff] = r2;
                    r2 = r0 + 36;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x28214;
                        run_28200(); return;
                    }
                    r3 = r22 + 24;
                    r16 = r16 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x27fe8;
                    run_27e00(); return;
                case 0x281f4:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r16 + 24;
                    writePages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff] = r2;
                case 0x28200:
                    pc=0x28200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28200() throws ExecutionException { /* 0x28200 - 0x28400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28200:
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r2 = r20 + 24;
                    writePages[(r20+20)>>>12][((r20+20)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x27f00;
                    run_27e00(); return;
                case 0x28214:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r22 + 32;
                    writePages[(r22+24)>>>12][((r22+24)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r16 = r16 + 24;
                    writePages[(r22+28)>>>12][((r22+28)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x27fe8;
                    run_27e00(); return;
                case 0x28234:
                    r3 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x28114;
                    run_28000(); return;
                case 0x28240:
                    r4 = r19 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28250;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x28250:
                    /* Next insn is delay slot */ 
                    pc=0x28138;
                    run_28000(); return;
                case 0x28258:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r22+20)>>>12][((r22+20)>>>2)&0x3ff] = r2;
                    r2 = r0 + 36;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x282a4;
                        continue;
                    }
                    r3 = r22 + 24;
                    r16 = r16 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x28114;
                    run_28000(); return;
                case 0x2828c:
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28298;
                    pc=0x1da00;
                    run_1da00(); return;
                case 0x28298:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27e20;
                    run_27e00(); return;
                case 0x282a4:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r22 + 32;
                    writePages[(r22+24)>>>12][((r22+24)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r16 = r16 + 24;
                    writePages[(r22+28)>>>12][((r22+28)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x28114;
                    run_28000(); return;
                case 0x28400:
                    pc=0x28400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28400() throws ExecutionException { /* 0x28400 - 0x28600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28400:
                    r4 = f13;
                    r3 = 32767 << 16;
                    r3 = r3 | 65535;
                    r3 = r3 & r4;
                    r5 = f12;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28440;
                        continue;
                    }
                    r2 = 65520 << 16;
                    r2 = r3 + r2;
                    r6 = 32736 << 16;
                    r2 = ((r2 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28454;
                        continue;
                    }
                    r2 = r0 + 4;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28440:
                    r2 = (r5&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r3 = r0 + 3;
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28454:
                    r2 = 16 << 16;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28470;
                        continue;
                    }
                    r2 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28470:
                    r2 = 32752 << 16;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x28488;
                        continue;
                    }
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28488:
                    r2 = (r5&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28600:
                    pc=0x28600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28600() throws ExecutionException { /* 0x28600 - 0x28800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28600:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32716)>>>12][((r28+-32716)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x22350;
                    run_22200(); return;
                case 0x28800:
                    pc=0x28800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28800() throws ExecutionException { /* 0x28800 - 0x28a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28800:
                    r2 = readPages[(r5+100)>>>12][((r5+100)>>>2)&0x3ff];
                    r29 = r29 + -56;
                    r2 = r2 & 8192;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r22;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r23;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r19 = r5 + r0;
                    r22 = r6 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28908;
                        continue;
                    }
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r20 = r4 + r0;
                    r23 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r21 = r0 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x288fc;
                        continue;
                    }
                case 0x28858:
                    r18 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r16 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    r18 = r18 >>> 2;
                    r17 = r0 + r0;
                    if(r18 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x28888;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x288e4;
                    continue;
                case 0x28878:
                    r17 = r17 + 1;
                    r16 = r16 + 4;
                    if(r18 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x288e0;
                        continue;
                    }
                case 0x28888:
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2889c;
                    pc=0x29200;
                    run_29200(); return;
                case 0x2889c:
                    if(r2 != r21) {
                        /* Next insn is delay slot */ 
                        pc=0x28878;
                        continue;
                    }
                    r2 = r0 + -1;
                case 0x288a8:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    writePages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff] = r0;
                    writePages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff] = r0;
                    r23 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x288e0:
                    r2 = readPages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff];
                case 0x288e4:
                    r18 = r18 << 2;
                    r2 = r2 - r18;
                    writePages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff] = r2;
                    r23 = r23 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28858;
                        continue;
                    }
                case 0x288fc:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x288a8;
                    continue;
                case 0x28908:
                    /* Next insn is delay slot */ 
                    r31=0x28910;
                    pc=0x25000;
                    run_25000(); return;
                case 0x28910:
                    /* Next insn is delay slot */ 
                    pc=0x288a8;
                    continue;
                case 0x28a00:
                    pc=0x28a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28a00() throws ExecutionException { /* 0x28a00 - 0x28c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28a00:
                    r3 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28a18;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x28800;
                    run_28800(); return;
                case 0x28a18:
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r0;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28c00:
                    pc=0x28c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28c00() throws ExecutionException { /* 0x28c00 - 0x28e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28c00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r18 = r5 + r0;
                    r16 = r6 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28c38;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28de4;
                        continue;
                    }
                case 0x28c38:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 & 65535;
                    r4 = r3 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28db8;
                        continue;
                    }
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28db8;
                        continue;
                    }
                case 0x28c6c:
                    r3 = r3 & 8192;
                    r18 = r18 & 255;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28cf4;
                        continue;
                    }
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r4 = r3 - r4;
                    r2 = r4 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28d24;
                        continue;
                    }
                case 0x28c94:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    r2 = r2 + -1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r2 = r3 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x28d68;
                        continue;
                    }
                case 0x28cc0:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28d8c;
                        continue;
                    }
                case 0x28cd4:
                    r2 = r18 + r0;
                case 0x28cd8:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28cf4:
                    r3 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    r2 = r2 | 8192;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -8193;
                    r2 = r3 & r2;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r4 = r3 - r4;
                    r2 = r4 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28c94;
                        continue;
                    }
                case 0x28d24:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28d34;
                    pc=0x19e00;
                    run_19e00(); return;
                case 0x28d34:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28d80;
                        continue;
                    }
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r2 = r3 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x28cc0;
                        continue;
                    }
                case 0x28d68:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28d78;
                    pc=0x19e00;
                    run_19e00(); return;
                case 0x28d78:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28cd4;
                        continue;
                    }
                case 0x28d80:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x28cd8;
                    continue;
                case 0x28d8c:
                    r2 = r0 + 10;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x28cd4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28da8;
                    pc=0x19e00;
                    run_19e00(); return;
                case 0x28da8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28cd4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x28d80;
                    continue;
                case 0x28db8:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28dc8;
                    pc=0x22000;
                    run_22000(); return;
                case 0x28dc8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28d80;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r2 & 65535;
                    /* Next insn is delay slot */ 
                    pc=0x28c6c;
                    continue;
                case 0x28de4:
                    /* Next insn is delay slot */ 
                    r31=0x28dec;
                    pc=0x1a600;
                    run_1a600(); return;
                case 0x28dec:
                    /* Next insn is delay slot */ 
                    pc=0x28c38;
                    continue;
                case 0x28e00:
                    pc=0x28e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28e00() throws ExecutionException { /* 0x28e00 - 0x29000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28e00:
                    r29 = r29 + -88;
                    r5 = r29 + 16;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x28e14;
                    pc=0x28600;
                    run_28600(); return;
                case 0x28e14:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x28e68;
                        continue;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 8192;
                    r3 = r3 & 61440;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x28e54;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x28e38;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x28e38:
                    r3 = r0 + 25;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                case 0x28e44:
                    r31 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 88;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28e54:
                    r31 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r29 = r29 + 88;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28e68:
                    /* Next insn is delay slot */ 
                    r31=0x28e70;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x28e70:
                    r3 = r0 + 9;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x28e44;
                    continue;
                case 0x29000:
                    pc=0x29000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29000() throws ExecutionException { /* 0x29000 - 0x29200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29000:
                    { long hilo = (long)(r5) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r29 = r29 + -48;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    r5 = lo;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x29034;
                    pc=0x1d800;
                    run_1d800(); return;
                case 0x29034:
                    r2 = 3 << 16;
                    r18 = readPages[(r2+-12440)>>>12][((r2+-12440)>>>2)&0x3ff];
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r20 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x29050;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x29050:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2917c;
                        continue;
                    }
                    r19 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r3 = r16 + -8;
                    r2 = r0 + -4;
                    r19 = r19 & r2;
                    if(r18 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2914c;
                        continue;
                    }
                case 0x29074:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x29080;
                    pc=0x1da00;
                    run_1da00(); return;
                case 0x29080:
                    r6 = r19 + -4;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29108;
                        continue;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x290d4;
                        continue;
                    }
                    r2 = r16 + r0;
                case 0x290a0:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r0;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r0;
                    r2 = r16 + r0;
                case 0x290b0:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x290d4:
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29140;
                        continue;
                    }
                    r2 = r0 + 36;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r0;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x29168;
                        continue;
                    }
                    r2 = r16 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x290a0;
                    continue;
                case 0x29108:
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x29118;
                    pc=0x223f0;
                    run_22200(); return;
                case 0x29118:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29140:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x290a0;
                    continue;
                case 0x2914c:
                    r2 = r20 & r2;
                    r3 = ((r2 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29074;
                        continue;
                    }
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x29074;
                    continue;
                case 0x29168:
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    r2 = r16 + 24;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x290a0;
                    continue;
                case 0x2917c:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x29188;
                    pc=0x1da00;
                    run_1da00(); return;
                case 0x29188:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x290b0;
                    continue;
                case 0x29200:
                    pc=0x29200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29200() throws ExecutionException { /* 0x29200 - 0x29400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29200:
                    addr=r6+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -56;
                    r3 = r2 & 8192;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    r19 = r4 + r0;
                    r18 = r5 + r0;
                    r16 = r6 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29254;
                        continue;
                    }
                    r2 = r2 | 8192;
                    addr=r6+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r6+100)>>>12][((r6+100)>>>2)&0x3ff];
                    r2 = r2 | 8192;
                    writePages[(r6+100)>>>12][((r6+100)>>>2)&0x3ff] = r2;
                case 0x29254:
                    /* Next insn is delay slot */ 
                    r31=0x2925c;
                    pc=0x25a00;
                    run_25a00(); return;
                case 0x2925c:
                    r3 = r0 + 1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x293c4;
                        continue;
                    }
                case 0x29268:
                    r4 = r19 + r0;
                    r5 = r29 + 16;
                    r6 = r18 + r0;
                    r7 = r16 + 92;
                    /* Next insn is delay slot */ 
                    r31=0x29280;
                    pc=0x29600;
                    run_29600(); return;
                case 0x29280:
                    r20 = r2 + r0;
                    r2 = r0 + -1;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x29358;
                        continue;
                    }
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2934c;
                        continue;
                    }
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x2929c:
                    r17 = r0 + r0;
                    r21 = r0 + 10;
                    /* Next insn is delay slot */ 
                    pc=0x292e4;
                    continue;
                case 0x292ac:
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                case 0x292c8:
                    r17 = r17 + 1;
                    r3 = ((r17 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2934c;
                        continue;
                    }
                case 0x292d8:
                    r2 = r29 + 16;
                    r3 = r2 + r17;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x292e4:
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x292ac;
                        continue;
                    }
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r3 = r3 < r2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29394;
                        continue;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x293ec;
                        continue;
                    }
                    r17 = r17 + 1;
                    r2 = r2 + 1;
                    r3 = ((r17 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x292d8;
                        continue;
                    }
                case 0x2934c:
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2936c;
                    continue;
                case 0x29358:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                case 0x2936c:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r21 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r20 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29394:
                    r4 = r19 + r0;
                    r5 = r5 & 255;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x293a8;
                    pc=0x28c00;
                    run_28c00(); return;
                case 0x293a8:
                    r2 = r2 + 1;
                    r2 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                case 0x293b0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x292c8;
                        continue;
                    }
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x2936c;
                    continue;
                case 0x293c4:
                    r2 = r18 + -1;
                    r2 = (r2&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29268;
                        continue;
                    }
                    r5 = r18 << 24;
                    r5 = r5 >> 24;
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r20 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x2929c;
                    continue;
                case 0x293ec:
                    r4 = r19 + r0;
                    r5 = r0 + 10;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x29400;
                    pc=0x28c00;
                    run_28c00(); return;
                case 0x29400:
                    pc=0x29400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29400() throws ExecutionException { /* 0x29400 - 0x29600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29400:
                    r2 = r2 + 1;
                    r2 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=0x293b0;
                    run_29200(); return;
                case 0x29600:
                    pc=0x29600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29600() throws ExecutionException { /* 0x29600 - 0x29800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29600:
                    r29 = r29 + -64;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    r17 = r7 + r0;
                    r18 = readPages[(r28+-32620)>>>12][((r28+-32620)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2968c;
                        continue;
                    }
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r5;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x29638;
                    pc=0x25800;
                    run_25800(); return;
                case 0x29638:
                    r5 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r6 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r4 = r16 + r0;
                    r7 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=r18;
                    r31=0x29654;
                    return;
                case 0x29654:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x29670;
                        continue;
                    }
                    r2 = r0 + 138;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                case 0x29670:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2968c:
                    /* Next insn is delay slot */ 
                    r31=0x29694;
                    pc=0x25800;
                    run_25800(); return;
                case 0x29694:
                    r7 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r4 = r16 + r0;
                    r5 = r29 + 24;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r18;
                    r31=0x296b0;
                    return;
                case 0x296b0:
                    /* Next insn is delay slot */ 
                    pc=0x29654;
                    continue;
                case 0x29800:
                    pc=0x29800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29800() throws ExecutionException { /* 0x29800 - 0x29a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29800:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29824;
                        continue;
                    }
                    r2 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29830;
                        continue;
                    }
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29824:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29830:
                    r2 = r0 + 138;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x299fc:
                case 0x29a00:
                    pc=0x29a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }

    private static final int[] _data1 = decodeData("\177\177\177\177x\000\000\000\000\000 \020\010\004\002\001",0x2);
    private static final int[] _data2 = decodeData("\177\177\177\177x\000\000\000\000\000 \020\010\004\002\001",0x2);
    private static final int[] _data3 = decodeData(">_Og|\002\003\002A PH$\022\011\004BapxD\"\023\nEbqHd0\000\000\000%>z\021g\n\006?1dc::#q*h?b\"\024['\033\024ed>h\000\000\024\020%\033i B)\036kE\002\021$@=\026P)\003*9\026W'UjJi D)\036Rjtz\\hTVJ\0042It@N R\006Dj\011\013R\024\011\005\023i\001\010A M\011D.HP%\024O$\005\002\025$S\"R\006DvPP&\024O$\004\n\025\035D\024\011e\033i T)\036H\010\024)Q&T\"TI\024BO\026(\025J'R\002A\030A$\r\0322A0R=V\010\005\002i$@=VJ\005RMtP.\024O$\005\002=2Nj\n\005rIt@S&\020(S\"O\020(\030\n'R\002i\022Y\032\024I}9\000P1)U\005\023j\031\nR\032\024zB\001 b0*\022\005\023jQ\nH\032\023JLA b)\036H\nt\n iN\020\n\006$r\020R=)Q)\003\"-*Nb\n\006\"It@T*UvB\001 fR\"\n'U\"!\nR\0321\005\003\031$z *\022\n$Jfh(\032\n'R\002\031\036H\0324D\002AU(H\024O(dJ hF*2\005\003)$z #\020+\023&X@(\033\r\005\022\001u&I$\r\0115\032Q\022Y\020\021ItFHP6\024O$\005\032%\0204%te\0039$z )Q)\003\"Y+N\020\n\007\005\" R=\"V&E& P8\024O$\004*diT\024\016%\023i\001\034A,M\031bAhR=W\n\0072Iv\\(\036\n'R\0021\nH\032\024d\004\"!\002Eg\n\007RIt@I,M\0115:U\031Z\024\017E\023i\001\016R\"V&E\"\025$ \"\022\010\024.8P?\024O7rB\000R=\020\020(S6PP^\024O$\004Z\005\n4)\022+\r\"w\002\000.p$\002B\004\\)\036Q)\003\"d] \024\020%\022\001u\003H\020\n\010\025\022\024R \036P(\035\021\000PA)\n)sj\0051R\024\020*\"I\014zE$\r\032\"\002xPA)J$3j\02524iJ\010\022J]\002= v\005\004\n\\R= SvR\001hPA'\026%\023j\025\0204'\022;\022B\004R^\025HgT*fj#\035\n\010\024b12)\036U)DNd@( S\005\022\031u+L\024\020(t\n%\034)\036P+\004:\025\0204g\010g\"B\005\016)\"O)\024F(PA\024WDSj\0272( J+bYhF= q$\003Q!\002)/\nd\003j\02534\020\n\010\025\022HR= V\032\"B\005$R\024O(\024)S$ /\n\010\025\021$@= P&]\021!\002R\024O(\024\011W$( R*\"Iu\nH\0324E\004\n$R=\"V6BB\0052)\036Q+\033)!\002U\024O(\024}PF:\024\020)BI\000zUf\010g\"B\005\030S\024H\007U*34( S\0112Iu\002O\0322e\004\n0R^\036P)|a\000t( PID)$zE,M\010%.0PA!\023\010RIu\002X!\0259BB\004RV'O(UMPPA'\021e\022Yu\nY\032\023Y\"B\005(A)\022%\023j\005\020T P&E\022'2( J*Dz4zAbJ\010\022JQ(I\036P8R\001!\002T\024H\007T\n\027( \024\020%\025!u\003H\024\020%\023j\007\n]a\010\005\004\021$@=!\022+\033!\000PB\"J+b\031u\004Id\n\010$*%\034G\024O($JdhI$\023[\002\001!\004O*\022\005\022\001u\004O+M\nLA\000PB*Te\022\031u\004I$\r\033\"B\011$E Re\023j\011$E,M92B\011*I&\n'T\022%\0204f\n\010\"Iw\004]aH\005\004\031$@=)R+\033!\000PC$\n+cn-<E\024\020i\002Iw\026(!R\010\022JHF=%Q)\013)!\006H\024O(<A\001&(!R%\022\031u&A,m\005\004\032$RA\036Ty\002B\r\022)'O*<A!\006I\024Q)cjO\020(!R*EI$zS$R\nDNdPC\024Jg]\031!\006K\024O92B\r\036M&ShDzI\n)\036Rh\024\011Q\032A$\021\011tFHPC'S%\023j-\002HfJ\0105*%()\036Ri\024FPPC)\021(\022Iu\026R$V(]I!\006)\036rk\\!\000PD\024H\007T\"%34\020\n\010E\0218R \036Q\010\024\011Q\026T\"tD3Q!\010E\"\n$\003j\021\022Hb\013HRB\020R \036q\0043Ry\n(\"\n$\003nP@(\"\021%\025q\014zD$r\004\002B\021\036)\020\017(E.\\@(\"\023hU\031$zD R\033\"B\021\036N\"J$\003j\021\002H\032sE\004\"=\022N#J'T\"U.4$R\011mA\000PD'Ue\023j\021\003W\021J\010E)%\002=%\025:r\031!\010U\024WD3j)\003X\024\021\005\023n\021;E\020\n\010RI\000zI,R+\033!\014t(\"J$\013i\034t^\024\021%\022\005t@:\024\021%\022\001u\023Y\021J\010T!$@=b\010g\"B\024RD\020/%\004*XRE)\017(TAS,(\"J+b)u\022YZ\n\010U\022$R#\036R+\023\"I\023Y\024\021*$I$zE$\r\n$N F:\024\021*\"I\014zEi\n\010U\022I\036R\024O(TAQ$O$4E\004*I\002S\"J'TJ!$E,M:2B\025$)\021O(TFHPE)\n'T.H@(\"UHTq$zI,UHTF8F:\024\021%\025=u\000(\"Ue\023jW.(\"Ue\023je+W\024\021%\024yu\023Y\021NDbB\025&)\020\017)\024FhF:\024\021%\025\031\002z#\035\n\010TbdR \036S\011\035I\014t(\"S(TrPR=&Q)\004vPPE#\025)BIu\014U$3\005\004*\024R=$V6BB\025\002R'\n'T*HkN\020\n\010T\nHR^\036Q*+)!\nA\"\n'T*#\010#\035\n\010T\011$@=$V(\035A!\nA\024TjSj\025\0215\024\021(\022Iu\022YZJ\010TJ\035\020)\036Q+\033!!\nI\024O)\025MP@(\"V(RIu\002YZ\n\010UI$zIlJ\010U)$zY*UvRB\025\"U S\005\023j%24%Uj\\a!\n)\036Q9\005n\030@(#\n$\003j\025\0204c\n\010e*0R=#\025)\014a!\014R$Q)d!$zF)\021)\003*;\010(#\020*DB\025$)\036QH\024\011Q\010H\"tE\0041%\r=\024\021E\023n\031;G\020\n\010rI\000zJ$V6BB\035\022V\024O(tJ kV\020\n\010rJ%<=cJ\010t)%(=#Q)\013*M*(#QhU\031$zG%\021)\003&LPG#J'\\9\001\004#\024\021e\023n\034PG\024Jg\\Q!\016R\"P*BIu\016R\"V&M!!\016O'\n(Sj\035\002O\032sD2B\035\020)^H\005\004:8R=g\n\010rIw\016]d\010\005\004A$@=\"V&D\036 @($\020*bIt^H Q&m1\000PH\"THRIt^H$V:\"\001!\020O*TE\023j\005.5\"tE\004B=.)\036Ki\004\016\\PH\024HgR~ PH\024o+\\I\000PI'\n'TJ#\034 \024\022%\022\001u\002YZ\n\011\022I\000zAlJ\011\024q%\010= V&\\rM\nM\024\022%\023j'2  SJBB$R= v%\004J\025$)\036R+\024.HF:)\n\011\024*\020R \036R+\034!!\022E\"\n$\003j\00525b\n\011\024*8R=$V(TF8PI\"J*Cj\00524\"r\005\004I\034R= V6R\001hPI\024WDSj\00535\020\016E\004J\024R \036P+\033!!\022)\022O)\035I!\022E\024O)\025MP@($Q\010T\011$zA,Q\011\025IU\003H\024\022%\025q,t#\036R9\002B%$)\021O(\025NHPI-\n$Sj\0053Z\024\022*2I\024zA,vI\025q!\022)/\010gTN V^\024\022%\025q,zAlHg%q!\022)/\ngTN PI\024WE3j\0072($TE\023j\027$($Qi\002Iu\002YZ\n\011\024b\020R= V&Tf\020@($QibIu\022H#sE\004J\035\034)\020\017(\025IS\034($QibJxzA,M\031bB%\016N\024I'T\ndiN\024\022(5\022<R= V&DZI\037H\024\022*\025*\024R=$V&LY!\022)\036R9\005n(@(%\n$\003j)\nYZ\n\011\"Iw\024]eH\005\004Y$@=%Q+\033!\000PK\024SWRB,R=eW9B\001!\030)\020\017(TAS\030(&\023e\024\031\014zL'uiBB0S=\021NKbB0R%\036U9BB1\nA\"\n'Tb%3D\020\n\011D\nU\016H\024O)D\n\024iF\024\023\005\023n1;M\020\n\011RI\000zE$\r\031R\001!\032R\027\n$\003j5\022H\032\024jD.H@(&TebIu\032I$\r;\"\001!\032R)KE\022\001u\032I$\r\n4Jc4(&SjbIu\032U+M\032bB5\002C$\022)bIu\032A$\024i\004JdkN&J\011RMtPM\024O9Un8@('\n$\003j\025\0204g\021%\004r\034R+\036SY\"B9\016))\017)eF\034PN#J$3j91G\024\023Hta$J='\026\010u.0PN#J'Tv`PN%J'Trc\026 \024\023Iu9$@='\020*{\"8PN\024o%\004r=\034)\"O)d\n iN\024\023E\023n9;O\020\n\011rI\000zO$\r\032rB=\014)\020\017(\024FX@('R\005\022\001u\036WZJ\011u\022=*G$\n'T*HhOkHg\"B=$)\020\017(]\021\014t('TJ2I\000zE)6E\004zHR= Sz\"\001!\036N\"J'U:\005\021N\021J\011tr\024R \036Uh\024F8PO+J'T~\\@('UHU\021$zO+M*d.I R\024\023e\0251u*WZ\n\011u1$zA$\r\032bB<R^\022O)u=TPO\024WHTqu\037W\024\023e\025r$F='UvRB=\030)\"\017)u9S\030('U(tBPR= Sf]!!\036U#R\005\023j\005\0205c\010\005\004zTR= ui\002B=*))HgT\n^h('U*2Iu\002XiJ\011u*HR='R\032\"B=*L\"\n'U* kD\024\023jRJy\030= R\026RB=*P\024O*U9W ('U%\023j\007.('V%\023j?2('R)d9$zO+M\011\024B;0('R%\023j=35\024\023iu\021$zO$\r:\"B=\036K\024O*TAW\026F\024\023it!$zU+M8Da!\036O\"\n'T\n kD&J\011tz\020R=*Uf\\!!\036O\"\n'U* kD#\n\011tzPR=*R\006]!!\036O\024O*U=TPO\023J'T~ PO\024Q'T~\\PO\024H\007T~\\PO J'Tz^h \024\023idbdR='UfDr1\023Y\020\n\011tr\r\n)\036Uh\024AQ\035S\024\023ib:PR='UfDvQ\006('J)cj\007\002('J)d9u\003O\020\016KbB<RN\036P9\004I!\036N\024O*\\q\014t('SE\023jW\034#/\n\011tq$zUg\n\011rJM(='ue\004z\030R^\036P)s&\030PO*\022\010U\021$zA$\r(DB\027$R\024\023e\024\021u$A`WJ\"B<R:\021O)u=TPO)Te\022\001u\002O\032td3RxPO&J'T\n#\032('J'T\016\005;P\020\n\n\002I\000zP$V6BBA\020)\036qE\005\002\025\036P&\n'U\002%25(\0259BBA\036W\024O*\004\n^h((\025*BI\000zP*R\032BB@RP^J\n\002JNz((\n)ki! R'QEbIu R'R\010d* hS\"tE\005\001${P.t$\002BDR \036Rk\025*^h((U(\025\021$zK+Si\003.HPQ*J'T^\\PQ\024O95nH@()\n$\003j\005\0025i\010\005\005\022\024R^\021O*$NdPR\024TWRBHR=i\027:2\001!&)\020\017(TAS&()R\005\023jO\020#\024\024i\024z8R=-\022\n\\q!&O&Q%\023jM\002HfHe\005\032U$)\021O+$B\027$()U*\"I\014zS$\021:\"\031!&U\024HgUR!+W\021J\n5\032TR#\036Ti\005.\\F()Q(BIu5D\021J\n2I\014{Z\024\024h\024J\020R=)Q)\014\"xPS$SibIu&H*sE\005\031%'=\027\n\n2I\000{Z\021NEd)!&)\020\017;\"\031i<#\024\024e\022\001w&U\024\024e\022\001w& \035\010e\005\031$@=m\010d2BLR \036vD\002BM\006H\024O*<Y!&)!JwR\031!&M\024O+%.4F()SE\0229u4UfJ\n5\"1\n)\036Tj\\a!&)\036tk]!\000PT\024H\007U\"%34\020\n\nDB\024R \021O(DB'2 \024\025\011\004)$@=\"\022\010\035A!(O\024H\007U\"W0 \024\025\011\004\nPR=\"\022\010\024.P@(*\022\011\025\031$@=\"\022\011\024FL@(*\022\010UI$zD$\021;\022\001!(H\"THRIu\010H\"R\032\"BQ\020E)\n'T\"!\013R\024\025\011\004*%$)\036Q\011\004*#$ \024\025\011\004\n8R \036Q\011\004\n\027\034 \024\025\011\004*4R \036Q\011\004\n\027\034(*\022\010U\032\024R \036Q\011\004Jg4 \024\025\011\004*8R=\"\022\010TF8PT$\024Iu*\035\020)\036U\011\005\022U/4\024\025\011\004zM\n)\036Q\011\004z#4(*\022\011u*\035\020)\020\017(DB?.(*\023hD\ndR=*\025+\004\"\0272(*\023iTy%$R'UgU\"U\032A m%\005\"<RT S\007U\"=/5\020\n\nDBU&)\036Q\011\004\n iS\024\025\011\002Iu)H\021NE\005\"\025\010)\036U\011\025F\021&(*\022%\022\0328zCd\n\nDI%\036=)r\005\005\"$RA\036Ty\002BQ\022E'\n'U\032!+N\024\025\nU\021$F=!R\010]\021!(U\024P'T\032!+W\020\n\nE:<R=*\025:r1!()\"SD\013i!()\036u\013])\000PU\024H\007UJU/4\020\n\nTq%\022=,U*|q\000PU'\n'T\n#\034 \024\025*\004z8R= V\n\004\n?\034@\024\025*\"I\014zU$\r\032\"BU$)\021O+\025* iR\024\025*\"Iu\013R\024\025%\025q\000zAd\n\nRJy<= R\026RBU2)\036P+\033)\001\016(*J$;j\034PU\024I7T9!*)\021O:r\0328PU\024O+\025.]\000(*J'U.\\PU\024O+\025.];V\020\n\nbI\000zV$V6BBY\022E+J'U2e*WZJ\nbIw,]kH\005\0059$@=\"\020)\003\"\011*L,U:r\001!.E)\021%\023j]\013R\024\025h\022JM\020=+P8\022B]\002))U\007U:\0272(+P%\025\031u.Ad\n\nt\011%(=+P8\022B]\020E)\021%\023j]\020E$4E\005:!\002T\024O*tB\005\021T\024\025i\004z0R=\027R\011u>0PW$\023e\023i=\020UkJ\ntA$zWd\n\nt\nHR#\036UhTFHPW TE\023j]\002Oi\n\ntzHR^\036Uh]\021!.R\024O:\"B]\036M\024P'U:U\021M\024\025iti%\n=+R)\014i!.E J*#j]\013H\024\025h\024rPR=+P(\023*;(A'\024e\005:\025$)\036Q:\"B\\R=kW;\002\001!0)\020\017(TAQ\027R\020\n\013\002Iw4(,\n'T^M;Y\020\n\013\022I\000zW V6BBe\036U'\021e\023je\002H'6\004\002Be\036U)\n'UJ=\021R\020\n\013\024zTR=,U:r\001!2E)J'UJ\025\021S\020\n\013\022Iw2F\024\026%\023j\0072P)J\013\024\032 R= V92\031i<(,J'TNdF:/\n\013\022J$zIlH\007\"BdR \036P;\022\001hPY\024HgT\016d@:\024\026%\025q,t#\036R9\002\001hPY\024WD3j\0072(,J'TN!;Z\020\n\013\"I\000zZ$V6BBhR=m:@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000@ \020\010\005\002\000\000\000 \020\010\004\002\001\000`0\030\014\006\003\001@`0\030\010\004\002\001\000@ \026\002Q0V0\024\013E\003\001<P+\025\nf\002A V-\024L\005\"Q0`/\000\000\000\000\004\000\020\010\0232\006\002r fhiHT9 a9\034lW\021H\000%2\016D\002+\014Jc\005\000\000\000\002I*L\"ND\006K9fe9\035\004\005:`@f7[\rF{]Rn3H\014FKAPt7[Lr\0029\036T\020\031-f#%\\g\020\032-b\002%2 9[nVs\020\000\000\000\024JTb\024t 4[N6+Ih ,V\004\0063=Xl7]m\026s\034@d4\\\r\007#=\\g\020\031-f#%\\g\020\032-b\002%2 9[nVs\020\000\000\000\024JTb\024t *S\004\002ix@A,\010\011@\000\000\000\000)\025)D)h@U&H\005Sq\001\002X\020\023 \000\000\000\000R*S\010SQ\001*N\020\013'b\002\0050 '\000\000\000\000\001$U&\021'\"\002%\\s2\\NB\003\035Xo:\035\014\026a\001ft7\\\004\006\023\025hw2Y-b\003Qno\020\034nG\023\025fs2Y\004\0073=ne6\034d\007;%hh\020\034n\006\013\rJ 1\031.G;\025Jn\020\035\r\006+4\000\000\000\024JTb\024t *\010\n\"\0014| !R\004\005\020\000\000\000)\025)D)h@D\020\024D\002ix@J\020\024@\000\000\000\000R*S\010SQ\001$ \026OD\005\022`\000\000\000\024JTb\024t \036\025Iu:\025\030>\020\023\004\002ix@<+\023jt*0| &\026\000\000\000\001$U&\021'\"\002\034@S\020\013'b\002\034@Z\000\000\000\000\002I*L\"ND\004Y\000xV'UhTa\001\036R\020\021\011\025\002!(O'\021d\004r=( \"SHDJ9\016 +R*DA\001\022Y\037\010\005Sq\001\026X\020\017\ndz]\nL\020\023j\"\002\021\022P$\025\011tr\034@N'U\004\004*9\010I'\021d\005:%(H\020\022+\023p\001$U&\021'\"\002\034@<+\023jt*0@O)\010\010DJA\020T'SHr\0029\036T\020\021)d\"%\034G\020\025i\025\" @I,OD\002ix@G,\010\007E2=.E&\010\011u\021\001\010I(\022\nDz9\016 '\023jB\002\025\034D$SHr\002]\022T$\010\011\025Ix\000R*S\010SQ\001&*\020\011,2+\014@-\037\010\n2Q\000Jc\022Xa \000\000\000R*S\010SQ\000xA&\025HTz1\002R\037\010\nU9\000Z>\020\017\010\024bY\nO&\020*#q\001*X\000\000\000\000\002\r\020 \026OD\004\032 @C$\nf\020\000\000\000J\020\013'b\002(@J\025L \000\002I*L\"ND\005\033=Lt2[D\005!\001^r\020\021\004\0063=Xl7]m\026s\034@v7]lVa\001^r\020\021*\"\003\005\\d\020\034\016&+\rJd4[Lr\003\004@p0].6)\000Z>\020\021\013\000\000\000\000R*S\010SQ\001\030e7\031nFC\025\\ \036\021J$J\r\002T$UHSq\001^r\020\017\ndz%\006E\"\017D\006\023\025hw2Y-b\001q,O+Q)Cq\001Bn2\010\007E\002U\034C*\025(\025\"%\036N\037\010\014'I\000b.\032@\n\005\022\024\000p4\033mf+5J \022Y\004\002A\025F%1J$\006c\025\\g:\032\004\002+\020\024\000\000\000\000\005\002=&T\000\000\000\000\002I*L\"ND\003bY\036W\"S\007b\001q$X\020\037\004\004b`| \036\020itrM\036N SJCq\000Z 2\031,7\023\025Bs2H\rF+9Nt4\010\014'I\000b\000\000\024JTb\024t \036\025Iu:\025\030>\020\017\nTrY\036I!Q(B\002A\030O)R*d)x@-\020\031\014V\033IJa9Y$\0073=ne6\010\014'I\000b/\034\035\r\000\000\001$U&\021'\"\001q,O+Q)Cq\000xV'R(4*\020@C'SJ4z9\002N*\017D\002i\001Rn1\\LV\013MJ ;\033nv+0@b<H\006\022yH@+\020\014 \000\000\000\000R*S\010SQ\000xN Th\024ax@<)U\011u\001\001\006O'\024itr\005\034T\037\010\005R\003MJt\020\033L\027\033\005X \036H\006Ra\001Fo7\034mvs\005\\t\020\017$\0030\000\000\000)\025)D)h@<*SJdz%\006E\"\010\n5\"=  !Sie\032=\034A'\025\007b\003m^p:\032-vs\005X 9Z-F+9Fe>H\007E\032Q\036P\020\020itrM\036N SJCq\000Z 9Z\rw\023QJn\020\030Mw# @t7H\006\022yH@+\020\014 \000\000\001$U&\021'\"\001q\030I(U)\024!\001\006O'\024itr\005\034T\037\010\007D\"% H*\023id9x@-\020\031\014V\033IJa9Y$\006\023d@2\000\000\002!\020H\020\010\004\002\001\000X\030\030\n\002A!0P(\024\011\004\001a\0208\030\020\006\003A`p\020\024\004\002\001\000@ \020\030\014\007\003\001@ @\014\002\036\006C\001@`8\022\006\000@@P\010\004\014\001\001\001@\020\020 \004\002\002\000@ 0\004\010\006\000A\030\177x\000$\022\011\002\0010H,\034\017\005D\001@0\030\034\014\007\003\0010@ \026\n\004B\001\000@ \020\003\002@@ \020\010\004\002\003\001A\0000\030\004\011\002\000@\020p<\036\017\007\003A\000\020\010\016\002\000A` \020\034\004\002\004\000@ 0\010\004\007\001\001\000p\010\020\n\005@08\034\016\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\001\000@ \010\006\002\000D\001\020@ \022\000\000\002!\000@$\020\010\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000@ \000\000\000\000\000\000\000\000\000\000\004\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000)\024J%\022I$B!\024J$\022\011\004B!\020H\"\021\010D\"\021\011Db1\020L \020\010\004\002\001\000D\"\021\010DB\001\030D\000\000\026K%R)\024J\023Idr9\034N'\023Idr9\034K%Ri4Z-\026K%Ri4\\\003\003A\000\000\000\002Q(T*\025\026)\004B\025\002H'R\013\005BI0H,\026\013\005B T*\025\nE\"Ra0*\025\022\005$B!0*$\nI\004A(T*\025\nK\025Je.W+JE\"Q(T*\025\nE%A(T*\025\nE\"Q(T*\025\026\005\"R1\032N\000\000\000\002\0018~,\026R)\024*\005\002A U(\024J\025*O)\023\nuJ]$L+V)Tr9\010Q)The!<^Z-\025HD\031)\024*\025\nHT\n=\002O*PE\"R\020T*#JE$9(TP\025\nJBQ)\026*\025\022e\"RU*U\000\000\000\004+Ido9\010\016&+\005Hi7\031d\007#<@t0XMF+L\000E9\034Mw\021\001nr4]\r\026s\034@t7H\016F\013\011Xe9@\000\000\013BH\000\000\\\016\000\000\005`<\000\000,r@\000\002q\006\000\000\027\006`\000\0017Z\000\000\013= \000\000[g\000\000\005^$\000\000-\010@\000\002gz\000\000\026{p\000\0018\006\000\000\013@\000\000\000[}\000\000\005_T\000\000-| \000\002oF\000\000\027\0010\000\00196\000\000\013Qp\000\000]\014@\000\005hP\000\000.D \000\002t\030\000\000\027$0\000\000\000\000\000\000P8&\030\rEbQ\000P\034\022\007\004B!\0004\036\013\011\003A0H\030\014\006\000\000\037\177\177\177\177\177*\022(3y X\037\022K)\023\011\020<3\022G(QAH<\030)KFe0\000\0008B\032c\0343\0141\0069f\030k\010s\0241F1f\030F\010a\030#\014#\0141T\031J\030C\030b\010@Hi\0110F\021&\021b\010%\010I\032[*Q,$T&-*J\021\0236%\004!*S$%K5\n\n*\030B\010BZc\014#\014!N5F\021G\010f\030c\032C\030c\034g\030lZST)J\030B(A%%n\031B9E\030'\024+\014qN1D\031K\022bL1\0043T\031.\030*Y+\030+\014#\0041F\020J\030V\030d\010Q\026\031f\032k*1D)RRVYf\030b\024k\016\023D]R\014e\014+Lqe\031F\031K\010c\030 L\021&)+\031\"\024%]+\014c\014#&\021D\031C\030c\014!\r1VQT\010%\"*ZJ\022D-6$%\024c\034bD3\011+U\"TQ\030Q\0265\0044F\030C\010c\014\"H3\0143T!L:F\030g\030k\0103\0322D1\0161D\031f\010k\030k\000<\007Ap\036\001py\001qx\017cp\030\017\003p<\007@ \000\001caaqcGx\000gx8\037\017CA'V\001crAc`0x<\030\000<~\014\036\002\014\037\003sF\037\034\010O5i1cax\034\016\017C\017O\016\017\007\007CcCn\016\020q\003G\r$\036\003I\034\034aa`p<GA\006\007\003aa`cO\027\007\007\003CCAcChqN\030\006c\026\014<<ycaccCGGGCapqqqpqa`o\007\014\017ALaaqCa`p~<b\013\0142\0301>\034\034\0301qHlX8<0y\016\036\017\017\017G\003aaw\017\003CGO \\<<<<Sg\022'F%\033\016\013\003O\013<<<\036\034\034;\007CaX<\036\014\036\034\0348`<\031g\033L04X88xppyx\034<\034\034\014.\r\017\016\036\016\017\003bY1GN&\035YaCC\007\003G\007CL.\036\034GG\006'\007cA'\003h\n\020\013\013\017@h?A\020!I`\036\010\\\004(\036\034\014\031$\036\001y\001\023`|\003\014\017\000\\4AU)\032\010hJ\004\036\017\000\177\003p\014\030s@\034\010B0\014Ia\037\001\011` s\002\011f'R\002\010\036 C20\001|4B9A-@|!l\007@^\016@pKA0\037\000X`|\003\002\004<CD`j\017a\020\\\023A|/Da3\022\rAl\026X\027\023P\006N\001t\011Ht\016>A#n\003\003Q\001J\0109\035\000|H(?\003>\020HB\016\002\n\032\016(\0347\0148G\001l\027\001\030+\004d|\006\037\026\005O\000e\020\030\024hf\016\002 \030\011Caac&\001X\011H\017 /\006B\017a&\"3\001\001Ie@=A\011!\001z\002\r\034\007\0022\030\035\003Z 16 \010#t1S Xh\007`;\001@\\xzxX\030\\,`\007`~\004~\003\016B<*\000qa\016D`6\000>\005\007f\010\np\005\177@\003\177`\000wx\000\003o`\000>|\0007qa\000\034~\000cy`\020\177\020\003gq\000\016?\000\007sp\000\037~\000\007\177p\001{`\007~\000\017a\001\177~\000\037N\001g`\006\016\014~1`\003p\020\036>\017Caqx<\005\003Cs`88<\177@\003gL\003~\000\007~\000\017|\007?\007\001~p0|\000\016\177p\003\003@\017g\000\001x8\014?AAs`8|\037\003Cqpx|\000?``}\\\036\006\007cAb\007\017|\000?q\000<\014\016\017B\000?p\000_\001\003qp8?O\007O`\004?\006#`0|\177AAca`<\036\016aapp<>\003G`\000~\034\017@axp\016\016\034\030<8\016\003Acy`\000~\036\016\031\004{xC\037\003\003||\034\036\007Gc`ac@\003\177@\005yxx\036\016\003cs\034\016\020`yp@\036\036\010`aqx\006\037F\000\003~\034\016x\000sw@\003_\016\017\017p!Op\037p\037`\017@\017~\030@'s\011A^!~\000~\001~\005p\011=L\001z\010Gx#@?@\017w@\014~\000y`0/x\003x\003z\017p\037|\000|\007p\007x\007p\017@\037P\007~\020\r|@?p\003@\017@\037\020^0n\021\177\000~\001~\005v\000~\000<\017p\037x\007p\001az\001N#\022\037d\007|\000\177\006\010>\000?p\rx\003x\007x\003|\007|\003`\037\002\003\177D';@\004v\001\177@\017s\034\000|c|1l1o@?B<c\035@\0163|\004n\001\177@\002:$0~!P\007t\007p\017d\007p\017`?P\007~\006p\017`\017p\007p\007p\007x\007x\007p\007p\007h\007p\007`\037p\r`\017p\000\177\000\033d\000&\036\000\037|\024\003~@\177X\000\007|\000\177\0008\007|\003x\007|\003|\001|/`\017x\003p\177@\017|\000t\017p\007p\017`7\000\017`\007~\000l\017x\003|\001x\001p\007r!\020H$\022\011\004B!\020H$\022\011\004B!\020H$\022\011\004B!\020H$\022\011\004B!\020H$\022\011\004B!\020H$\022\011\004B!\020H$\022\011\004B!\020H$\022\011\004B!\020H$\022\011\004B!\020H$\022\011\004B!\020H$\022\011\004B!\020H$\022\011\004B!\020H$\022\011\004B!\020H$\022\011\004B!\020H$\022\011\004B!\020H$\022\011\004B!\020H$\022\011\004B!\020H$\022\011\004B!\0208\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\000\000\030\030\022\014\010\004baHp>\"\022J\0052qDf6\034O\007t\n\021\016I&\023J\025\032U0Z.\027L\006\023\021Lh5\032mV{Abs:\035.gCetz=_\017Wky|~?_ow{}~\177?\037Ogkux{=\036O\027CYjt9\\.\006{5Vj4\031LF\023\001<\\-\026\nU\032E\034L$QhD\011|x9\033\014f\022q,P%\021\007cAHX&\020\006\002 `\030\003{z{}\036\016o+Odpw[=FW%OfrX|&\006\177<\\mvK\025>[+T)TJ\025\002=\034M&\022i,N#\020Gc1H\\*\021\007C!PX$\016\007\002A P\030\014\006\003\001@`0(\024\n\007\003B!0h4\036\021\nEc\021X|B#\023JeS\011Tr= Q)\024jE.[/Y-\026{Mr\177Ab1y,n?%Ul6{n\017\023Ojv|\036O?kz\000\000\000\000\000\000 \016\010\004\000 \020\000\004\000\007\002@ \0000\004\000\007\000\001 \020\000 \000\000\001@\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\020p\004\022\001\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000p\000\000\n\000\011D\000\000\000\000\000\000\005\002aPp4\030\014\005B!0X0\030\014\004\002\001@@(\020\010\005\000a\0200\000\000\000\000\000\000\000\000\000\006\005\001A\000\000\000\000\n\n\001\003AP`4\030\010\000\000 \000\000\004\000\000\000@\000\000\010\000\000\000\000\000\000\000\000\000\024\000\000\002@\000\000\000\000\000\000\000\000\000h4\034\017\007Capx0\032\014\007CaPh4\034\r\006\003!Ph0\022\011\000\000\000\000\000\000\000\000\000\002a0X,\000\000\000B`\000\0208\036\017\007CaP\020\020\000\002\002\000\000\020 \000\002\004\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\017\007@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003cbinoI(\004\004\003\001@\016 \000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0006\000\000\006 \000\000\000\000\000\000\000\000\000\000\000\004\002\001\000@@ \020\010\004\002\001\000@ \020\010\004\002\000`0 \020\006\003\001@`0\010\010\006\002\000@`0\030\014\002\001\001@`0\020\010\006\002\001@\000\000(\024\n\005\002\001\000 \000\010\004\000\001@@\000 \010\000\003\001\000\000 \020\000\004\003\000\000`0\000\016a \000\000@ \020\010\010\004\002\001\000@ \020\010\004\002\001\000@ \014\004\004\002\000@ \020\010\004\001\000@ \020\010\004\002\001\000@ \020\020\010\004\001\000\000 \000\010\000\n\005\002A P \020\004\000\000@@\000\010\010\000\001\001\000\000\020\020\000\004\002\000\000 0\000\010\006\000\001(\024\000\000|>\037\017@@ \020\010\004\002\001\000@ (\024\004\n\001\002\000P(,\024\011\004\002\024\000@ .\037\011\004B!\020x<\024\n\005\002A8\\4\032\016G  \020\010\004\002\001\006CQXh:\033\r\007#1Pt6\027\016Ebqh\\.\035\013EcQ8\\.\000\000@@ \020\014\006\004\002\001 `@$\026\r\007@\000\000\000\000\000\000p9]O\037d\000\006\006\001@\005\022%\014F\000\000\000\000\002]\002V\"@\000\000\000\001Lm:\010\000\000\000\000\000d0]\014\020\000\000\000\000;X.`\003Mhd7].@\000\001fi7\031`\000\000\000\000p4\033mf+QRc\000\000\000\000\003\021Jb:Y`\000\000\001`i:\030m\000\000\000\000s8\031,V \000\000\0006[nW# \000\000\000\035\r\007\023=Bt\000\000\016\006C=\\e:\032,2\003%\\p:]\007\"\001\025f\n\000\035\014WCP@i7\034\016W!h@%9B@\007;\010\000\000\036O'Sitz=\036O'Sitz=\036O'Sitz=\036O'Sitz=\036O'Sitz=\036O'Sitz=\036@\011\026sQJr7\030-B\002APo7\031-V)\001`r2\\lVsQBt4[mcP(\000 4Y\017\002\001\000@ 8\032\rvs\025Ze\020\010\rF+9Nt4\010\004\007\033Qde9\\`\002i4Z-\026K%Ri4Z-\026K%Ri4Z-\026K%Ri4Z-\026K%Ri4\000\000\020\011&6I\000@ \020\010\004\002+\014Jc\020\010\004\002\001\000@%\031Z$\002\001\000@ \020\010\004VH(\000\000\000\010\004S\033$@ \020\010\004\002\001|~ \020\010\004\002\001\000J34H\004\002\001\000@ \020\011-\020P\001\014i7\030-B\003\021Bt0H\014f{H@s8\031,V\033 @o:]\016\007+Pt\n\000\000\004\00631Bg9H\014\026kAX1\020\031N&+Db 0[.\006aH@f9\031.\023\021\001Bm8\033\0062\003\031de8Ld\007\003%hc4\000\000\000\000\000Z-\026K%Ri4Z-\026K%Ri4Z-\026K%Ri4Z-\026K%Ri4Z-\026K%Ri4Z-\026K%Ri4Z-\026K%Rh\000\000\000\000\011&VI\000J54H\004S+$@%\032Z$\002)UR \022M-\022\001\024ji\020\011&VH(\000\000\000\000\010\027\003AXy4[Lr\003Ijlnd0\001Rn3\000\011d\n8\000n0[@\003\001Dd3\032\r&c9`rA!\020hD*\030\000\000\000\000\006\003\011Hf4\032MFsAeBb1Y\014V0\000\000\000\000\n\rg+1X)\000\000\006\000\000\000\000\000\001\001\026\000\000\010\024\020\000\000A!\000\000\004\004d\000\000 P@\000\002\005\004\000\000\020( \000\001\002B\000\000\010\024\020\000\000A!\000\000\003~\024\000\000 \000\000\000\002\005\004\000\000\017y\020\000\001\001\033\000\000\010\024\020\000\000@j \000\004\006\014\000\000 0`\000\002\003\006\000\000\020\0300\000\001\001C\000\000\010\014\030\000\000@a@\000\004\006\014\000\000 0`\000\002\005\004\000\000\020( \000\001\002B\000\000\010\024\020\000\000A!\000\000\004\n\010\000\000 P@\000\002\005\004\000\000\020( \000\001\002B\000\000\010\021 \000\000@p@\000\004\n\010\000\000 8 \000\002\005\004\000\000\020( \000\001\002B\000\000\010\024\020\000\000@}@\000\004\n\010\000\000 P@\000\002\002N\000\000\020( \000\001\002B\000\000\010\024\020\000\000A!\000\000\004\n\010\000\000 .p\000\002\005\004\000\000\020( \000\001\001}\000\000\010\024\020\000\000A!\000\000\004\n\010\000\000 P@\000\002\005\004\000\000\020( \000\001\002B\000\000\010\024\020\000\000A!\000\000\004\n\010\000\000 B`\000\002\003\024\000\000\020\034\020\000\001\001a\000\000\010\016\010\000\000@i \000\004\006(\000\000 P@\000\002\005\004\000\000\017x0\000\001\002B\000\000\010\022(\000\000A\027@\000\004\006Z\000\000\037p`\000\002\005\004\000\000\020\000 \000\001\002B\000\000\010\023<\000\000A!\000\000\004\n\010\000\000 G\000`0\030\014\006\003\001@`0\030\014\006\003\001@`0\020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\011\026s\031Rn4]\017\020\000\000\000\000'\030)`\002A\036S$V\000\000\000\000\\\000\000\000\000\000\000\000\n\000\000\000\003\020\000\000\000}!P87I_A\000\000\021R;EVj\0057\005iSB<\007i\037~>UT\011nH|L\003S\023T*On_n;yp\177p\000\000\000\000\000\000\000@\022\000\000\000\000\000\000\000 \026 \000\000\000\000\000\000\020\021t\000\000\000\000\000\000\010\014\034 \000\000\000\000\000\004\007aT\000\000\000\000\000\002\004]\004@\000\000\000\000\001\002c\0114\000\000\000\000\000AKup@\000\000\000\000 s9V(\000\000\000\000\020@*\002|@\000\000\000\010#:!mh\000\000\000\004\02345\024Q\000\000\000\002\nD0N9(\000\000\001\005V^1\003i\000\000\000C\006\032~R1P\000\000!P87I_A\000\000\020nc\"^\013XP\000\010:^\005Zg'2\000\004\037\0051d0$'P\002\020+/\016^\026Xb\001\010K\r9\032n\027= D@<\031p27+\022\"-%P\026\037BJ{\021\035'B\rsYNm\000\000\000\000\000\000\000\000\000\000\010\004\002\001",0xa78);
    private static final int[] _data4 = decodeData("\000\000\000\n\020\000\000\000S@\000\000\005\034\000\000\000\037`\000\000\002\000\000\000\000\034 \000\000\000<\000\000\000\003`\000\000\000\000\000\000\000\000\000\000\000\0008 \000\000\000x\000\000\000\0070\000\000\000\000\000\000\000\000\000\000\000\000d\000\000\000\000\000\000\000\000\000\000\000\000\000l\000\000\000\006p\000\000\001G\000\000\000\000\000\000\000\000\000\000\000\000\001X\000\000\000\r@\005Zm6[7\027+5Be.X)\026+SrI0>7\024\013UQq\\Z7\024/\026+e6c5\024/\025jI:g&\027,V+eJy\000\026K\005Ba0R(T*\027Kerp7\033Kery\"Q(^/\027K\025Jp/\027K`@\004\000C!Ph5\"!\004>\024\013\003b!1\0200\022\007F\" q\010\030\031\007C\005\0218lV\033\020i\024xi\004I\022Lh\"A=\036O!\023m`\002 L\036\025\007D!Ph4B!\020Mfs9(T*\006C!R\011\004B6UMU\"Q(\177?@\0021\030L&\n\007\004C\001PX(\020\n\003B pH$\020\006\003A!\0208\024\010\003\001@`0D\014\006\003\001Aa\000$\024\010\005\001@`0\024\014\000\011\006BAPH\030\006\003\001@`0\030\014\006\003\001@`0\030\014\006\003\001@`0(\024\006\003\001EA\030\000\000\000\000\000\000\000\000\000\000\002g\011\000\000\026:\030\000\0013^@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005Fzu/\032\022\0329M]w0\000\005\000\002`l\000\000\013\036h\000\000Yv@\000\005O8\000\000,{@\000\002g^\000\000\026=p\000\0013p\000\000\013\037\000\000\000Yx@\000\005OD\000\000,|@\000\002gd\000\000\026>0\000\0013s\000\000\013\037 \000\000Yz\000\000\005OT\000\000,} \000\002gl\000\000\026>`\000\0013w\000\000\013\0378\000\000Y|\000\000\005O`\000\000,~ \000\002gr\000\000\026? \000\0013z\000\000\013\037X\000\000Y}@\000\005Op\000\000,\177\000\000\002gz\000\000\026?P\000\0013~\000\000\013\037p\000\000Y\177@\000\005O|\000\000-\000\000\000\002h\000\000\000\026@\020\000\0014\001\000\000\013 \020\000\000Z\001\000\000\005P\014\000\000-\000`\000\002h\010\000\000\026@@\000\0014\005\000\000\013 (\000\000Z\003\000\000\005P\030\000\000-\001`\000\002h\016\000\000\026A\000\000\0014\010\000\000\013 H\000\000Z\004@\000\005P(\000\000-\002@\000\002h\026\000\000\026A0\000\0014\014\000\000\013 `\000\000Z\006@\000\005P4\000\000-\003@\000\002h\034\000\000\026Ap\000\0014\017\000\000\013!\000\000\000Z\010\000\000\005PD\000\000-\004 \000\002h$\000\000\026B \000\0014\023\000\000\013!\030\000\000Z\n\000\000\005PP\000\000-\005 \000\002h*\000\000\026B`\000\0014\026\000\000\013!8\000\000Z\013@\000\005P`\000\000-\006\000\000\002h2\000\000\026C\020\000\0014\032\000\000\013!P\000\000Z\r@\000\005Pl\000\000-\007\000\000\002h8\000\000\026CP\000\0014\035\000\000\013!p\000\000Z\017\000\000\005P|\000\000-\007`\000\002h@\000\000\026D\000\000\0014!\000\000\013\"\010\000\000Z\021\000\000\005Q\010\000\000-\010`\000\002hF\000\000\026D@\000\0014$\000\000\013\"(\000\000Z\022@\000\005Q\030\000\000-\011@\000\002hN\000\000\026Dp\000\0014(\000\000\013\"@\000\000Z\024@\000\005Q$\000\000-\n@\000\002hT\000\000\026E0\000\0014+\000\000\013\"`\000\000Z\026\000\000\005Q4\000\000-\013 \000\002h\\\000\000\026E`\000\0014/\000\000\013\"x\000\000Z\030\000\000\005Q@\000\000-\014 \000\002hb\000\000\026F \000\00142\000\000\013#\030\000\000Z\031@\000\005QP\000\000-\r\000\000\002hj\000\000\026FP\000\00146\000\000\013#0\000\000Z\033@\000\005Q\\\000\000-\016\000\000\002hp\000\000\026G\020\000\00149\000\000\013#P\000\000Z\035\000\000\005Ql\000\000-\016`\000\002hx\000\000\026G@\000\0014=\000\000\013#h\000\000Z\037\000\000\005Qx\000\000-\017`\000\002h~\000\000\026H\000\000\0014@\000\000\013$\010\000\000Z @\000\005R\010\000\000-\020@\000\002i\006\000\000\026H0\000\0014D\000\000\013$ \000\000Z\"@\000\005R\024\000\000-\021@\000\002i\014\000\000\026Hp\000\0014G\000\000\013$@\000\000Z$\000\000\005R$\000\000-\022 \000\002i\024\000\000\026I \000\0014K\000\000\013$X\000\000Z&\000\000\005R0\000\000-\023 \000\002i\032\000\000\026I`\000\0014N\000\000\013$x\000\000Z'@\000\005R@\000\000-\024\000\000\002i\"\000\000\026J\020\000\0014R\000\000\013%\020\000\000Z)@\000\005RL\000\000-\025\000\000\002i(\000\000\026JP\000\0014U\000\000\013%0\000\000Z+\000\000\005R\\\000\000-\025`\000\002i0\000\000\026K\000\000\0014Y\000\000\013%H\000\000Z-\000\000\005Rh\000\000-\026`\000\002i6\000\000\026K@\000\0014\\\000\000\013%h\000\000Z.@\000\005Rx\000\000-\027@\000\002i>\000\000\026Kp\000\0014`\000\000\013&\000\000\000Z0@\000\005S\004\000\000-\030@\000\002iD\000\000\026L0\000\0014c\000\000\013& \000\000Z2\000\000\005S\024\000\000-\031 \000\002iL\000\000\026L`\000\0014g\000\000\013&8\000\000Z4\000\000\005S \000\000-\032 \000\002iR\000\000\026M \000\0014j\000\000\013&X\000\000Z5B\005&C$R \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000,F`\000\002Zh\000\000\025V@\000\001-4\000\000\nk \000\000VZ\000\000\0055P\000\000+-\000\000\002Zh\000\000\025V@\177?_ow{}~\177?_ow{}~\000\000\000 \020\010\004\002\001",0x278);
    private static final int[] _data5 = decodeData("@\000\000\000\004\000\000\000\000\020\000\000\000\001\020\000\000\000\0021XT6\022\006@\000\004A\034>+\017\010@\000\000`4\027\013E`\000\000\000\000\002b|`\000\026Q`\000\0012g\000\000\013\0268\177\177\177\177x\000\004\000\000\020>\000\000\000\000\000\000\000\007\177@\000\000\000\000\000\000\003~J\017'1[h6\011\177\r\n\024\"l\014EL\177S\"\004j\011{gv?x\000\000\000\000\000\000\000 \011\000\000\000\000\000\000\000\020\003@\000\000\000\000\000\000\010\001 \000\000\000\000\000\000\003\177\000\000\000\000\000\000\000\000\000\000\000\000@\000)@\000\002\001",0x26);


    private final void trampoline() throws ExecutionException {
        while(state == RUNNING) {
            switch(pc>>>9) {
                case 0x80: run_10000(); break; 
                case 0x81: run_10200(); break; 
                case 0x82: run_10400(); break; 
                case 0x83: run_10600(); break; 
                case 0x84: run_10800(); break; 
                case 0x85: run_10a00(); break; 
                case 0x86: run_10c00(); break; 
                case 0x87: run_10e00(); break; 
                case 0x88: run_11000(); break; 
                case 0x89: run_11200(); break; 
                case 0x8a: run_11400(); break; 
                case 0x8b: run_11600(); break; 
                case 0x8c: run_11800(); break; 
                case 0x8d: run_11a00(); break; 
                case 0x8e: run_11c00(); break; 
                case 0x8f: run_11e00(); break; 
                case 0x90: run_12000(); break; 
                case 0x91: run_12200(); break; 
                case 0x92: run_12400(); break; 
                case 0x93: run_12600(); break; 
                case 0x94: run_12800(); break; 
                case 0x95: run_12a00(); break; 
                case 0x96: run_12c00(); break; 
                case 0x97: run_12e00(); break; 
                case 0x98: run_13000(); break; 
                case 0x99: run_13200(); break; 
                case 0x9a: run_13400(); break; 
                case 0x9b: run_13600(); break; 
                case 0x9c: run_13800(); break; 
                case 0x9d: run_13a00(); break; 
                case 0x9e: run_13c00(); break; 
                case 0x9f: run_13e00(); break; 
                case 0xa0: run_14000(); break; 
                case 0xa1: run_14200(); break; 
                case 0xa2: run_14400(); break; 
                case 0xa3: run_14600(); break; 
                case 0xa4: run_14800(); break; 
                case 0xa5: run_14a00(); break; 
                case 0xa6: run_14c00(); break; 
                case 0xa7: run_14e00(); break; 
                case 0xa8: run_15000(); break; 
                case 0xa9: run_15200(); break; 
                case 0xaa: run_15400(); break; 
                case 0xab: run_15600(); break; 
                case 0xac: run_15800(); break; 
                case 0xad: run_15a00(); break; 
                case 0xae: run_15c00(); break; 
                case 0xaf: run_15e00(); break; 
                case 0xb0: run_16000(); break; 
                case 0xb1: run_16200(); break; 
                case 0xb2: run_16400(); break; 
                case 0xb3: run_16600(); break; 
                case 0xb4: run_16800(); break; 
                case 0xb5: run_16a00(); break; 
                case 0xb6: run_16c00(); break; 
                case 0xb7: run_16e00(); break; 
                case 0xb8: run_17000(); break; 
                case 0xb9: run_17200(); break; 
                case 0xba: run_17400(); break; 
                case 0xbb: run_17600(); break; 
                case 0xbc: run_17800(); break; 
                case 0xbd: run_17a00(); break; 
                case 0xbe: run_17c00(); break; 
                case 0xbf: run_17e00(); break; 
                case 0xc0: run_18000(); break; 
                case 0xc1: run_18200(); break; 
                case 0xc2: run_18400(); break; 
                case 0xc3: run_18600(); break; 
                case 0xc4: run_18800(); break; 
                case 0xc5: run_18a00(); break; 
                case 0xc6: run_18c00(); break; 
                case 0xc7: run_18e00(); break; 
                case 0xc8: run_19000(); break; 
                case 0xc9: run_19200(); break; 
                case 0xca: run_19400(); break; 
                case 0xcb: run_19600(); break; 
                case 0xcc: run_19800(); break; 
                case 0xcd: run_19a00(); break; 
                case 0xce: run_19c00(); break; 
                case 0xcf: run_19e00(); break; 
                case 0xd0: run_1a000(); break; 
                case 0xd1: run_1a200(); break; 
                case 0xd2: run_1a400(); break; 
                case 0xd3: run_1a600(); break; 
                case 0xd4: run_1a800(); break; 
                case 0xd5: run_1aa00(); break; 
                case 0xd6: run_1ac00(); break; 
                case 0xd7: run_1ae00(); break; 
                case 0xd8: run_1b000(); break; 
                case 0xd9: run_1b200(); break; 
                case 0xda: run_1b400(); break; 
                case 0xdb: run_1b600(); break; 
                case 0xdc: run_1b800(); break; 
                case 0xdd: run_1ba00(); break; 
                case 0xde: run_1bc00(); break; 
                case 0xdf: run_1be00(); break; 
                case 0xe0: run_1c000(); break; 
                case 0xe1: run_1c200(); break; 
                case 0xe2: run_1c400(); break; 
                case 0xe3: run_1c600(); break; 
                case 0xe4: run_1c800(); break; 
                case 0xe5: run_1ca00(); break; 
                case 0xe6: run_1cc00(); break; 
                case 0xe7: run_1ce00(); break; 
                case 0xe8: run_1d000(); break; 
                case 0xe9: run_1d200(); break; 
                case 0xea: run_1d400(); break; 
                case 0xeb: run_1d600(); break; 
                case 0xec: run_1d800(); break; 
                case 0xed: run_1da00(); break; 
                case 0xee: run_1dc00(); break; 
                case 0xef: run_1de00(); break; 
                case 0xf0: run_1e000(); break; 
                case 0xf1: run_1e200(); break; 
                case 0xf2: run_1e400(); break; 
                case 0xf3: run_1e600(); break; 
                case 0xf4: run_1e800(); break; 
                case 0xf5: run_1ea00(); break; 
                case 0xf6: run_1ec00(); break; 
                case 0xf7: run_1ee00(); break; 
                case 0xf8: run_1f000(); break; 
                case 0xf9: run_1f200(); break; 
                case 0xfa: run_1f400(); break; 
                case 0xfb: run_1f600(); break; 
                case 0xfc: run_1f800(); break; 
                case 0xfd: run_1fa00(); break; 
                case 0xfe: run_1fc00(); break; 
                case 0xff: run_1fe00(); break; 
                case 0x100: run_20000(); break; 
                case 0x101: run_20200(); break; 
                case 0x102: run_20400(); break; 
                case 0x103: run_20600(); break; 
                case 0x104: run_20800(); break; 
                case 0x105: run_20a00(); break; 
                case 0x106: run_20c00(); break; 
                case 0x107: run_20e00(); break; 
                case 0x108: run_21000(); break; 
                case 0x109: run_21200(); break; 
                case 0x10a: run_21400(); break; 
                case 0x10b: run_21600(); break; 
                case 0x10c: run_21800(); break; 
                case 0x10d: run_21a00(); break; 
                case 0x10e: run_21c00(); break; 
                case 0x10f: run_21e00(); break; 
                case 0x110: run_22000(); break; 
                case 0x111: run_22200(); break; 
                case 0x112: run_22400(); break; 
                case 0x113: run_22600(); break; 
                case 0x114: run_22800(); break; 
                case 0x115: run_22a00(); break; 
                case 0x116: run_22c00(); break; 
                case 0x117: run_22e00(); break; 
                case 0x118: run_23000(); break; 
                case 0x119: run_23200(); break; 
                case 0x11a: run_23400(); break; 
                case 0x11b: run_23600(); break; 
                case 0x11c: run_23800(); break; 
                case 0x11d: run_23a00(); break; 
                case 0x11e: run_23c00(); break; 
                case 0x11f: run_23e00(); break; 
                case 0x120: run_24000(); break; 
                case 0x121: run_24200(); break; 
                case 0x122: run_24400(); break; 
                case 0x123: run_24600(); break; 
                case 0x124: run_24800(); break; 
                case 0x125: run_24a00(); break; 
                case 0x126: run_24c00(); break; 
                case 0x127: run_24e00(); break; 
                case 0x128: run_25000(); break; 
                case 0x129: run_25200(); break; 
                case 0x12a: run_25400(); break; 
                case 0x12b: run_25600(); break; 
                case 0x12c: run_25800(); break; 
                case 0x12d: run_25a00(); break; 
                case 0x12e: run_25c00(); break; 
                case 0x12f: run_25e00(); break; 
                case 0x130: run_26000(); break; 
                case 0x131: run_26200(); break; 
                case 0x132: run_26400(); break; 
                case 0x133: run_26600(); break; 
                case 0x134: run_26800(); break; 
                case 0x135: run_26a00(); break; 
                case 0x136: run_26c00(); break; 
                case 0x137: run_26e00(); break; 
                case 0x138: run_27000(); break; 
                case 0x139: run_27200(); break; 
                case 0x13a: run_27400(); break; 
                case 0x13b: run_27600(); break; 
                case 0x13c: run_27800(); break; 
                case 0x13d: run_27a00(); break; 
                case 0x13e: run_27c00(); break; 
                case 0x13f: run_27e00(); break; 
                case 0x140: run_28000(); break; 
                case 0x141: run_28200(); break; 
                case 0x142: run_28400(); break; 
                case 0x143: run_28600(); break; 
                case 0x144: run_28800(); break; 
                case 0x145: run_28a00(); break; 
                case 0x146: run_28c00(); break; 
                case 0x147: run_28e00(); break; 
                case 0x148: run_29000(); break; 
                case 0x149: run_29200(); break; 
                case 0x14a: run_29400(); break; 
                case 0x14b: run_29600(); break; 
                case 0x14c: run_29800(); break; 
                default: throw new ExecutionException("invalid address 0x" + Long.toString(this.pc&0xffffffffL,16) + ": r2: " + r2);
            }
        }
    }

    public SamClass (PrintStream pw)
    {
        super (pw, 4096,65536);
        initPages(_data1,0x29a00,false);
        initPages(_data2,0x29a08,false);
        initPages(_data3,0x2a000,true);
        initPages(_data4,0x2c9e0,false);
        initPages(_data5,0x2d3c0,false);
        clearPages(0x2d458,0xe);
        clearPages(0x2d490,0x37f);
    }

    protected int entryPoint() { return 0x10400; }
    protected int heapStart() { return 0x2e28c; }
    protected int gp() { return 0x353c0; }

    public static void xmain (PrintStream pw, String[] args) throws Exception
    {
        SamClass me = new SamClass (pw);
        int status = me.run("samtool.Main.samclass",args);
        //System.exit(status);
    }

    protected void _execute() throws ExecutionException { trampoline(); }

    protected void setCPUState(CPUState state) {
        r1=state.r[1];
        r2=state.r[2];
        r3=state.r[3];
        r4=state.r[4];
        r5=state.r[5];
        r6=state.r[6];
        r7=state.r[7];
        r8=state.r[8];
        r9=state.r[9];
        r10=state.r[10];
        r11=state.r[11];
        r12=state.r[12];
        r13=state.r[13];
        r14=state.r[14];
        r15=state.r[15];
        r16=state.r[16];
        r17=state.r[17];
        r18=state.r[18];
        r19=state.r[19];
        r20=state.r[20];
        r21=state.r[21];
        r22=state.r[22];
        r23=state.r[23];
        r24=state.r[24];
        r25=state.r[25];
        r26=state.r[26];
        r27=state.r[27];
        r28=state.r[28];
        r29=state.r[29];
        r30=state.r[30];
        r31=state.r[31];
        f0=state.f[0];
        f1=state.f[1];
        f2=state.f[2];
        f3=state.f[3];
        f4=state.f[4];
        f5=state.f[5];
        f6=state.f[6];
        f7=state.f[7];
        f8=state.f[8];
        f9=state.f[9];
        f10=state.f[10];
        f11=state.f[11];
        f12=state.f[12];
        f13=state.f[13];
        f14=state.f[14];
        f15=state.f[15];
        f16=state.f[16];
        f17=state.f[17];
        f18=state.f[18];
        f19=state.f[19];
        f20=state.f[20];
        f21=state.f[21];
        f22=state.f[22];
        f23=state.f[23];
        f24=state.f[24];
        f25=state.f[25];
        f26=state.f[26];
        f27=state.f[27];
        f28=state.f[28];
        f29=state.f[29];
        f30=state.f[30];
        f31=state.f[31];
        hi=state.hi; lo=state.lo; fcsr=state.fcsr;
        pc=state.pc;
    }
    protected void getCPUState(CPUState state) {
        state.r[1]=r1;
        state.r[2]=r2;
        state.r[3]=r3;
        state.r[4]=r4;
        state.r[5]=r5;
        state.r[6]=r6;
        state.r[7]=r7;
        state.r[8]=r8;
        state.r[9]=r9;
        state.r[10]=r10;
        state.r[11]=r11;
        state.r[12]=r12;
        state.r[13]=r13;
        state.r[14]=r14;
        state.r[15]=r15;
        state.r[16]=r16;
        state.r[17]=r17;
        state.r[18]=r18;
        state.r[19]=r19;
        state.r[20]=r20;
        state.r[21]=r21;
        state.r[22]=r22;
        state.r[23]=r23;
        state.r[24]=r24;
        state.r[25]=r25;
        state.r[26]=r26;
        state.r[27]=r27;
        state.r[28]=r28;
        state.r[29]=r29;
        state.r[30]=r30;
        state.r[31]=r31;
        state.f[0]=f0;
        state.f[1]=f1;
        state.f[2]=f2;
        state.f[3]=f3;
        state.f[4]=f4;
        state.f[5]=f5;
        state.f[6]=f6;
        state.f[7]=f7;
        state.f[8]=f8;
        state.f[9]=f9;
        state.f[10]=f10;
        state.f[11]=f11;
        state.f[12]=f12;
        state.f[13]=f13;
        state.f[14]=f14;
        state.f[15]=f15;
        state.f[16]=f16;
        state.f[17]=f17;
        state.f[18]=f18;
        state.f[19]=f19;
        state.f[20]=f20;
        state.f[21]=f21;
        state.f[22]=f22;
        state.f[23]=f23;
        state.f[24]=f24;
        state.f[25]=f25;
        state.f[26]=f26;
        state.f[27]=f27;
        state.f[28]=f28;
        state.f[29]=f29;
        state.f[30]=f30;
        state.f[31]=f31;
        state.hi=hi; state.lo=lo; state.fcsr=fcsr;
        state.pc=pc;
    }

    private static final java.util.Hashtable symbols = new java.util.Hashtable();
    static {
        symbols.put("putchar",new Integer(0x1de00));
        symbols.put("SetMouthThroat",new Integer(0x17600));
        symbols.put("printf",new Integer(0x1dc00));
        symbols.put("memmove",new Integer(0x1d600));
        symbols.put("GetBufferLength",new Integer(0x12600));
        symbols.put("SetSpeed",new Integer(0x11a00));
        symbols.put("getpagesize",new Integer(0x223d0));
        symbols.put("SAMMain",new Integer(0x15600));
        symbols.put("PrintPhonemes",new Integer(0x18a00));
        symbols.put("memcpy",new Integer(0x223e0));
        symbols.put("puts",new Integer(0x1e200));
        symbols.put("malloc",new Integer(0x1c800));
        symbols.put("isatty",new Integer(0x25600));
        symbols.put("PrintRule",new Integer(0x18e00));
        symbols.put("fflush",new Integer(0x1a000));
        symbols.put("Code41240",new Integer(0x13000));
        symbols.put("GetBuffer",new Integer(0x12400));
        symbols.put("Parser1",new Integer(0x12c00));
        symbols.put("EnableSingmode",new Integer(0x12200));
        symbols.put("strtol",new Integer(0x1fa00));
        symbols.put("fstat",new Integer(0x28600));
        symbols.put("SetThroat",new Integer(0x12000));
        symbols.put("memchr",new Integer(0x25e00));
        symbols.put("SetPitch",new Integer(0x11c00));
        symbols.put("strncat",new Integer(0x1f400));
        symbols.put("WriteWav",new Integer(0x18000));
        symbols.put("fopen",new Integer(0x1b000));
        symbols.put("memset",new Integer(0x223f0));
        symbols.put("main",new Integer(0x18400));
        symbols.put("SetInput",new Integer(0x11800));
        symbols.put("fclose",new Integer(0x19800));
        symbols.put("RenderSample",new Integer(0x15c00));
        symbols.put("strcmp",new Integer(0x1f200));
        symbols.put("PrintOutput",new Integer(0x18c00));
        symbols.put("atexit",new Integer(0x19000));
        symbols.put("fwrite",new Integer(0x1c400));
        symbols.put("Parser2",new Integer(0x13600));
        symbols.put("Render",new Integer(0x16200));
        symbols.put("exit",new Integer(0x19400));
        symbols.put("InsertBreath",new Integer(0x12800));
        symbols.put("GetRuleByte",new Integer(0x10600));
        symbols.put("atoi",new Integer(0x19200));
        symbols.put("TextToPhonemes",new Integer(0x10800));
        symbols.put("strlen",new Integer(0x10268));
        symbols.put("SetMouth",new Integer(0x11e00));
        symbols.put("AdjustLengths",new Integer(0x14600));
        symbols.put("_call_helper",new Integer(0x10284));
        symbols.put("free",new Integer(0x1ca00));
    }
    public int lookupSymbol(String symbol) { Integer i = (Integer) symbols.get(symbol); return i==null ? -1 : i.intValue(); }

}
